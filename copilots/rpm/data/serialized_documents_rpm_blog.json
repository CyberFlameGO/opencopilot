[
    {
        "page_content": "News & Updates\n\nFor Developers\n\nWhat's new in Ready Player Me \u2014 July 2023\n\nAugust\n\n2023\n\nmin read\n\nHere's your recap of what we added to Ready Player Me in July\n\nOur new advanced user management tools \u2014 Account Linking and Guest Accounts \u2014 let you speed up onboarding and make switching between platforms much smoother.\n\nIn Unity SDK 3.0, we have merged the Avatar Loader Package into the Core SDK module for easier maintenance. Be sure to check out the migration guide to ensure effortless transition. The SDK update also includes an integration guide, helping new developers get started with Ready Player Me. The Avatar Configuration now uses the lod parameter instead of meshLod, reducing triangle count by up to 75%.\n\nThe lod parameter was introduced in the recent update to our Avatar REST API. The update also expanded the texture encoding to JPEG, PNG, and WEBP file formats. The last one can cut avatar file size by up to 40%.\n\nWe shared a couple of guides for the Unity SDK on our blog: one on building a multiplayer game with Photon and Unity NetCode, and the second on creating smart NPCs using OpenAI's ChatGPT.\n\nYou can now stay up-to-date with all improvements and feature releases thanks to a new changelog on our website.\n\nWatch the full July recap here or on YouTube:\n\nGet started with Ready Player Me\n\nAre you building an app or game that could use some avatars? You can integrate Ready Player Me for free, even in commercial applications. Sign up here to get started.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/whats-new-in-ready-player-me-july-2023"
        }
    },
    {
        "page_content": "News & Updates\n\nFor Developers\n\nKeep Track of New Ready Player Me Features With Changelog\n\n27\n\nJuly\n\n2023\n\nmin read\n\nThe new changelog lets you keep up with the latest changes and updates to Ready Player Me SDKs, API, and the platform as a whole.\n\nA few years ago, Ready Player Me was just the avatar creator itself. Today, it\u2019s a complete platform, serving both users and developers, offering everything you need to add avatars to your game or app. To make it easier for you to keep up to date with the latest features and changes, we have added a changelog to our website.\n\nBesides going to the page, you can subscribe to the changelog using an RSS reader app or service like Feedly. We also added a new #dev-changelog channel to our Discord server.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/keep-track-of-new-ready-player-me-features-with-changelog"
        }
    },
    {
        "page_content": "For Developers\n\nSmart NPCs with ChatGPT and Ready Player Me Unity SDK\n\n25\n\nJuly\n\n2023\n\nmin read\n\nIn this blog post, we will explore the process of creating NPC agents using Ready Player Me avatars and leveraging the conversational abilities of OpenAI ChatGPT. Before we start, for this project to work, you will need an OpenAI account and an API Key to use in this project and Unity 2020.3 or a newer version.\n\nWe will create a new Unity project and import Ready Player Me Unity SDK into it. You can visit the Ready Player Me GitHub organization here and copy the Git URL of the GitHub repository. The Git URL of the package is https://github.com/readyplayerme/rpm-unity-sdk-core.git\n\nIn your Unity project, go to Window > Package Manager > + Button > Add package from the Git URL menu, paste the copied URL into it, and click the add button.\n\nThe packages will take about 10 seconds to load, and then you can see the Ready Player Me menu at the menu bar. If it is your first time using Ready Player Me, you will be shown Setup Guide. After finishing the setup, you can visit readyplayer.me to make yourself an avatar and copy its URL.\n\nThen, return to Unity and click on Ready Player Me > Avatar Loader menu, paste your avatar's URL in the text field, and click the Load Avatar button.\n\nOnce your avatar is imported and in the scene, you can adjust the camera and light to get a good view of your avatar. And now, we can start working on our UI. For this project, I want to go with a Text for displaying the users and AI assistant's messages, an Input Field for typing the user's input, and a send Button for initiating the request to the OpenAI chat completion endpoint\n\nNow we are ready to bring another package into the project to establish the connection with ChatGPT. Visit the OpenAI Unity package here in GitHub and import the Unity package following the similar steps we used for Ready Player Me SDK. The Git URL of the package is https://github.com/srcnalt/OpenAI-Unity.git\n\nLet's create an Empty Game Object in the scene called Conversation Manager and a C# script with the same name, and attach this script to the game object. This script will handle our UI interactions and make the ChatGPT requests.\n\nThe code above will handle most of our UI interactions. Select the Conversation Manager game object and set the UI\u00a0elements on the component with the same name.\n\nWe can now bring the logic for requesting ChatGPT and save message history in a list of chat messages. First, we will create an OpenAIApi object which will make the requests. In the constructor of the OpenAIApi object, pass your Open AI API Key as a string.\n\nThen create a ChatMesage list and add the first message item as our instruction for the system, which will have the role \"system\" and the prompt content \"You are a Ready Player Me avatar, who exists in the metaverse.\" this is going to help the ChatGPT contain its personality in the given context.\n\nThen once the user clicks on the send button, we will first add the user\u2019s input to the list of chat messages with the role \"user\" and make our request. And once we receive the response from ChatGPT, we can extract the returned text reply from the returned object and append it to our chat message list to keep a conversation history.\n\nReady Player Me animation library here and pick your desired animations. In this example, we will use the\n\nM_Standing_Idle_Variations_002.fbx and\n\nM_Talking_Variations_001.fbx to have two states in our animator\n\nOnce you downloaded and brought the animations into your project, select the FBX files, and in the Rig tab, select Animation Type Humanoid to select the animations in the Animation tab, and check Loop Time.\n\nAfter that, we can create an Animation Controller to use these animations. In this animation, the controller will have two states, Idle and Talking, and a Talk parameter to trigger when we receive the reply from ChatGPT. And finally, we will uncheck the Has Exit Time on the transition from Idle to Talking, so when the talking state is triggered, it will not wait for the Idle animation to finish.\n\nFinally, we can attach this animation controller to our avatar\u2019s Animator component, get a reference in our Conversation Manager, and trigger the Talk parameter once the reply is received.\n\nAnd with all this, we should have a small AI conversation app finished. You can access the project from this URL: https://github.com/readyplayerme/Unity-OpenAI-Example",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/smart-npcs-with-chatgpt-and-ready-player-me-unity-sdk"
        }
    },
    {
        "page_content": "For Developers\n\nChangelog\n\nUnity SDK now supports Photon and Unity NetCode multiplayer packages\n\n18\n\nJuly\n\n2023\n\nmin read\n\nBuilding multiplayer games in Unity can be hard. Fortunately, great services, such as\u00a0Photon and Unity NetCode. are out there making this challenge much less complex. Available today, Ready Player Me avatars are compatible with both - with a single package installation.\n\nGet Started with Photon Unity Networking (PUN)\n\nPhoton, a real-time multiplayer framework, provides a robust networking infrastructure for seamless connectivity across platforms. With Photon Multiplayer, you can effortlessly implement multiplayer functionality in your game, app, or XR experience.\n\nPhoton Multiplayer offers essential features such as matchmaking, room creation, voice chat, and synchronized game states. These features enable users to collaborate, compete, and socialize in shared virtual spaces in real time. Whether you're designing cooperative gameplay or competitive challenges, Photon Multiplayer provides a reliable and scalable infrastructure for real-time interactions between players.\n\nReady Player Me avatars are usually loaded at runtime. Though, Photon requires the avatar to be instantiated already at startup. The package solves this problem by providing a Prefab, that handles the avatar loading and mesh and material transfer to the character prefab from Photon.\n\nAll the details, installation guide and samples are available on GitHub.\n\nGet Started with Unity NetCode\n\nUnity Netcode is a feature set offered by Unity Technologies for building multiplayer games and networking functionality in the Unity game engine. It simplifies the development of online multiplayer experiences by managing game state synchronization across multiple clients and servers.\n\nWith a High-Level API, developers can easily define networked behaviors for game objects without worrying about low-level networking details. Unity Netcode also supports dedicated servers, peer-to-peer connections, and relay servers, while providing tools for testing and debugging networked games.\n\nWith the newly released Ready Player Me SDK Package for Unity NetCode, you are provided with a ready-to-play example - making it easy to learn and get started.\n\nAll the details, installation guide and samples on available on GitHub.\n\nGet started with Ready Player Me\n\nAre you building an app or game that could use some avatars? You can integrate Ready Player Me for free, even in commercial applications. Sign up here to get started.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/unity-sdk-now-supports-photon-and-unity-netcode-multiplayer-packages"
        }
    },
    {
        "page_content": "News & Updates\n\nFor Developers\n\nImproving Avatar Performance With New Avatar API Options\n\n10\n\nJuly\n\n2023\n\nmin read\n\nWe are introducing new texture format options and a new lod parameter for the Avatar API. Combined, they allow for up to 40% smaller avatar files and 70% lower triangle count \u2013 drastically improving the performance of your app.\n\nLast year, we introduced the Avatar API \u2013 our biggest step in improving the performance and interoperability of our avatars in your apps and games. In its initial form, you could adjust the meshLOD and texture size \u2013 letting you optimize avatars\u2019 quality to fit your specific use case better. With today\u2019s release, we are bringing additional options to the API, allowing reducing avatar file size and bringing even more avatars in a single scene without performance compromises.\n\nPick from new texture file format options\n\nTexture files are one of the biggest contributors to an avatar\u2019s file size and runtime performance. You now have the option to change the format of the avatar textures. We bring support for JPEG, PNG, and WEBP texture encoding. Support for KTX is coming in the future too.\n\nWhen using WEBP formatted textures, you can expect up to 40% smaller avatar file sizes without a noticeable quality loss.\n\nMore LOD adjustment options\n\nAnother way to greatly improve the performance of your app is by reducing the level of detail of avatars, especially if they appear small or they are far from the player\u2019s view.\n\nThe existing meshLod parameter of the Avatar REST API allows you to apply automatic triangle count reduction on an avatar\u2019s body. This can reduce the total triangle count by up to 50%. The new lod parameter lets you reduce the triangle count by up to 75% when compared to the highest quality available (lod=0).\n\nUnlike the meshLod parameter, lod triangle count reduction also applies to an avatar\u2019s head model. As a result, you can expect a 17% and 23% improvement in total avatar triangle count reduction when using lod=1 and lod=2 respectively.\n\nYou can continue to use the meshLod parameter to reduce the triangle count of equipped assets without affecting the head model.\n\nThe new texture file formats and the lod parameter are available now to all Ready Player Me developers and are supported on all assets \u2013 including ones uploaded using the Asset Manager. Check out our developer docs to learn more.\n\nBecome a Partner and add Ready Player Me avatars to your app or game\n\nExcited about new features coming to our platform? We are always looking to help more companies and developers become part of the metaverse.\n\nIf you want to integrate our avatars into your app or game, sign up here for free.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/improving-avatar-performance-with-new-avatar-api-options"
        }
    },
    {
        "page_content": "Changelog\n\nFor Developers\n\nNow Available: Account Linking & Guest Accounts\n\nJuly\n\n2023\n\n\u201a\u00c4\u00a2\n\nmin read\n\nWe are very excited to launch new advanced user management tools, Account Linking and Guest Access, to help reduce friction for your users and get them creating avatars even faster.\n\nEnd user experience is very important to helping you grow and retain your user base. We are very excited to launch new advanced user management tools in the form of Account Linking and Guest Accounts to help reduce friction for your users and get them creating avatars even faster. Now, users can seamlessly transition into your app's Avatar Creator without additional logins. Advanced User Management improves the setup experience by creating and linking accounts without user input, streamlining the creation process of avatars.\n\nAccount Linking\n\nUntil now, the Platform managed user sessions in the browser with local storage and cookies. However, this is not the best way to manage sessions throughout devices and platforms. With Account Linking, you can now directly link the Ready Player Me user to your user profiles after they are authorized and request an access token whenever they return to your app or game. Hence, no more double login - no more loss of the sessions, no more loss of avatars and unlocked assets.\n\nLearn how it works in the Guide in the Docs.\n\nGuest Accounts\n\nPlayers need to trust that their \u00ac\u2020assets and avatars stored safely, even if they don\u201a\u00c4\u00f4t have a Ready Player Me account. That\u201a\u00c4\u00f4s why you can now create a guest account for all users. After the initial account creation, you can optionally equip them with a default avatar so that no further step is needed for them to jump into the experience. Combined with Account Linking, you can now link those guest accounts to your user profile and restore their session whenever they return to your app or game.\n\nUsers with a guest account can easily migrate to a full-fledged Ready Player Me account and take their avatars to thousands of other apps and games already integrated with the Platform. All your users need to do is sign-up or login with their Ready Player Me credentials, and their avatars and assets will be automatically transferred.\n\nLearn how to set up Guest Accounts in the Docs\n\nExperience it live in Hiberworld\n\nHiber is the first partner who launched this new flow. In the following video, you can see it in action:\n\n\u201a\u00c4\u00e7",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/now-available-account-linking-guest-accounts"
        }
    },
    {
        "page_content": "For Developers\n\nUnity SDK 2.0 is Here: Get Started With Migration\n\n21\n\nFebruary\n\n2023\n\nmin read\n\nAfter an alpha release a few weeks ago and implementing fixes based on your initial feedback, Ready Player Me Unity SDK 2.0 is ready! Starting today, we invite you to begin migrating your projects to the new version of the SDK.\n\nWhat\u2019s new in the Unity SDK 2.0\n\nModular architecture, which allows developers to create and distribute Ready Player Me compatible Unity packages in the future (please let us know here if you have an idea and want to contribute)\n\nAll packages are open-source and publicly available on GitHub (don\u2019t forget to \u2b50\ufe0f the repository, we appreciate it!)\n\nAll modules are built around the Unity Package Manager\n\nWe now use the glTFast library by default instead of the glTFUtility package for better compatibility and new features\n\nDraco compression can now be enabled\n\nYou can now update the Unity SDK directly from the Unity Editor instead of downloading it from the documentation\n\nMigrate your existing projects\n\nIf you're looking to move your existing project to the new Unity SDK 2.0, you can follow the steps from this guide.\n\nJoin discussion on GitHub\n\nWe look forward to your feedback about the new Unity SDK on GitHub Discussions. Let us know about your upgrade experience and any issues you encountered. We will do our best to fix them as soon as possible.\n\nWhat\u2019s next with the Unity SDK\n\nIn the coming weeks, we will begin transitioning our official developer docs to support Unity SDK 2.0. Version 1.x of the Unity SDK will be maintained and supported for the next six months (end of August), but new features will be exclusive to the v2.x releases.\n\nAdd Ready Player Me avatars to your app or game\n\nWe are on a mission to break down the virtual walls to build a more open and connected metaverse. Our cross-game avatar platform is used by 6,000+ developers, including VRChat, Portals, Spatial, and Hiber.\n\nReady Player Me is free to use for users and developers. Sign up to integrate today.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/changelogunity-sdk-2-0"
        }
    },
    {
        "page_content": "For Developers\n\nGet Started With Ready Player Me's Revamped Developer Docs\n\n16\n\nFebruary\n\n2023\n\nmin read\n\nReady Player Me grew from being just a web-based avatar creator to a complete avatar toolset for developers, featuring Avatar API, Unity SDK and Unreal SDK. Our Developer Docs needed a revamp to accommodate new features as we continue growing our platform.\n\nIntroducing Developer Docs v3\n\nWith today's release of the Developer Docs v3, we brought new life to our docs by making platform onboarding easier for new developers and making the overall structure more intuitive.\n\nA new 4-step process will guide you through each phase of integrating Ready Player Me:\n\nQuickstart \u2013 loading an avatar into your app/game for the first time in under 10 mins\n\nIntegrate \u2013 adding the Ready Player Me avatar creator into your application\n\nOptimize \u2013 making Ready Player Me work smoothly with your app\n\nLaunch \u2013 releasing your app or game featuring Ready Player Me avatar creator to our existing users\n\nWe also split existing articles into integration guides for specific platforms and API references for more technical documentation of Avatar models, SDKs, and APIs.\n\nLast but definitely not least \u2013 Ready Player Me Developer Docs now use dark mode!\n\nBecome a Ready Player Me developer\n\n6,000+ developers already use Ready Player Me, and we hope these changes will make the integration process easier for another 6,000. If you want to be one of them, sign up to become a developer partner.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/developer-docs-v3"
        }
    },
    {
        "page_content": "For Developers\n\nHow to get started with the Avatar API in Unity\n\n30\n\nNovember\n\n2022\n\nmin read\n\nLast month, we released the Avatar API \u2013 our avatar interoperability layer that improves avatar performance and integration flexibility. We have already seen Ready Player Me partners use it to make their games run smoother or to generate 2D user profile pictures.\n\nThe Avatar API makes changing Avatar Config simple, regardless if you're building a web experience or a game in Unity. We partnered with Dinesh Punni from Immersie Insiders to go over the API's features and using it with Unity.\n\nHow to use the Avatar API\n\nAll you need to get started with the Avatar API with an avatar ID that ends with the GLB file extension. You can get an avatar URL to your existing avatar from the My Avatars section of the Ready Player Me Hub or by creating it on the demo subdomain. It should look like this: https://api.readyplayer.me/v1/avatars/6185a4acfb622cf1cdc49348.glb\n\nAvatar API allows you to change the Avatar Config by adding parameters to the URL. For example, to change the mesh's level of detail, you have to add ?meshLod=2 at the end of the link: https://api.readyplayer.me/v1/avatars/6185a4acfb622cf1cdc49348.glb?meshLod=2.\n\nCurrently, you can use the following parameters, with more to come in future releases:\n\nmeshLod \u2013 control the triangle count of the returned avatar\n\ntextureSizeLimit \u2013 set the upper limit for texture resolution in pixels of any texture in the avatar\n\ntextureAtlas \u2013 generate a texture atlas of the desired resolution\n\nmorphTargets \u2013 comma-separated list of individual morph targets or morph target standard groups to include on the avatar\n\npose \u2013 define the pose for a full-body avatar\n\nuseDracoMeshComparassion \u2013 reduce the file size by compressing output avatars with Draco mesh compression\n\nuseHands \u2013 toggle hands for half-body VR avatars\n\nYou can see a list of all available values in our developer docs.\n\nGetting 2D renders through the Avatar API\n\nBy changing the file extension from GLB to PNG, you can export a 2D render of the avatar using the Render API. There are a couple of parameters that let you change the render background and avatar's expression:\n\nscene \u2013 the name of the portrait type to render (full-body, half-body, transparent, etc.)\n\nblendShapes \u2013 map of 3D meshes to their blend shapes (changing avatar's expression)\n\nSee the list of all available values for 2D avatars.\n\nAccess metadata of an avatar\n\nAvatar API also allows you to see the following metadata of an avatar:\n\nbodyType (full-body or half-body)\n\noutfitGender (masculine or feminine)\n\noutfitVersion (depends on the outfit)\n\nskinTone (provided as a hex value \u2013 you can use it for setting the skin tone of custom hands for VR avatars)\n\ncreatedAt\n\nupdatedAt\n\nUsing the Avatar API with the Unity SDK\n\nIf you're using the Ready Player Me Unity SDK, you can access Avatar API's features directly through the Unity editor. You can also take advantage of the Scriptable Objects and dynamically change the Avatar Config based on the gameplay. It can be used for things like distance-based rendering of avatars with a variable mesh LOD. You can use one of the default Avatar Configs or create a custom one that fits your needs.\n\nGet started with the Avatar API and Ready Player Me\n\nYou have everything that's needed to get started with the Avatar API. Head to the developer docs for more detailed instructions and to learn more about integrating Ready Player Me avatars into your app or game. You can also read more about Avatar API from the Immersive Insiders team.\n\nWe spent seven years building a perfect 3D avatar system, so you don't have to. Ready Player Me avatars work on the web, mobile, and every platform that support Unity or Unreal Engine.\n\nJoin the growing list of over 5,000 Ready Player Me partners who integrate our avatars into their apps and games, including Animaze, Immersed, Spatial, and Hiber.\n\nReady Player Me is free to use for users and developers. Become a Ready Player Me partner to use our avatars in your commercial app or game.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/get-started-avatar-api-unity"
        }
    },
    {
        "page_content": "For Developers\n\nWhat\u2019s New for Developers: Major Performance Improvements to Avatars\n\n11\n\nOctober\n\n2022\n\nmin read\n\nBy far, the most requested feature by developers using Ready Player Me was the ability to change the level of detail (LODs) of avatars, giving control over the quality and performance of avatars in apps and games. Today, we are finally bringing this feature to our Unity and Unreal Engine SDKs.\n\nBut that\u2019s not all \u2013 thanks to the Avatar API, you have more control over the avatar\u2019s configuration directly from the SDKs.\n\nAdjust avatars\u2019 level of detail and other parameters\n\nWith the new versions of the Unity and Unreal Engine SDKs, you can set the LOD of the avatars loaded into your project. You now have control over mesh-LOD, texture atlas size, and texture size limit. These tools should help optimize the performance of your app or game, making it possible to load hundreds of avatars in the same scene.\n\nYou can also pick between A- and T-pose, toggle morph targets based on your own needs, and disable provided hands for half-body avatars \u2013 all without leaving the Unity or Unreal editor.\n\nCheck the updated developer documentation covering all of the new features.\n\nAvatar API: a big step toward interoperability\n\nAll of the features that we covered above wouldn\u2019t be possible without our new Avatar API. And this is just the beginning. Learn about what\u2019s coming in the future in a blog post from our CTO, Rainer Selvet.\n\nBecome a Partner and add Ready Player Me avatars to your app or game\n\nExcited about new features coming to our platform? We are always looking to help more companies and developers become part of the metaverse.\n\nIf you want to integrate our avatars into your app or game, apply to become a partner.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/pick-avatar-lods"
        }
    },
    {
        "page_content": "For Developers\n\nWhat\u2019s new for developers: updated Unreal SDK and new Unity example\n\n24\n\nAugust\n\n2022\n\nmin read\n\nA few weeks ago, we shared some exciting updates to our developer tools. Our Unity SDK now allows you to directly access the Render API, cache avatars during runtime and debug with the new SDKLogger tool. The updated developer docs make it easier to try out Ready Player Me and learn more about our partnership program.\n\nToday, we release an updated Unreal SDK and new Unity examples for VR and desktop apps.\n\nPS. In case you missed it, we raised a $56M Series B round led by Andreessen Horowitz. Learn what it means for Ready Player Me.\n\nUnreal SDK v0.17.0: Render API, Avatar caching\n\nThe latest version of our Unreal SDK comes with many new features, loads of improvements and several fixes.\n\nThe Unreal SDK now offers avatar caching as an experimental opt-in feature. After the initial download, they will load much faster.\n\nLike with our Unity SDK, we added direct integration with our Render API to the Unreal SDK. It allows you to get 2D renders of avatars and use them for things like leaderboards, user profiles, and more.\n\nStarting with this SDK version, the main development efforts and our developer docs are focused on Unreal Engine 5. However, if you still rely on Unreal Engine 4, you can find useful information in the documentation.\n\nLastly, we would like to ask you for help. We embedded product analytics in our Unreal SDK (and Unity SDK earlier this month) to learn which features need more attention and where we can improve the most. They are disabled by default, but it would help develop our platform if you decide to turn them on. We are transparent about how to use the data \u2013 you can read more about it here. TL;DR: no personal data is captured, and we don\u2019t share any data with third parties.\n\nIntegrate Ready Player Me in Unity PC and VR apps\n\nCurrently, the best way to integrate Ready Player Me in Unity PC and VR apps is with the help of Vuplex. We created a new Unity Vuplex example project to guide you through the implementation.\n\nBecome a Partner and add Ready Player Me avatars to your app or game\n\nExcited about new features coming to our platform? We are always looking to help more companies and developers become part of the metaverse.\n\nIf you want to integrate our avatars into your app or game, apply to become a partner.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/updated-unreal-sdk-unity-vuplex"
        }
    },
    {
        "page_content": "For Developers\n\nWhat's New For Developers In Ready Player Me (August 2022)\n\nAugust\n\n2022\n\nmin read\n\nIt's been a busy summer at Ready Player Me. We have been working hard on bringing new features to our avatar platform and SDKs. But before we dive into the new features, we have to celebrate: Ready Player Me is now used by 3,000+ developers! We are grateful to have amazing partners like you join us in building an open and interoperable metaverse.\n\nNow onto what's new in Ready Player Me for developers.\n\nUpdated Unity SDK with avatar renders and runtime caching\n\nThe latest version of our Unity SDK (v1.11.0) is now available. You can now take advantage of our Render API directly within the Unity SDK, enabling you to create 2D renders of avatars. It's for creating leaderboards or user profiles in the UI of your game.\n\nAnother much-requested feature coming in v1.11.0 caching avatars during runtime. Previously it was available only in the Unity Editor, but now you can use it in your app or game, saving users' loading time. Cached avatars are stored in Unity\u2019s `Application.PersistentDataPath`. If you're looking to make loading multiple avatars more efficient, we also added some new examples to our docs.\n\nThe latest version of the Unity SDK also brings SDKLogger \u2013 a debugging tool printing logs about avatar loading operation and status. The results can be viewed during runtime. There are a few smaller improvements too:\n\nOption to remove session info after creating an avatar (great for kiosk-like experiences)\n\nSimplified UI of the Avatar Loader\n\nThe WebView Partner Editor is now renamed to \"Settings\"\n\nLoaded avatars from the Avatar Loader are now imported as Prefabs\n\nLastly, we would like to ask you for help. We embedded product analytics in our SDK to learn which features need more attention and where we can improve the most. They are disabled by default, but it would help develop our platform if you decide to turn them on. We are transparent about how to use the data \u2013 you can read more about it here. TL;DR: no personal data is captured, and we don\u2019t share any data with third parties.\n\nImproved documentation for new partners\n\nOur developer documentation received an upgrade! If you're new to Ready Player Me or want to learn how to integrate our avatar system into your app or game, our improved docs will make it a breeze.\n\nTry me\n\nPartner showcase\n\nUnity\n\nUnreal\n\nPlease leave your feedback using the page-rating feature at the bottom of the documentation. It helps us improve the docs even more in the future.\n\nMore recent updates to Ready Player Me\n\nReady Player Me now supports the Cardano blockchain, allowing for custom unlockable content based on the network\n\nNew horizontal UI is currently tested by selected users. You will see it live in the coming weeks\n\nBecome a Partner and add Ready Player Me avatars to your app or game\n\nExcited about new features coming to our platform? We are always looking to help more companies and developers become part of the metaverse.\n\nIf you want to integrate our avatars into your app or game, apply to become a partner.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/whats-new-for-developers-ready-player-me-3d-avatar-maker-august-2022"
        }
    },
    {
        "page_content": "For Developers\n\nChangelog\n\nUnity SDK now supports Photon and Unity NetCode multiplayer packages\n\n18\n\nJuly\n\n2023\n\nmin read\n\nBuilding multiplayer games in Unity can be hard. Fortunately, great services, such as\u00a0Photon and Unity NetCode. are out there making this challenge much less complex. Available today, Ready Player Me avatars are compatible with both - with a single package installation.\n\nGet Started with Photon Unity Networking (PUN)\n\nPhoton, a real-time multiplayer framework, provides a robust networking infrastructure for seamless connectivity across platforms. With Photon Multiplayer, you can effortlessly implement multiplayer functionality in your game, app, or XR experience.\n\nPhoton Multiplayer offers essential features such as matchmaking, room creation, voice chat, and synchronized game states. These features enable users to collaborate, compete, and socialize in shared virtual spaces in real time. Whether you're designing cooperative gameplay or competitive challenges, Photon Multiplayer provides a reliable and scalable infrastructure for real-time interactions between players.\n\nReady Player Me avatars are usually loaded at runtime. Though, Photon requires the avatar to be instantiated already at startup. The package solves this problem by providing a Prefab, that handles the avatar loading and mesh and material transfer to the character prefab from Photon.\n\nAll the details, installation guide and samples are available on GitHub.\n\nGet Started with Unity NetCode\n\nUnity Netcode is a feature set offered by Unity Technologies for building multiplayer games and networking functionality in the Unity game engine. It simplifies the development of online multiplayer experiences by managing game state synchronization across multiple clients and servers.\n\nWith a High-Level API, developers can easily define networked behaviors for game objects without worrying about low-level networking details. Unity Netcode also supports dedicated servers, peer-to-peer connections, and relay servers, while providing tools for testing and debugging networked games.\n\nWith the newly released Ready Player Me SDK Package for Unity NetCode, you are provided with a ready-to-play example - making it easy to learn and get started.\n\nAll the details, installation guide and samples on available on GitHub.\n\nGet started with Ready Player Me\n\nAre you building an app or game that could use some avatars? You can integrate Ready Player Me for free, even in commercial applications. Sign up here to get started.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/unity-sdk-now-supports-photon-and-unity-netcode-multiplayer-packages"
        }
    },
    {
        "page_content": "Changelog\n\nFor Developers\n\nNow Available: Account Linking & Guest Accounts\n\nJuly\n\n2023\n\n\u201a\u00c4\u00a2\n\nmin read\n\nWe are very excited to launch new advanced user management tools, Account Linking and Guest Access, to help reduce friction for your users and get them creating avatars even faster.\n\nEnd user experience is very important to helping you grow and retain your user base. We are very excited to launch new advanced user management tools in the form of Account Linking and Guest Accounts to help reduce friction for your users and get them creating avatars even faster. Now, users can seamlessly transition into your app's Avatar Creator without additional logins. Advanced User Management improves the setup experience by creating and linking accounts without user input, streamlining the creation process of avatars.\n\nAccount Linking\n\nUntil now, the Platform managed user sessions in the browser with local storage and cookies. However, this is not the best way to manage sessions throughout devices and platforms. With Account Linking, you can now directly link the Ready Player Me user to your user profiles after they are authorized and request an access token whenever they return to your app or game. Hence, no more double login - no more loss of the sessions, no more loss of avatars and unlocked assets.\n\nLearn how it works in the Guide in the Docs.\n\nGuest Accounts\n\nPlayers need to trust that their \u00ac\u2020assets and avatars stored safely, even if they don\u201a\u00c4\u00f4t have a Ready Player Me account. That\u201a\u00c4\u00f4s why you can now create a guest account for all users. After the initial account creation, you can optionally equip them with a default avatar so that no further step is needed for them to jump into the experience. Combined with Account Linking, you can now link those guest accounts to your user profile and restore their session whenever they return to your app or game.\n\nUsers with a guest account can easily migrate to a full-fledged Ready Player Me account and take their avatars to thousands of other apps and games already integrated with the Platform. All your users need to do is sign-up or login with their Ready Player Me credentials, and their avatars and assets will be automatically transferred.\n\nLearn how to set up Guest Accounts in the Docs\n\nExperience it live in Hiberworld\n\nHiber is the first partner who launched this new flow. In the following video, you can see it in action:\n\n\u201a\u00c4\u00e7",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/now-available-account-linking-guest-accounts"
        }
    },
    {
        "page_content": "Changelog\n\nNFT Wallet Enhancements\n\n21\n\nMarch\n\n2023\n\nmin read\n\nWe're excited to announce some major enhancements to our NFT wallet functionality, designed to make it easier for users to manage and use their NFT assets within our platform.\n\n1. Enhanced NFT Wallet Preview UXWe have made significant improvements to the NFT Wallet preview, making it easier for users to inspect their wallet, see which Ready Player Me compatible assets they have, and select the ones they want to enable for use with their avatars. This feature improves the overall user experience, making it easier for users to navigate their assets and enabling them to quickly find the ones they need.\n\n2. On-Demand NFT Fetching with retrieveNftsFromWalletWe have added a new feature to our platform that simplifies the process of bringing compatible NFTs into Ready Player Me. With the new retrieveNftsFromWallet functionality, NFTs are now fetched on demand, which means our partners can easily and quickly bring their compatible NFT assets without having to go through a complex and time-consuming process.\n\nWe hope these new enhancements will make it easier for our developers and users to manage and use their NFT assets within Ready Player ME, and we're excited to see how our community uses these new features to create amazing content within our platform.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/changelognft-wallet-enhancements"
        }
    },
    {
        "page_content": "Changelog\n\nWebAPI Improvements: Selectable Body Type and Logout API\n\n30\n\nAugust\n\n2022\n\nmin read\n\nToday, we are expanding our WebAPI with new features. Last month, we brought kiosk-like experiences with a new ?clearCache=true query parameter added to the partner subdomain. We are adding additional query strings that give you more control over the behavior of the Ready Player Me avatar creator.\n\nYou can use the new bodyType parameter to load a half-body, full-body, or selectable body type avatar creator. Previously, only our support team was able to change this.\n\nIn addition, you can use the gender parameter to pre-select a feminine or masculine avatar body type.\n\nWe also added a new v1.user.logout event, making it simple to sign out users if needed.\n\nWe continue adding more changes to our WebAPI, giving developers more control over the Ready Player Me integration.\n\nYou can read more in our documentation here.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/changelogwebapi-selectable-avatar-type-log-out-api-more"
        }
    },
    {
        "page_content": "Changelog\n\nSupport for kiosk-like experiences\n\n16\n\nJune\n\n2022\n\nmin read\n\nIt's now possible to use Ready Player Me in kiosk-like environments where multiple people are creating avatars using the same device, for instance during conference demos.\n\nIf the `?clearCache=true` query parameter is present, page reloads cause the avatar creation to start from step 1.\n\n`https://demo.readyplayer.me/avatar?clearCache=true`\n\nThis is part of a series of WebAPI improvements coming to Ready Player Me, enabling you to have more control over your integration.\n\nCheck out the documentation for more information.",
        "metadata": {
            "source": "https://readyplayerdev.me/blog/changelogkiosk-like-experiences"
        }
    }
]