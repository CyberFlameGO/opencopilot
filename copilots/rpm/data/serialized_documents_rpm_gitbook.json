[
    {
        "page_content": "Welcome\nReady Player Me is a cross-game avatar platform for Unity, Unreal Engine, and all web-based stacks.\nLaunch your game with Ready Player Me in \n5 steps\n[](#launch-your-game-with-ready-player-me-in-5-steps)\n[1. QuickstartLoad your personal avatar into your game or app in under 10 minutes.](https://docs.readyplayer.me/ready-player-me/getting-started/1.-quickstart)\n[2. IntegrateIntegrate Ready Player Me avatars and the Avatar Creator into your game or app.](https://docs.readyplayer.me/ready-player-me/getting-started/2.-integrate)\n[3. CustomizeCustomize your avatar creator; upload your custom assets.](https://docs.readyplayer.me/ready-player-me/getting-started/3.-customize)\n[4. OptimizeOptimize for your deployment platform.](https://docs.readyplayer.me/ready-player-me/getting-started/4.-optimize)\n[5. LaunchAcquire more users by publishing your game or app to the Ready Player Me Hub.](https://docs.readyplayer.me/ready-player-me/getting-started/5.-launch)\nQuicklinks\n[](#quicklinks)\nIntegration Guides\n[](#integration-guides)\n\u200b\n[Avatar Creator Setup](https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator)\n\u200b\n\u200b\n[Unity Integration](https://docs.readyplayer.me/ready-player-me/integration-guides/unity)\n\u200b\n\u200b\n[Unreal Integration](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine)\n\u200b\n\u200b\n[Native Integration](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration)\n\u200b\nUnity SDK\n[](#unity-sdk)\n\u200b\n[Quickstart](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n\u200b\n\u200b\n[Load Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars)\n\u200b\n\u200b\n[Avatar Creator](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator)\n\u200b\nUnreal SDK\n[](#unreal-sdk)\n\u200b\n[Quickstart](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart)\n\u200b\n\u200b\n[Load Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/load-avatars)\n\u200b\n\u200b\n[Avatar Creator](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/avatar-creator-integration)\n\u200b\n\u200b\nCustomizing Guides\n[](#customizing-guides)\n\u200b\n[Studio](https://docs.readyplayer.me/ready-player-me/customizing-guides/studio-developer-dashboard)\n\u200b\n\u200b\n[Avatar Creator Appearance](https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator)\n\u200b\n\u200b\n[Manage Custom Outfits](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits)\n\u200b\n\u200b\n[Create Custom Outfits](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits)\n\u200b\nAPI Reference\n[](#api-reference)\n\u200b\n[Avatars](https://docs.readyplayer.me/ready-player-me/api-reference/avatars)\n\u200b\n\u200b\n[Avatar Creator](https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator)\n\u200b\n\u200b\n[Avatar API]()\n\u200b\n\u200b\n[Unity SDK](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk)\n\u200b\n\u200b\n[Unreal SDK](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk)\n\u200b\n\u200b\nSupport\n[](#support)\n\u200b\n[Licensing](https://docs.readyplayer.me/ready-player-me/support/terms-of-use)\n\u200b\n\u200b\n[Discord Community](https://discord.com/invite/readyplayerme)\n\u200b\n\u200b\n[Support Request](https://docs.readyplayer.me/ready-player-me/support/how-to-contact-us)\n\u200b\n\u200b\n[Bug & Feature Request](https://docs.readyplayer.me/ready-player-me/support/bug-reports-and-feature-requests)\n\u200b\n\u200b\n[Terms of Use](https://docs.readyplayer.me/ready-player-me/support/terms-of-use)\n\u200b\n\u200b\n[Product Newsletter](https://docs.readyplayer.me/ready-player-me/support/product-newsletter)\n\u200b\n\u200b\n[Glossary of Terms](https://docs.readyplayer.me/ready-player-me/support/glossary-of-terms)\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/",
            "title": "Welcome"
        }
    },
    {
        "page_content": "Avatar Creator\nIntegrate the Avatar Creator via iframe or WebView.\nThe Avatar Creator can be integrated into your app via iframe or WebView. The communication between your app or game and the Avatar Creator is by postMessage.\nEmitted Events\n[](#emitted-events)\nAll messages emitted by the iframe contain an \neventName\n and \nsource\n which can be used for filtering the emitted output. See the table below for all currently supported events and their sample outputs.\nEvent\nPayload example\nv1.frame.ready\n{\n \neventName\n:\n \n'v1.frame.ready'\n,\n \nsource\n:\n \n'readyplayerme'\n}\nv1.subscription.created\n{\n  correlationId\n,\n \ndata\n:\n \n{\n eventName \n},\n \neventName\n:\n \n'v1.subscription.created'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n \nstatusCode\n:\n \n201\n}\nv1.subscription.deleted\n{\n  correlationId\n,\n \ndata\n:\n \n{\n eventName \n},\n \neventName\n:\n \n'v1.subscription.deleted'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n \n \nstatusCode\n:\n \n200\n}\nv1.avatar.exported\n{\n \ndata\n:\n \n{\n    url\n,\n    userId\n \n},\n \n \neventName\n:\n \n'v1.avatar.exported'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n \n}\nv1.user.set\n{\n \ndata\n:\n \n{\n id \n},\n \neventName\n:\n \n'v1.user.set'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n}\nv1.user.updated\n{\n \ndata\n:\n \n{\n id \n},\n \neventName\n:\n \n'v1.user.updated'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n}\nv1.user.logout\n{\n  correlationId\n,\n \neventName\n:\n \n'v1.user.logout'\n \nsource\n:\n \n'readyplayerme'\n \nstatusCode\n:\n \n200\n \ntype\n:\n \n'queryResponse'\n}\nQueries\n[](#queries)\nSupported messages that can be posted to the iframe after the \nv1.frame.ready\n event has been emitted.\nEffect\nMessage example\nLogout the user\niframe\n.\ncontentWindow\n.\npostMessage\n(\n \nJSON\n.\nstringify\n({\n \ntarget\n:\n \n'readyplayerme'\n,\n \ntype\n:\n \n'query'\n,\n \neventName\n:\n \n'v1.user.logout'\n \n}),\n \n'*'\n);\nAvatar Creator configuration\n[](#configuration)\nYou can configure features of the Avatar Creator by providing a query string to the URL.\n\u200b\n[See all avatar creator options ->](https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator)\n \nThe available parameters, their values if necessary, and their effects are described in the following table.\nParameter\nValue\nEffect\nframeApi\n\u200b\nEnables subscribing to \npostMessage\n events provided by the iframe. See more about \n[messaging](https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator#messaging)\n below.\nclearCache\n\u200b\nDisables caching avatar customization and restarts the app upon refreshing the iframe or when creating a new instance.\nselectBodyType\n\u200b\nEnables selecting between half-body and full-body avatars.\nbodyType\n'halfbody' | 'fullbody'\nSelects a body type for the avatar in the editor or allows the user to choose from both. Please note, that this only influences the behavior of the avatar-creator, but not the avatar-type you get on requesting an avatar. If you want to change that too, please contact \nExamples\nhttps://yourappname.readyplayer.me/avatar?\nframeApi\nhttps://yourappname.readyplayer.me/avatar?\nclearCache\n&\nbodyType=halfbody\nDefault Language\n[](#default-language)\nThe Avatar Creator automatically picks the system/browser language of the user's device. To set a different default language, do one of the following.\nThis is not available from Studio. You need to modify the URL of the Avatar Creator.\nTo change the language, include the language code in the URL path.\nExample URL for setting German as the default language.\nhttps://yoursubdomain.readyplayer.me/\nde\n/avatar\nSupported languages and their language codes\nLanguage\nCode\nEnglish\nen\nEnglish (Ireland)\nen-IE\nGerman\nde\nFrench\nfr\nSpanish\nes\nSpanish (Mexican)\nes-MX\nPortuguese\npt\nPortuguese (Brazil)\npt-BR\nItalian\nit\nTurkish\ntr\nJapanese\njp\nKorean\nkr\nChinese\nch\n\u200b\nClear Cache\n[](#clear-cache)\nBy default, the Avatar Creator uses local browser storage to store and restore a user's session, such as their login state and current avatar creation step.\nIf you want to disable this behavior, for example if multiple users are using the same device, use  the \nClearCache \nparameter.\nOpen the Avatar Creator with the query string \n?clearCache\nhttps://demo.readyplayer.me/de/avatar?clearCache\nQuick Start for users\n[](#quick-start-for-users)\nUse the Quickstart option to get the user into gameplay as quickly as possible. With this option set, the user can select a provided avatar to start right away, create a personal avatar, or login with Ready Player Me and choose one of their existing avatars. \nYou can try it out on the demo Avatar Creator: \n[https://demo.readyplayer.me/avatar?quickStart](https://demo.readyplayer.me/avatar?quickStart)\n\u200b\n\u200b\n\u200b\nUse the \nquickStart \nparameter to enable this option. Therefore open the Avatar Creator with the query string \n?quickStart\nhttps://demo.readyplayer.me/de/avatar?quickStart",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator",
            "title": "Avatar Creator"
        }
    },
    {
        "page_content": "Avatars\nReady Player Me supports full-body and half-body avatars.\nReady Player Me avatars are optimized for real-time game performance while achieving a high quality.\nFull-body and half-body avatars\n[](#full-body-and-half-body-avatars)\n[Full-body avatarsFull-body avatars are the most common and used in most games and apps.](https://docs.readyplayer.me/ready-player-me/api-reference/avatars/full-body-avatars)\n[Half-body avatarsHalf-body avatars are easier to integrate and animate in VR games and applications. They come with optional hands.](https://docs.readyplayer.me/ready-player-me/api-reference/avatars/vr-avatar)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/avatars",
            "title": "Avatars"
        }
    },
    {
        "page_content": "REST API\nAccess and authentication\n[](#access-and-authentication)\nAll API access is sent over HTTPS and accessed from \nhttps://api.readyplayer.me\n.\nTo enable straightforward integration of Ready Player Me avatars, the GET avatar endpoints are publicly available and currently do not require authentication.\nAll other Endpoints require an API Key in the Header \nX-API-Key\n, that can be generated in \n[Studio](https://studio.readyplayer.me/developer-tools/api-keys/)\n.\nResponse codes\n[](#response-codes)\nThe Avatar API uses conventional HTTP response codes to indicate the success or failure of an API request.\nCodes in the \n2xx\n range indicate success.\nCodes in the \n4xx\n range indicate a failure given the information provided.\nCodes in the \n5xx\n range indicate an error with Ready Player Me services.\nTimestamps return in UTC time.\nStatus Code\nDescription\n200 - OK\nEverything worked as expected.\n400 - Bad Request\nThe request was unacceptable, often due to missing a required parameter.\n401 - Unauthorized\nUnauthorized request for a secured endpoint.\n402 - Request Failed\nThe parameters were valid but the request failed.\n403 - Forbidden\nThe authorized user doesn't have permission to perform the request.\n404 - Not Found\nThe requested resource doesn't exist.\n5xx - Server Errors\nSomething went wrong on Ready Player Me\u2019s end.\nAvatar file format\n[](#avatar-file-format)\nAll 3D avatars are delivered in GLB format.\nThe API returns standardized .glb or .png files for the 3D and 2D avatars, or JSON-encoded responses. Only default HTTP response codes are used.\n\u200b\n[GLB ](https://docs.fileformat.com/3d/glb/)\nis a compressed binary version of a (JSON-based) GLTF file and includes all of the elements that comprise a 3D avatar model, such as materials, meshes, node hierarchy, and cameras. GLB files are compact, represent complete scenes, and load fast. You can read more about GLB and glTF \n[in the documentation](https://docs.fileformat.com/3d/glb/)\n.\nDownload a \n[demo full-body avatar .glb](https://api.readyplayer.me/v1/avatars/6185a4acfb622cf1cdc49348.glb)\n and open it in any 3D viewer or app to see the details.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api",
            "title": "REST API"
        }
    },
    {
        "page_content": "Unity SDK\nReference for the Ready Player Me Unity SDK.\nThe latest version of the Unity SDK which we refer to as Ready Player Me Unity SDK 2.0 uses a modular architecture and is split into 3 separate Unity packages and uses Unity's built-in package manager for importing and updating the plugins.\nThe 3 main modules are:\nready-player-me-core\nready-player-me-avatar-loader\nready-player-me-webview\nDependencies\n[](#dependencies)\nDependencies are already included automatically during the import process.\nglTFast - \n[https://github.com/atteneder/glTFast.git](https://github.com/atteneder/glTFast.git)\n\u200b\nNewtonsoft Json \n[https://docs.unity3d.com/Packages/[email\u00a0protected]/manual/index.html](https://docs.unity3d.com/Packages/com.unity.nuget.newtonsoft-json@2.0/manual/index.html)\n\u200b\nClass Reference\n[](#class-reference)\n\u200b\n[Avatar Loader](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarloader)\n\u200b\n\u200b\n[AvatarConfig](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarconfig)\n\u200b\n\u200b\n[AvatarRenderLoader](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarrenderloader)\n\u200b\n\u200b\n[WebView](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/webview)\n\u200b\n\u200b\n[Avatar Cache](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarcache)\n\u200b\n\u200b\n[SDK Logger](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/sdklogger)\n\u200b\n\u200b\n[Extras](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras)\n (\n[EyeAnimationHandler](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/eyeanimationhandler)\n, \n[VoiceHandler](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/voicehandler)\n)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk",
            "title": "Unity SDK"
        }
    },
    {
        "page_content": "Unreal Engine SDK\nReference for the Ready Player Me UE SDK.\nDependencies\n[](#dependencies)\nDependencies are included in the \n.uplugin\n file.\n\u200b\n[glTFRuntime](https://github.com/rdeioris/glTFRuntime)\n - Needed for loading the GLB files.\nClass Reference\n[](#class-reference)\n\u200b\n[ReadyPlayerMeAvatarLoader](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeavatarloader)\n\u200b\n\u200b\n[ReadyPlayerMeRenderLoader](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermerenderloader)\n\u200b\n\u200b\n[ReadyPlayerMeActor ](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeactor)\n\u200b\n\u200b\n[ReadyPlayerMeComponent](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermecomponent)\n\u200b\n\u200b\n[ReadyPlayerMeSettings](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermesettings)\n\u200b\n\u200b\n[ReadyPlayerMeBluerprintLibrary](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeblueprintlibrary)\n\u200b\n\u200b\n[ReadyPlayerMeFunctionLibrary](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermefunctionlibrary)\n\u200b\n\u200b\n[ReadyPlayerMeAvatarConfig](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeavatarconfig)\n\u200b\n\u200b\n[ReadyPlayerMeCustomMorphGroup](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermecustommorphgroup)\n\u200b\n\u200b\n[ReadyPlayerMeMorphTargetGroup](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermemorphtargetgroup)\n\u200b\n\u200b\n[ReadyPlayerMeStandarMorphGroup](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermestandardmorphgroup)\n\u200b\n\u200b\n[ReadyPlayerMeTypes](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermetypes)\n\u200b\n\u200b\n[Changelog](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/changelog)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk",
            "title": "Unreal Engine SDK"
        }
    },
    {
        "page_content": "Avatar Creator Appearance\nConfigure and customize the Avatar Creator. Register your app, create a subdomain, and manage your settings.\nThe Avatar Creator is a web-based, device-agnostic, and ready-to-use way of integrating the avatar creation and editing process into your game.\nAvatar creation with the ready-to-use Avatar Creator.\nYou can fully integrate the Avatar Creator into your game.\n\u200b\n[Avatar Creator in Unity](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator)\n\u200b\n\u200b\n[Avatar Creator in Unreal Engine](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/avatar-creator-integration)\n\u200b\n\u200b\n[Avatar Creator Native Integration using the APIs](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration)\n\u200b\n1. Set up your app's Avatar Creator\n[](#1.-set-up-your-apps-avatar-creator)\n\u200b\n[Sign in to Studio](https://studio.readyplayer.me/?utm_souce=avatar-creator-setup)\n (Developer Dashboard) to customize your Avatar Creator. If you have no account yet, you can create one for free.\nAfter you sign-up / sign in, you will see your first application already set up.\nOnce created, your subdomain is public, and users will immediately see any changes you make.\n2. Configure your Avatar Creator\n[](#2.-configure-your-avatar-creator)\nAfter you click on the app, you can modify and customize your Avatar Creator with the settings below.\nBody type\n[](#body-type)\nLet users choose or default to a body type.\nIn the demo Avatar Creator (\n[https://demo.readyplayer.me](https://demo.readyplayer.me)\n), by default, the first step for the user is to choose between a full-body and half-body avatar.\nYou can can change the default \nBody Type\n setting and define full-body or half-body as the default body type, and not give the user the freedom to choose. Click \nSave\n to apply your changes.\nLanguage picker\n[](#language-picker)\nLet users choose, or default to the system/browser language.\nBy default, users will see a language picker as shown below on the Avatar Creator.\nYou can enable or disable the language picker, and the Avatar Creator will default to the user's chosen system/browser language. Click \nSave\n to apply the changes.\nAvatar creation success window\n[](#avatar-creation-success-window)\nAfter successful avatar creation, the popup shown below displays the avatar URL to the user. With this URL, users can download the GLB file for their avatar.\nDisable the \nDownload the avatar\n popup to prevent users from accessing their avatars via URL. Click \nSave\n to apply your change.\nAvatar shortcode\n[](#avatar-shortcode)\nAfter successful avatar creation, you can opt to display the avatar shortcode above the avatar URL. Users receive a 6-digit code they can use in your application to load the avatar. This is especially useful for VR and mixed reality applications because avatar creation via WebView can be difficult.\nTurn on the \nAvatar Shortcode\n setting to show users the avatar shortcode (Example: \n[https://readyplayer.me/api/avatar/KJIXZB](https://readyplayer.me/api/avatar/KJIXZB)\n). Note that entering or clicking a shortcode in the browser will download the avatar GLB.\nQR code to download avatar\n[](#qr-code-to-download-avatar)\nAfter successful avatar creation, you can opt to display a QR code that represents a link to the avatar GLB. Scanning the code downloads the avatar.\nEnable or disable this setting. Click \nSave\n to apply the changes.\nTheme\n[](#theme)\nChoose a light (default) or dark theme for the Avatar Creator to best match the user's overall experience with your app.\nComparison of light and dark theme for Avatar Creator.\nClick the \nTheme\n tab and select the theme that matches your app or game. Click \nSave\n to apply the changes.\nMore Avatar Creator configurations\n[](#more-avatar-creator-configurations)\nSee the \n[Avatar Creator API Reference](https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator)\n on how to affect the following and other Avatar Creator settings via postMessage by URL.\nAvatar Creator \n[Quickstart ](https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator#quick-start)\noption where users can choose to pick a premade avatar.\n\u200b\n[Clearing the cache](https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator#clear-cache)\n.\n\u200b\n[Setting a default language](https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator#default-language)\n other than system/browser.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator",
            "title": "Avatar Creator Appearance"
        }
    },
    {
        "page_content": "Create Custom Outfits\nCreate outfits that meet Ready Player Me specifications.\nThis document explains how to create a full-body avatar outfit that meets Ready Player Me technical specifications and functions properly in your application.\nCurrently, every clothing asset in Ready Player Me is a full-body asset. This means that users cannot change tops without changing bottoms, and vice versa. \nRequirements\n[](#requirements)\nAll outfits must comply with the guidelines in this document and pass validation when uploaded. See \n[Upload Custom Outfits](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits/asset-manager-in-studio)\n.\nAll outfits must be in \n[GLB](https://en.wikipedia.org/wiki/GlTF)\n format.\nWe recommend that you use \n[Blender](https://www.blender.org/)\n with the \n[Ready Player Me Asset Validation Blender plugin](https://drive.google.com/drive/folders/1cT4jPOTeUD95Jws8gkflhprfKrlnttvy)\n to verify your model during the creation process and before uploading. This validation tool ensures that your custom outfit meets all requirements.\nUsing Blender is not mandatory. You can use any 3D asset creation tool as long as it can output GLB files. And, if your asset was created in a 3D tool that doesn't support the GLB format, you can use \n[Blender](https://www.blender.org/)\n to \n[convert](https://docs.blender.org/manual/en/2.80/addons/io_scene_gltf2.html)\n from different file types to \n[GLB](https://en.wikipedia.org/wiki/GlTF#GLB)\n format.\nComponents of a full-body outfit\n[](#components-of-a-full-body-outfit)\nA full-body outfit consists of a top, bottom, footwear, and body. \n\u200b\n\u200b\nName: Wolf3D_Outfit_Top \nMesh Name: Wolf3D_Outfit_Top \nMaterial Name: Wolf3D_Outfit_Top \nTriangle Count: max 6000 \nBasecolor Map: required \nNormal Map: required \nVertex Colors: No\n\u200b\n\u200b\nName: Wolf3D_Outfit_Bottom \nMesh Name: Wolf3D_Outfit_Bottom \nMaterial Name: Wolf3D_Outfit_Bottom \nTriangle Count: max 5000 \nBasecolor Map: Yes \nNormal Map: Yes \nVertex Colors: No\n\u200b\n\u200b\nName: Wolf3D_Outfit_Footwear \nMesh Name: Wolf3D_Outfit_Footwear \nMaterial Name: Wolf3D_Outfit_Footwear \nTriangle Count: max 2000 \nBasecolor Map: required \nNormal Map: required \nVertex Colors: No\n\u200b\n\u200b\nName: Wolf3D_Body \nMesh Name: Wolf3D_Body \nMaterial Name: Wolf3D_Body \nTriangle Count: max 2000\nFile Requirements for the completed outfit\n[](#file-requirements-for-the-completed-outfit)\nFile Type: GLB\nFile Size: max 8 MB\nTotal Tri Count: max 15000\nBasecolor Map: required\nNormal Map: required\nRoughness Map: optional\nMetallic Map: optional\nVertex Colors: No\nMaterials\n[](#materials)\nThe materials use the metalness PBR workflow.\nKeep the shading network of the material as simple as possible.\nEnable Backface Culling (single-sided materials). Only use double-sided materials when absolutely necessary.\nTexture Maps\n[](#texture-maps)\nThe texture file format is JPG. It's preferable for web applications like Ready Player Me due to the smaller file size. If transparency is needed, use PNG.\nExamples\n[](#examples)\nSteps for creating a full-body outfit\n[](#steps-for-creating-a-full-body-outfit)\n1.\nDownload the male and female full-body \n[FBX template files](https://readyplayerme-art-team.s3.amazonaws.com/Templates-for-external/ReadyPlayerMe-full-body-templates.zip)\n.\n2.\nCreate your outfit.\n3.\nPeform \n[deformation testing](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits/skinning-and-testing)\n.\n4.\nValidate the outfit in \n[Blender](https://www.blender.org/)\n using the \n[Ready Player Me Blender plugin](https://drive.google.com/drive/folders/1cT4jPOTeUD95Jws8gkflhprfKrlnttvy)\n.\n5.\nExport the outfit as a \n[GLB](https://en.wikipedia.org/wiki/GlTF)\n file including the body and the skeleton (Armature).\n6.\nUpload the GLB file in \n[Ready Player Me Studio](https://studio.readyplayer.me/)\n.\nStep 1: Download and inspect the template\n[](#step-1-download-and-inspect-the-template)\n1.\nDownload \n[full-body templates](https://readyplayerme-art-team.s3.amazonaws.com/Templates-for-external/ReadyPlayerMe-full-body-templates.zip)\n and choose the body type you intend to use.\n2.\nInspect the templates and familiarize yourself with the details. \nYour design must match the \n[above requirements](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits#components-of-a-full-body-outfit)\n. Your modeling must be within these constraints.\nStep 2: Create your outfit\n[](#step-2-create-your-outfit)\nModify the selected template. \nRemove any body parts hidden by clothing, for optimization.\nRetain the same UV layout for body parts.\nKeep the armature.\nObserve the hard limits on triangle counts.\nWolf3D_Outfit_Top: max 6000\nWolf3D_Outfit_Bottom: max 5000\nWolf3D_Outfit_Footwear: max 2000\nWolf3D_Body: max 2000\nSee the \n[Recommendations and Tips](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits#recommendations-and-tips)\n for details,\nEvery mesh must be a separate mesh. Do not combine these meshes into one mesh\nStep 3: Deformation testing\n[](#step-3-deformation-testing)\nMake sure your designs work when the model moves by using Mixamo or Blender. \nSee \n[Skinning and testing](https://app.gitbook.com/o/-MUPNxqiv9WwarP92bMF/s/M2pnrVNxW01XV9ilR0Ed/~/changes/137/customizing-guides/create-custom-outfits/skinning-and-testing)\n.\nStep 4: Validate the outfit\n[](#step-4-validate-the-outfit)\nWhen you upload an outfit in Studio, it is checked against requirements. In order to successfully complete upload, an asset has to pass the validation.\nTo ensure that your assets function correctly with our avatar models, Ready Player Me provides and recommends you use the plugin for Blender to validate your assets before you upload. \nSee \n[Validation tool for Blender](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits/validation-tool-for-blender)\n.\nStep 5: Export\n[](#step-5-export)\nWhen you have completed modeling and passed validation, export your outfit as a GLB file. \nInclude\nthe initial unmodified skeletal mesh (Armature),\nthe remaining parts of the body,\nand the outfit skinned to the skeletal mesh.\nStep 6: Upload in Studio\n[](#step-6-upload-in-studio)\nOnce the export is complete, open Ready Player Me Studio and upload your creation. \nSee \n[Asset Manager in Studio](https://app.gitbook.com/o/-MUPNxqiv9WwarP92bMF/s/M2pnrVNxW01XV9ilR0Ed/~/changes/137/customizing-guides/manage-custom-outfits)\n.\nRecommendations and Tips\n[](#recommendations-and-tips)\nModelling\n[](#modelling)\nMake every triangle count! A polygon should either be contributing to the silhouette and/or helping deformations.\nGeometry has a gradient with the lowest number of polygons used around the feet and lower torso, and the highest density around the head and upper torso.\nAvoid creating long triangles as they tend to cause shading errors.\nAvoid creating very small triangles or triangles that have 0 area (with all 3 vertices at the same location), as this can generate errors.\nThe \n[Validation tool for Blender](https://app.gitbook.com/o/-MUPNxqiv9WwarP92bMF/s/M2pnrVNxW01XV9ilR0Ed/~/changes/137/customizing-guides/create-custom-outfits/validation-tool-for-blender)\n\u200b\n[ ](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits/validation-tool-for-blender)\nchecks for common issues with meshes and triangle counts.\nTexture baking\n[](#texture-baking)\nThe more details you bake into normal, basecolor, and other maps, the better! \nFor example, a pant pocket could be extruded from the low poly mesh, and details from the high poly mesh baked into the textures.\nUse hard edges on angles of 90 degrees or sharper. If using a hard edge, also split the UV and leave some space between the 2 split off UV islands.\nTo create the basecolor textures in a desirable style, we recommend:\n1.\nUse a smart material for Substance Painter 2021 as a base: Wolf3D.spsm\n2.\nOr: Use Color and World Space Normal maps to create a similar effect in Photoshop.\nBenefits of using baked textures\nIncludes AO layers, so they can be adjusted separately.\nAdds a cavity map, so you can control the amount of brightness and the color of edges you want to see.\nBakes lights, so you can generate simulated top illumination.\nExamples of baked base color textures\nUV mapping\n[](#uv-mapping)\nDo not use symmetrical UVs. They are not yet officially supported.\nMinimize texture seams. (Do use seams when there are hard edges.)\nDo not change the UVs of the provided body mesh.\nIf possible, use fewer and bigger UV shells/islands instead of many small UV shells. Every UV split creates extra data.\nStraighten UV islands, where possible, to reduce artifacts on the down-scaled textures, e.g. belts, upper & bottom of pants, ends of sleeves.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits",
            "title": "Create Custom Outfits"
        }
    },
    {
        "page_content": "Studio (Developer Dashboard)\nStudio is a developer dashboard that lets you manage and customize the Ready Player Me experience. It will allow you to access your own subdomain and modify the appearance of your Avatar Creator.\nSign in or register\n[](#sign-in-or-register)\n1.\nTo access Studio, go to \n[https://studio.readyplayer.me](https://studio.readyplayer.me/?utm_souce=studio)\n.\n2.\nSign up or login with your Ready Player Me credentials.\n3.\nIf this is your first time in Studio, you need to register your app. Fill out the form with your information and follow the prompts through the registration process until you land on the \nMy Applications\n dashboard with your application already set up.\n\n\u200b\nVisit your Avatar Creator\n[](#visit-your-avatar-creator)\n1.\nAfter registering your app with Studion, click on it. This opens the settings.\n2.\nAt the top, you can find the Subdomain. You can click on it or copy the URL to open the Avatar Creator.\n\n\u200b\n3.\nFamiliarize yourself with your Avatar Creator.\n4.\nIn Studio, experiment with the configuration options described in \n[Avatar Creator Setup](https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator)\n, and see the changes immediately on your subdomain.\nOnce created, your subdomain is public, and users will immediately see any changes you make.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/studio-developer-dashboard",
            "title": "Studio (Developer Dashboard)"
        }
    },
    {
        "page_content": "Upload and Manage Custom Outfits\nUpload custom outfits and make them available in your apps.\nYou can upload and manage your custom outfits via Studio (Developer Dashboard) or the Assets REST API.\n[Asset Manager in StudioUpload and manage custom outfits comfortably using an easy-to-use web interface.](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits/asset-manager-in-studio)\n[Manage custom outfits using the  REST APIIntegrate asset management in your pipeline and create content tools on top of the Assets REST API.](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits/manage-custom-outfits-using-the-api)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits",
            "title": "Upload and Manage Custom Outfits"
        }
    },
    {
        "page_content": "1. Quickstart\nGet started in under 10 minutes. Load your personal avatar into your game or app.\nSetup your Ready Player Me subdomain\n[](#setup-your-ready-player-me-subdomain)\nSign in to \n[Studio](https://studio.readyplayer.me/?utm_souce=general-quickstart)\n (Developer Dashboard) to get your own subdomain. With that, you can manage and customize the Ready Player Me experience for your users.\n\u200b\n[Go to Studio](https://studio.readyplayer.me/?utm_souce=general-quickstart)\n\u200b\nInside Studio, you can copy your subdomain.\nIf you want to signup later, you can use \n[https://demo.readyplayer.me/avatar](https://demo.readyplayer.me/avatar)\n\u200b\nCreate your first personal avatar\n[](#create-your-first-personal-avatar)\n1.\nGo to \n[https://[yoursubdomain].readyplayer.me/avatar](https://yoursubdomain.readyplayer.me/avatar)\n\u200b\n2.\nCreate your personal avatar.\n3.\nCopy the avatar URL for later use.\nQuickstart with your integration method\n[](#quickstart-with-your-integration-method)\nUsing the Ready Player Me SDKs, you can integrate Ready Player Me avatars and the Avatar Creator with Unity and Unreal Engine. You can also integrate Ready Player Me avatars and the Avatar Creator with all other environments that support REST, postMessage, and the .glb 3D file format.\nFollow the instructions for your integration method.\n\u200b\n[Quickstart with Unity](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n\u200b\n\u200b\n[Quickstart with Unreal Engine](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart)\n\u200b\n\u200b\n[Quickstart with React](https://docs.readyplayer.me/ready-player-me/integration-guides/react/quickstart)\n\u200b\n\u200b\n[Quickstart with Web and Native Integrations (using the Ready Player Me APIs)](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/quickstart)\n\u200b\nJoin our Discord community\n[](#join-our-discord-community)\nJoin the Ready Player Me Discord community with over 17k users and developers. Ask questions, get help, and share your experiences with other developers.\n\u200b\n[https://discord.com/invite/readyplayerme](https://discord.com/invite/readyplayerme)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/getting-started/1.-quickstart",
            "title": "1. Quickstart"
        }
    },
    {
        "page_content": "2. Integrate\nLearn how to load 2D and 3D avatars, integrate the ready-to-use Avatar Creator, and animate your avatars.\nIntegration example using 3D avatars and the Avatar Creator in game.\nLoad 2D and 3D avatars\n[](#load-2d-and-3d-avatars)\nIn the \n[Quickstart Guide](https://docs.readyplayer.me/ready-player-me/getting-started/1.-quickstart)\n you loaded your first 3D avatar into your development environment. Depending on your use case, you can load 3D full-body and half-body avatars, or 2D avatars, into your runtime environment, or save them in your project, for example, to use for NPCs.\n\u200b\n[Load Avatars in Unity](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars)\n\u200b\n\u200b\n[Load Avatars in Unreal Engine](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/load-avatars)\n\u200b\n\u200b\n[Load Avatars with Web and Native Integrations](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration)\n\u200b\nAvatar Creator setup and integration\n[](#avatar-creator-setup-and-integration)\nYou can get your own Avatar Creator subdomain and configure it for your game or app.\n\u200b\n[Set up and Configure your own Avatar Creator](https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator)\n\u200b\nYou can integrate the ready-to-use and customizable Avatar Creator directly into your game or app using a WebView or an iframe.\n\u200b\n[Avatar Creator in Unity](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator)\n\u200b\n\u200b\n[Avatar Creator in Unreal Engine](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/avatar-creator-integration)\n\u200b\n\u200b\n[Avatar Creator in React](https://docs.readyplayer.me/ready-player-me/integration-guides/react)\n\u200b\n\u200b\n[Avatar Creator with Web and Native Integration](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/avatar-creator-integration)\n\u200b\nAnimate your avatars\n[](#animate-your-avatars)\nReady Player Me full-body avatars are compatible with \n[Mixamo animations](https://www.mixamo.com/#/)\n and include a Mixamo-compatible full-body skeletal rig that makes it possible to use animations exported from Mixamo.\nYou can request avatars with multiple blend shapes (morph targets) for facial expressions. Ready Player Me supports Oculus LipSync Visimes, Apple ARKit, and additional Ready Player Me-specific blend shapes.\n\u200b\n[Animations in Unity](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/loading-mixamo-animations)\n\u200b\n\u200b\n[Animations in Unreal Engine](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations)\n\u200b\n\u200b\n[-> Check out Mixamo (outside Link)](https://www.mixamo.com/)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/getting-started/2.-integrate",
            "title": "2. Integrate"
        }
    },
    {
        "page_content": "3. Customize\nCustomize the Ready Player Me Experience\nUploading a custom outfit to your avatar creator in Studio\nStudio\n[](#studio)\nReady Player Me Studio is a developer dashboard that lets you manage and customize the Ready Player Me experience. It will allow you to access your own subdomain, modify your Avatar Creator's appearance, and upload custom outfits.\n\u200b\n[Go to Studio (https://studio.readyplayer.me)](https://studio.readyplayer.me)\n\u200b\n\u200b\n[Learn more about Studio](https://docs.readyplayer.me/ready-player-me/customizing-guides/studio-developer-dashboard)\n\n\nAvatar Creator Appearance\n[](#avatar-creator-appearance)\nThe Avatar Creator is a web-based, device-agnostic, and ready-to-use way of integrating the avatar creation and editing process into your game. The UI and its UX is customizable in Studio\n\u200b\n[Learn more about Avatar Creator Appearance](https://docs.readyplayer.me/ready-player-me/getting-started/3.-customize#avatar-creator-appearance)\n\u200b\n\u200b\nCreate, upload and manage Custom Outfits\n[](#create-upload-and-manage-custom-outfits)\nDecide, what your players wear. In Studio you can upload and manage your own outfit creations.\n\u200b\n[Learn how to create a custom outfit](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits)\n\u200b\n\u200b\n[Learn how to upload and manage custom outfits](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/getting-started/3.-customize",
            "title": "3. Customize"
        }
    },
    {
        "page_content": "4. Optimize\nAdjust avatar details and textures for better performance.\nYou can optimize Ready Player Me avatars to match with your available compute and graphics power. Choose maximum details or fine-tune visual quality to meet your performance goals.\nHow an avatar appears using different LODs.\nLevels of detail (LODs)\n[](#levels-of-detail-lods)\nChoose from three different mesh LODs: High (default), Medium (75% polygon count), or Low (50% polygon count).\nLearn how to load different LODs\n\u200b\n[in Unity](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n.\n\u200b\n[in Unreal Engine](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-configuration)\n.\n\u200b\n[with the Avatar API (web)](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/optimize)\n.\nTexture size\n[](#texture-size)\nTexture size is a big part of the overall avatar size. The maximum and default texture size is 1024x1024. The minimum you can choose is 256x256.\nLimit texture size to reduce avatar size\n\u200b\n[in your Unity Project](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n.\n\u200b\n[in your Unreal Engine Project](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-configuration)\n.\n\u200b\n[with the Avatar API (web)](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/optimize)\n.\nTexture atlassing\n[](#texture-atlassing)\nTo save compute time when loading and unloading avatars, combine all textures into one texture atlas. Using a texture atlas reduces the number of draw calls.\nHowever, for some use cases, it might be beneficial to have all textures separately.\nThe texture atlas is generated for all PBR channels used by avatar assets: baseColor, normal, metallicRoughness, emissive, and occlusion.\nLearn how to configure texture atlassing\n\u200b\n[in your Unity Project](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n.\n\u200b\n[in your Unreal Engine Project](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-configuration)\n.\n\u200b\n[with the Avatar API (web)](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/optimize)\n.\nMorph targets (aka Blendshapes)\n[](#morph-targets-aka-blendshapes)\nMorph targets can bloat the size of an avatar, so choose the minimum necessary morph targets for your use case and LODs.\nLearn how to select morph targets\n\u200b\n[in your Unity Project](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n.\n\u200b\n[in your Unreal Engine Project](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-configuration)\n.\n\u200b\n[with the Avatar API (web)](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/optimize)\n.\nDraco compression (Unreal Engine)\n[](#draco-compression-unreal-engine)\nDraco is an open-source library for compressing and decompressing 3D geometric meshes. When you require morph targets, Draco compression can reduce the file size dramatically.\nLearn how to enable Draco\nin Unreal Engine.\n\u200b\n[with the Avatar API](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-3d-avatars)\n.\nDraco is currently not available in Unity.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/getting-started/4.-optimize",
            "title": "4. Optimize"
        }
    },
    {
        "page_content": "5. Launch\nWe can support you once your game or app is ready.\nStay up to date with the latest features \u2013 \n[sign up for our product newsletter](https://docs.readyplayer.me/ready-player-me/support/product-newsletter)\n.\nUse Ready Player Me branding in your app, game, and website\n[](#use-ready-player-me-branding-in-your-app-game-and-website)\nIf you\u2019re looking to feature Ready Player Me branding in your app, game, website or marketing materials, you can use our brand assets from the \n[Ready Player Me Media Kit](https://drive.google.com/drive/folders/1vJ8x6FwKgPw_jfNOZgBN4e-5NfjwDQPv)\n. Be sure to follow the \n[brand guidelines](https://drive.google.com/file/d/1LEgT6Vai0F2Aeet-dVPt0gK8O7gHga21/view?usp=share_link)\n detailing the use of our logo and brand colors.\nCreate marketing materials\n[](#create-marketing-materials)\nSocial media templates\n[](#social-media-templates)\nThe Media Kit also contains \n[ready-to-use social media templates](https://drive.google.com/drive/folders/1K0uROho7uKa4aI49SJ74kbcwkE3cNILB?usp=share_link)\n compatible with Photoshop and other apps that support the PSD file format.\nHow how to use the social media templates\n[](#how-how-to-use-the-social-media-templates)\nMake sure to install the \n[IBM Plex Sans font](https://www.notion.so/Winget-quick-install-d4507b4131ae4a54ad2b311b6784ea75)\n.\nTemplates in \n[this folder](https://drive.google.com/drive/folders/1K0uROho7uKa4aI49SJ74kbcwkE3cNILB?usp=share_link)\n are compatible with Photoshop and other apps that support the PSD file format.\n1.\nReplace the \"Your logo\" layer with the logo of your company or product. The logo should be light and on a transparent background.\n2.\nReplace avatar.new in the \"Your partner subdomain\" layer with your partner subdomain (i.e. \n[subdomain.readyplayer.me](http://subdomain.readyplayer.me/)\n)\nGuidelines\n[](#guidelines)\n1.\nDO NOT\n resize the templates. If you want to create posts for other platform, please use a corresponding template file.\n2.\nDO NOT\n modify the locked layers (RPM logo, separator line, etc.)\n3.\nYou can pick a different set of avatars from our \n[media kit](https://drive.google.com/drive/folders/1-JJVmph5ivuRDjr556TNWIX9h2y4tkWa?usp=sharing)\n\u200b\n4.\nYou can replace the \"Background\" layer with a screenshot of your app. Please make sure that it's minimal and doesn't dominate the image.\nAvatar files or renders for marketing materials\n[](#avatar-files-or-renders-for-marketing-materials)\nIf you would like to use a custom Ready Player Me avatar for marketing purposes, you can download a GLB file to use in apps like Blender or download a 2D render as a PNG file from the \n[Ready Player Me Hub](http://readyplayer.me/hub)\n or use the \n[Avatar REST API]()\n.\nLaunch Ready Player Me integration\n[](#launch-ready-player-me-integration)\nReady Player Me boilerplate or description\n[](#ready-player-me-boilerplate-or-description)\nIf you need a boilerplate or a description of Ready Player Me for your announcement or press release, you can \n[find it here](https://docs.google.com/document/d/1A55Kcmy6eA4uRNNs1HTsFxbLov8U2wjXkcMFreTXKPE/edit?usp=share_link)\n.\nReady Player Me Hub\n[](#ready-player-me-hub)\nUsers of the Ready Player Me platform and compatible apps and games can create and manage their avatars as well as discover new experiences in the \n[Ready Player Me Hub](https://readyplayer.me/hub)\n.\nIf your integration with Ready Player Me is live (or will be live soon), you can request to list your app/game on the Ready Player Me Hub. This is available to all partners.\n\u200b\n[\u2192](https://wolf3dapp.typeform.com/to/jP6rk2yn)\n \n[Submit your Ready Player Me Hub listing](https://wolf3dapp.typeform.com/to/jP6rk2yn)\n\u200b\nMini Royale: Nations on Ready Player Me Hub\nSupport on social media\n[](#support-on-social-media)\nSince Ready Player Me\u2019s main focus is providing the best avatar system for developers, we don\u2019t post all partner launch announcements on our own channels. You can still \ntag or mention Ready Player Me profiles for a chance to be featured\n:\n\u200b\n[Twitter](https://twitter.com/readyplayerme)\n (\n@readyplayerme\n)\n\u200b\n[LinkedIn](https://www.linkedin.com/company/readyplayerme/)\n\u200b\n\u200b\n[Instagram](https://www.instagram.com/readyplayer.me/)\n (\n@readyplayer.me\n)\n\u200b\n[Facebook](https://www.facebook.com/readyplayerme)\n\u200b\n\u200b\n[TikTok](https://www.tiktok.com/@readyplayer.me)\n (\n@readyplayer.me\n)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/getting-started/5.-launch",
            "title": "5. Launch"
        }
    },
    {
        "page_content": "FAQ\nFrequently asked questions about Ready Player Me.\nHow do I create a Ready Player Me avatar?\n[](#how-do-i-create-a-ready-player-me-avatar)\nIf you're looking to create a Ready Player Me avatar compatible with thousands of apps and games, use the Ready Player Me Avatar Creator. All avatars created on our website are under the \n[Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/)\n license, so you can use them for non-commercial projects (as long as you credit us).\n\u200b\n[Create an avatar ->](https://readyplayer.me/avatar)\n\u200b\nHow much does it cost to use Ready Player Me avatars and the SDK?\n[](#how-much-does-it-cost-to-use-ready-player-me-avatars-and-the-sdk)\nReady Player Me avatars and the Ready Player Me Avatar SDK are free to use for developers and end users.\nWhat are the licensing terms for the Ready Player Me avatars and the SDK?\n[](#what-are-the-licensing-terms-for-the-ready-player-me-avatars-and-the-sdk)\nSee \n[Licensing](https://docs.readyplayer.me/ready-player-me/support/terms-of-use)\n.\nCan I use the Ready Player Me Avatar SDK for a commercial project for free? \n[](#can-i-use-the-ready-player-me-avatar-sdk-for-a-commercial-project-for-free)\nYes! All you need to do is to sign up as a developer.\nNote that you are not allowed to mint our avatars as NFTs.\n\u200b\n[Sign up as a developer ->](https://studio.readyplayer.me/getting-started)\n\u200b\nHow can you offer the SDK for free? \n[](#how-can-you-offer-the-sdk-for-free)\nWe are currently focused on getting it to the market \u2013 not monetization. However, in the future we want to create a digital asset store where artists, brands, and developers will be able to sell customization options for avatars. The revenue will be split between us, asset creators, and Ready Player Me partners.\nDo you collect photos from people who create avatars? \n[](#do-you-collect-photos-from-people-who-create-avatars)\nWe use the photo uploaded by a user solely to create the avatar as also stated in the Privacy Policy and Terms of Use.\n\u200b\n[Full Privacy Policy](https://drive.google.com/file/d/1dJ4dKguCS_PVxcd0iuTyrFLgm3AUrtdL/view)\n\u200b\n\u200b\n[Full Terms of Use](https://drive.google.com/file/d/1ER3gBvx1UwXMDiOaZk8akzPmO6LAFfTp/view)\n\u200b\nWhat types of avatars do you support?\n[](#what-types-of-avatars-do-you-support)\nReady Player Me can be used to create half-body avatars suitable for VR applications as well as full-body avatars for applications that support them.\nWho is using Ready Player Me today?\n[](#who-is-using-ready-player-me-today)\nReady Player Me is integrated into throusands of gaming and VR applications.\n\u200b\n[View All Partners ->](https://readyplayer.me/apps)\n\u200b\nDo users have to use readyplayer.me or can I offer an in-app Avatar Creator? \n[](#do-users-have-to-use-readyplayer.me-or-can-i-offer-an-in-app-avatar-creator)\nYou can do both! Create a subdomain for your customized Avatar Creator and implement the Ready Player Me Avatar Creator into your app.\n\u200b\n[Follow the Integration Guides.](https://docs.readyplayer.me/ready-player-me/getting-started/2.-integrate)\n\u200b\nWhat platforms do you support?\n[](#what-platforms-do-you-support)\nReady Player Me avatars can be created on any device capable of WebGL rendering, that is, all modern web browsers. \nFor developers, we provide integration guidelines and SDKs for integrating Ready Player Me avatars into the web, Unity, Unreal Engine, or any other platform supporting postMessage and REST technology.\nSee \n[Integration Guides](https://docs.readyplayer.me/ready-player-me/integration-guides)\n.\nWhat are the requirements to access Ready Player Me behind a (corporate) firewall or on a private network?\n[](#what-are-the-requirements-to-access-ready-player-me-behind-a-corporate-firewall-or-on-a-private-netw)\nThe following domains need to be resolvable from your client in order to access the Ready Player Me avatar creation and customization web interface and to be able to download the resulting avatars.\nreadyplayer.me\ncname.vercel-dns.com\navatars.readyplayer.me\nd1a370nemizbjq.cloudfront.net\nmodels.readyplayer.me\napi.readyplayer.me\nCan I add custom content to Ready Player Me?\n[](#can-i-add-custom-content-to-ready-player-me)\nYes, you can. See \n[Upload and Manage Custom Outfits](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits)\n.\nI have a feature request or found a problem!\n[](#i-have-a-feature-request-or-found-a-problem)\nYou can reach us via \n[[email\u00a0protected]](https://docs.readyplayer.me/cdn-cgi/l/email-protection#added8ddddc2dfd9eddfc8ccc9d4ddc1ccd4c8df83c0c8)\n to submit a ticket, or connect with the community on \n[Discord](https://discord.gg/AKhfvr6QmY)\n and we'll help you out!",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/getting-started/faq",
            "title": "FAQ"
        }
    },
    {
        "page_content": "Advanced User Management\nManage the session and avatar state of your users\nThere are two types of end-users coming to your app or game. Users with an existing Ready Player Me account and users without. For both of them, you want to create a seamless user experience.\nYou need to implement a slightly different journey for the different types of users:\nAccount Linking for existing Ready Player Me Users\n[](#account-linking-for-existing-ready-player-me-users)\nUsers with an existing Ready Player Me account want to bring their avatars to your game. To ensure a great UX, you should implement Account Linking so those users only need log in once and authorize your app or game to link their account.\n\u200b\n[Learn more about Account Linking](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/account-linking)\n\u200b\nGuest Accounts for everybody else\n[](#guest-accounts-for-everybody-else)\nYou also want to store the state of avatars for users that do not necessarily have an existing Ready Player Me account. Still, you want to offer them all functionality of Ready Player Me avatar system. For those users, you need to create a guest account additionally. Account Linking works then the same for this type of user.\n\u200b\n[Learn more about Guest Accounts](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/guest-accounts)\n\u200b\nIf you don't implement account linking and guest accounts, we try to restore the user's session from local storage in the browser. But this won't work in all cases. E.g., when a user switches to a different device, removes browser data, or their browser blocks session management in the local storage. For guest users, this means they lose their avatars. Users with a Ready Player Me account must log in whenever they come to your app or game.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management",
            "title": "Advanced User Management"
        }
    },
    {
        "page_content": "Overview\nYou can integrate Ready Player Me avatars and the Avatar Creator into all environments that support the web standards REST and postMessage. For Unity and Unreal Engine, we provide an SDK to make integration convenient. For many other platforms, we support you with integration examples (see Web and Native Integration).\n[Unity IntegrationIntegrate Ready Player Me avatars with your game using the Unity SDK.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity)\n[Unreal Engine IntegrationIntegrate Ready Player Me avatars with your game using the Unreal Engine SDK.](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine)\n[ReactIntegrate Ready Player Me avatars in your React app using the React SDK](https://docs.readyplayer.me/ready-player-me/customizing-guides/studio-developer-dashboard)\n[Web and Native IntegrationUse Ready Player Me APIs to natively integrate avatars with your web, iOS, Android, or custom environment.](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/web)\n[Advanced User ManagementLearn how to setup account linking and manage guest accounts.](https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/overview",
            "title": "Overview"
        }
    },
    {
        "page_content": "React\nIntegrate Ready Player Me with your React project\nGuides\n[](#guides)\n[1) QuickstartLoad your first personal avatar in your react project in less than 5 minutes.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/react/quickstart)\n[2) Avatar CreatorIntegrate and customize the ready-to-use Avatar Creator into your React app.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/react/avatar-creator-integration)\n[3) Load AvatarsLearn how to load 2D and 3D avatars in your React app.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/react/load-avatars)\nMore on React SDK\n[](#more-on-react-sdk)\n[React SDK StorybookCheck out the storybook documentation of the react SDK\u200b](https://readyplayerme.github.io/rpm-react-sdk/?path=/docs/avatar-creator--docs)\n[React SDK on GitHubCheck out the source code of the React SDK on GitHub\u200b](https://github.com/readyplayerme/rpm-react-sdk)\n[React SDK NPM PackageInstall the react SDK node package on npmjs.com\u200b](https://www.npmjs.com/package/@readyplayerme/rpm-react-sdk)\n[Visage StorybookCheck out the storybook documentation of the visage component\u200b](https://readyplayerme.github.io/visage/?path=/story/components-avatar--animated)\n[Visage on GitHubCheck out the source code of the Visage on GitHub\u200b](https://github.com/readyplayerme/visage)\n[Visage NPM PackageInstall the visage node package on npmjs.com\u200b](https://www.npmjs.com/package/@readyplayerme/visage)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/react",
            "title": "React"
        }
    },
    {
        "page_content": "Unity\nIntegrate Ready Player Me with your Unity Project\nGuides\n[](#guides)\n[1. QuickstartLoad your first personal avatar into Unity in less than 10 minutes.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n[2. Load AvatarsLearn how to load 2D and 3D avatars in your game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars)\n[3. Avatar CreatorIntegrate and customize the ready-to-use Avatar Creator into your game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator)\n[4. AnimationsLearn, how to add animations and facial expressions to your avatars.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/loading-mixamo-animations)\n[5. OptimizeOptimize avatars depending on your available computing and graphics power.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize)\nMore on the Unity SDK\n[](#more-on-the-unity-sdk)\n[API ReferenceExplore the API of the SDK in detail.](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk)\n[ChangelogTrack all changes to the Unity SDK.](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/changelog)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity",
            "title": "Unity"
        }
    },
    {
        "page_content": "Unreal Engine\nSet up the Read Player Me Unreal Engine plugin and import avatars into your apps.\nThe Ready Player Me Unreal Plugin is only compatible with \nUnreal Engine 5\n and \n4.27 or higher.\nGuides\n[](#guides)\n[1. QuickstartSetup your C++ or Blueprint project with the Ready Player Me SDK.](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart)\n[2. Load AvatarsLearn how to load 2D and 3D avatars into your game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/load-avatars)\n[3. Avatar CreatorIntegrate and customize the ready-to-use Avatar Creator with your game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/avatar-creator-integration)\n[4. AnimationsLearn, how to add animations and facial expressions to your avatars.](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations)\n[5. OptimizeOptimize avatars depending on your available computing and graphics power.](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize)\nMore on the Unreal Engine SDK\n[](#more-on-the-unreal-engine-sdk)\n[API ReferenceCheck out the API of the SDK in detail.](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk)\n[ChangelogTrack changes to the Unreal Engine SDK.](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/changelog)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine",
            "title": "Unreal Engine"
        }
    },
    {
        "page_content": "Web and Native Integration\nEmbed the Ready Player Me Avatar Creator in your app or game using REST and postMessage standards.\nLearn how to integrate Ready Player Me in your environment using the Ready Player Me APIs. \n[1. QuickstartLearn how to integrate the Avatar Creator with your website in less than 10 minutes,](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/quickstart)\n[2. Avatar Creator IntegrationLearn how to configure the Avatar Creator.](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/avatar-creator-integration)\n[3. OptimizeOptimize avatar quality and performance.](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/optimize)\nIntegration Examples\n[](#integration-examples)\n[WebIntegrate with your web site or web app.](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/web)\n[React NativeIntegrate with your React Native App.](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/react-native)\n[iOS NativeIntegrate with your iOS app.](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/native-ios)\n[Android NativeIntegrate with your Android app.](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/android-native)\nYour tech stack\nReach out to us, if you have integrated Ready Player Me into a different tech stack.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration",
            "title": "Web and Native Integration"
        }
    },
    {
        "page_content": "Bug Reports and Feature Requests\nReport any issues you encouter.\nI have a feature request or found a problem!\n[](#i-have-a-feature-request-or-found-a-problem)\nIf your issue is not addressed by this documentation, please reach out to us!\nEmail \n[[email\u00a0protected]](https://docs.readyplayer.me/cdn-cgi/l/email-protection#94e7e1e4e4fbe6e0d4e6f1f5f0ede4f8f5edf1e6baf9f1)\n to submit a ticket.\nConnect with the community on \n[Discord](https://discord.gg/AKhfvr6QmY)\n and we'll help you out!",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/support/bug-reports-and-feature-requests",
            "title": "Bug Reports and Feature Requests"
        }
    },
    {
        "page_content": "Glossary of Terms\nEvery Product needs one.\nAvatar - \nRepresentation of a user or player in a video game, social application, or other environments. Refers specifically to Ready Player Me cross-platform avatars.\nAvatar Creator - \nA web-based tool and interface for creating Ready Player Me avatars interactively. The Avatar Creator can be integrated into apps and web pages.\nCross-platform avatar \n- A player avatar that can be used on more than one platform. Player-created and managed avatars that can be imported into games, social platforms, and other apps that support the technology. \nGLB file - \nStands for \u201cGL Transmission Format Binary file\u201d. A standardized file format that is used to share 3D data, for example, the data for a 3D avatar model.\nNFTs - \nShort for Non Fungible Token. Exists on a blockchain and identifies\n \na digital asset that can represent real-world object, often a work of art. \nReady Player Me HUB - \nWeb portal where registered users can create, save, and manage their avatars and the applications where they use them.\nReady Player Me SDK\n - Developer kit for integrating Ready Player Me avatars into games, apps, websites, and other applications on multiple platforms. See this documentation for details.\nShortcode - \nA unique code that identifies a Ready Player Me avatar and can be used in lieu of a full URL to access the avatar information.\n\u200b\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/support/glossary-of-terms",
            "title": "Glossary of Terms"
        }
    },
    {
        "page_content": "Contact us\nYou can reach us via \n[[email\u00a0protected]](https://docs.readyplayer.me/cdn-cgi/l/email-protection#23505653534c515763514642475a534f425a46510d4e46)\n.\nConnect with the community on \n[Discord](https://discord.gg/AKhfvr6QmY)\n and we'll help you out!",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/support/how-to-contact-us",
            "title": "Contact us"
        }
    },
    {
        "page_content": "Product Newsletter\nSign up for our Product Newsletter to stay up to date with the latest updates.\n\u200b\n[SIGN UP \u2192](https://cdn.forms-content.sg-form.com/abc6e6b2-b261-11eb-8ad9-16d6f6ffdf5e)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/support/product-newsletter",
            "title": "Product Newsletter"
        }
    },
    {
        "page_content": "Licensing & Privacy\nHow Ready Player Me handles user data.\n\u200b\n[Full Developer Terms of Use](https://studio.readyplayer.me/terms)\n\u200b\n\u200b\n[Full Developer Privacy ](https://studio.readyplayer.me/privacy)\n\u200b\n[Policy](https://studio.readyplayer.me/privacy)\n\u200b\nNon-commercial use under Creative Commons 4.0\n[](#non-commercial-use-under-creative-commons-4.0)\nAny avatar created using the Ready Player Me Avatar Creator is available under the \n[Creative Commons 4.0 license](https://creativecommons.org/licenses/by-nc/4.0/)\n, allowing you non-commercial use. Build demos, enhance your class work, or experiment just for fun.\nCommercial use as a registered partner\n[](#commercial-use-as-a-registered-partner)\nIf you want to integrate Ready Player Me avatars into a commercial app or game, you must register as a partner, and then you can use Ready Player Me avatars for free in your product. \n\u200b\n[Contact us](https://docs.readyplayer.me/ready-player-me/support/how-to-contact-us)\n for more information.\nHow much does it cost?\n[](#how-much-does-it-cost)\nReady Player Me is available and free to all developers for non-commercial use. \nReady Player Me is available and free to registered partners for commercial use.\nCan I mint Ready Player Me avatars as NFTs?\n[](#can-i-mint-ready-player-me-avatars-as-nfts)\nNo.\nYou are not allowed to mint any Ready Player Me avatars as NFTs, even if you are a registered Partner.\nPhotos and Privacy\n[](#photos-and-privacy)\nReady Player Me collects photos solely to create avatars and improve avatar generation quality with users' prior consent. \n[Privacy Policy](https://readyplayer.me/privacy)\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/support/terms-of-use",
            "title": "Licensing & Privacy"
        }
    },
    {
        "page_content": "Full-body avatars\nComplete avatars.\nBy default, full-body avatars come with an atlased texture (1024x1024), a fully skinned \n[Mixamo](https://www.mixamo.com/#/)\n-compatible bone structure, and two main nodes for the combined mesh Wolf3D_Avatar and Wolf3D_Avatar_transparent (for glasses)).\nYou can modify the structure of the avatar and, for example, disable atlasing or reduce the mesh LOD or texture size.\nFull-body avatar components in Blender.\nMesh\n[](#mesh)\nBy default, you get one combined mesh for the whole avatar, plus one mesh for the transparent objects (e.g. glasses). This separation is especially useful, when you want to optimize for VR or mobile, change the materials, or just disable glasses.\nYou can request an avatar with a more \nseparated mesh\n. The separated mesh requires more draw calls but comes with extra flexibility.\nYou can request different \nLODs\n for avatars. By default, avatars are optimized and balanced for quality and performance. However, on mobile platforms you may want to optimize for performance or reduce the quality based on the distance of the avatars.\nYou can currently select 3 different LODs.\n0: Full Resolution (full triangle count)\n1: Medium Resolution (25% reduction in triangle count)\n2: Low Resolution (50% reduction in triangle count)\nAvatar LODs (Mesh and Texture LOD)\nMaterials\n[](#materials)\nAvatars come with PBR materials included.\nBy default, texture atlassing is on to reduce the number of draw calls and optimize for performance. You can request avatars with multiple different meshes and materials for different body parts.\nBy default, the avatars come with a high resolution texture (1024x1024). To improve performance, you can limit the texture to a minimum resolution of 256x256.\nRead more on how to enable or disable atlassing and reducing the texture size with the \n[Avatar API](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-3d-avatars#texturesizelimit)\n, or the Avatar Configuration in \n[Unity](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n and \n[Unreal Engine.](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-configuration)\n\u00e2\u20ac\u2039\nSkeleton structure\n[](#skeleton-structure)\nYou can see the skeleton structure in the picture below. The root name of the armature is \nArmature\n.\nSkeletal structure of full-body avatars.\nDownloads\n[](#downloads)\nYou can create your own full-body avatar via \n[https://demo.readyplayer.me/avatar](https://demo.readyplayer.me/avatar)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/avatars/full-body-avatars",
            "title": "Full-body avatars"
        }
    },
    {
        "page_content": "Morph targets\n[Apple ARKitReady Player Me avatars come with ARKit-compatible blend shapes.\u200b](https://docs.readyplayer.me/ready-player-me/api-reference/avatars/morph-targets/apple-arkit)\n[Oculus OVR LibSyncReady Playe Me avatars come with blend shapes to support the Oculus Lipsync API.\u200b](https://docs.readyplayer.me/ready-player-me/api-reference/avatars/morph-targets/oculus-ovr-libsync)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/avatars/morph-targets",
            "title": "Morph targets"
        }
    },
    {
        "page_content": "Half-body avatars\nMaterials, meshes, and rigs for half-body avatars.\nMaterials\n[](#materials)\nEvery avatar comes with PBR materials included. Half-body avatar can have the following matarials assigned to the corresponding mesh objects.\nWolf3D_Shirt\nWolf3D_Hair\nWolf3D_Beard\nWolf3D_Glasses\nWolf3D_Headwear\nWolf3D_Teeth\nWolf3D_Skin\nWolf3D_Eye\nExample PBR shader of a shirt asset.\nMeshes\n[](#meshes)\nHalf-body avatars consist of multiple meshes.\nEyeLeft\nEyeRight\nWolf3D_Glasses\nWolf3D_Hair\nWolf3D_Hands\nWolf3D_Head\nWolf3D_Shirt\nWolf3D_Beard\nWolf3D_Headwear\nWolf3D_Teeth\nSkeleton structure\n[](#skeleton-structure)\nThe half-body (VR) avatar skeleton structure can be seen below. The skeleton root name is \nAvatarRoot\n.\nSkeletal structure of half-body avatars.\nEye rotation\n[](#eye-rotation)\nEye rotation can be controlled via the \nLeftEye\n and \nRightEye\n bones.\n\u200b\n\u200b\nHands\n[](#hands)\nBy default, VR avatars include hands. \n\u200b\n\u200b\nDownloads\n[](#downloads)\nYou can create your VR half-body avatar via \n[https://vr.readyplayer.me](https://vr.readyplayer.me)\n or try the below example asset.\nrpm-avatar-vr-1.glb\n4MB\nBinary\nExample half-body (VR) avatar exported from Ready Player Me",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/avatars/vr-avatar",
            "title": "Half-body avatars"
        }
    },
    {
        "page_content": "Assets\nThe Assets endpoints allow you to upload and manage custom assets for your game or app. It enables you to manage your library of outfits (headwear, eyewear, etc., coming soon) and also create tools for yourself or your users to create UGC.\nLearn how to \n[create custom outfits](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits)\n and \n[manage custom outfits using the API](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits/manage-custom-outfits-using-the-api)\n in the Customizing Guides.\nAsset management is also possible using the \n[Asset Manager in Studio](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits/asset-manager-in-studio)\n.\nEndpoints\n[](#endpoints)\n\u200b\n[Create Assets](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/post-create-asset)\n\u200b\n\u200b\n[List Assets](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/get-list-assets)\n\u200b\n\u200b\n[Upload Asset](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/post-upload-model)\n\u200b\n\u200b\n[Update Asset](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/patch-update-asset)\n\u200b\n\u200b\n[Add Asset to Application](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/post-add-asset-to-application)\n\u200b\n\u200b\n[Remove Asset from Application](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/delete-remove-asset-from-application)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets",
            "title": "Assets"
        }
    },
    {
        "page_content": "Auth\nAll authentication related endpoints\nLearn how to restore the session for a user and link the accounts of Ready Player Me users in the guides\n\u200b\n[Advanced User Management](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management)\n\u200b\n\u200b\n[Account Linking](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/account-linking)\n\u200b\nEndpoints\n[](#endpoints)\n\u200b\n[Get Token](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/auth/get-token)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/auth",
            "title": "Auth"
        }
    },
    {
        "page_content": "Avatars\nRetrieve 3D and 2D avatars along with their metadata.\n\u200b\n[GET - 3D avatars](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-3d-avatars)\n\u200b\n\u200b\n[GET - 2D avatars](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-2d-avatars)\n\u200b\n\u200b\n[GET - Metadata](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-metadata)\n\u200b\n\u200b\n[Changelog](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/changelog)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars",
            "title": "Avatars"
        }
    },
    {
        "page_content": "Changelog\n2023-06-28\n[](#2023-06-28)\nIntroduced new endpoint \n[Create Guest User](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/users/post-create-user)\n\u200b\nIntroduced new endpoint \n[Create Short Lived Token](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/auth/get-token)\n\u200b\n2023-05-10\n[](#2023-05-10)\nPublic launch of \n[Assets Endpoints](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets)\n\u200b\n2023-02-08\n[](#2023-02-08)\nChanged the default base URL for 3D Avatars, 2D Avatars and Avatar Metadata from \napi.readyplayer.me\n to \nmodels.readyplayer.me\n for internal performance reasons.\n2022-12-12\n[](#2022-12-12)\nNew parameter \nquality\n with three quality presets (low, medium, high).\nNew parameter \ntextureChannels\n to choose the included texture channels.\nParameter \nmeshLod=1\n now has now a 50% reduction in poly-count (was at 25% before).\nParameter \nmeshLod=2\n now has now a 75% reduction in poly-count (was at 50% before).\nAll parts of the avatar other than glasses are now affected by the \nmeshLod\n parameter. Previously it was only the outfit.\n2022-09-28\n[](#2022-09-28)\nParameter \nmeshLod=2\n now has now a 75% reduction in poly-count (was at 50% before).\nParameter \nmeshLod=1\n now has now a 50% reduction in poly-count (was at 25% before).\nParameter \nmeshLod=2\n now has now a 75% reduction in poly-count (was at 50% before).\nAll parts of the avatar other than glasses are now affected by the \nmeshLod\n parameter. Previously it was only the outfit.\nInitial public launch of Avatar API - 3D Avatars with seven parameters.\nAll parts of the avatar other than glasses are now affected by the \nmeshLod\n parameter. Previously it was only the outfit.\nmorphTargets\n to choose the included blend shapes.\ntextureSizeLimit\n to specify the maximum texture size.\nmeshLod\n to request different level of details.\nuseDracoCompression\n to enable server-side compression.\ntextureAtlas\n to specify the atlas size.\npose\n to request an avatar with default pose of A or T.\nuseHands\n to request a half-body avatar with or without hands.\nInitial public launch of Avatar API - 2D Avatars with 2 parameters.\nscene\n to specify the portrait-type to render.\nblendShapes\n to specify blendShape values.\nInitial public launch of Avatar API - Metadata.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/changelog",
            "title": "Changelog"
        }
    },
    {
        "page_content": "Users\nYou can create Ready Player Me Guest Users for every user on your end. That is helpful when you want to store the state of the avatars and assets for your users without them having a Ready Player Me account. This also reduces friction in the user experience.\nLearn how to create Guest Accounts and how to link the RPM account to your user profiles\n\u200b\n[Guest Accounts](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/guest-accounts)\n\u200b\n\u200b\n[Account Linking](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/account-linking)\n\u200b\nEndpoints\n[](#endpoints)\n\u200b\n[Create Guest User](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/users/post-create-user)\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/users",
            "title": "Users"
        }
    },
    {
        "page_content": "AvatarCache\nRuntime avatar cache utilities for querying and clearing the current cache data.\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nIsCacheEmpty()\nbool \nReturns true if no avatars are stored in the persistent cache.\nClear()\nvoid \nClears all avatar data from the persistent cache.\nClearAvatar(string guid)\nvoid \nClears data for a specific avatar GUID from the persistent cache.\nGetAvatarCount()\nlong \nReturns number of avatars stored in the persistent cache.\nGetCacheSize()\nint \nReturns total size of all avatars stored in the persistent cache in bytes.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarcache",
            "title": "AvatarCache"
        }
    },
    {
        "page_content": "AvatarConfig\nScriptable object for defining avatar parameters.\nProperties\n[](#properties)\nProperty\nType\nDescription\nMeshLod\nMeshLod\nChoose level of detail. High, Medium, or Low.\nPose\nPose\nChoose A Pose or T Pose.\nTextureAtlas\nTextureAtlas\nTurn on texture atlasing and choose the atlas size. None, Low (256), Medium (512), or High(1024).\nTextureSizeLimit\nint\nSet an upper limit on texture size from 256 to 1024.\nUseHands\nbool\nWhether to include hands with half-body avatars.\nMorphTargets\nList<string>\nList of individual morph targets or morph target standard groups to include on the avatar. \nAvatar Configuration templates are included in the SDK with recommended settings for High, Medium, and Low quality avatars at\n/Packages/Ready Player Me Core/Configurations/\nExample\n[](#example)\nIt is recommended that you create your own configuration inside the Assets folder and place it inside a \"Resources\" folder to easily load using the \nResources.Load()\n function as shown in the example below passing the name of the file e.g \"CustomAvatarConfig\".\navatarObjectLoader.AvatarConfig = \n    Resources.Load<AvatarConfig>(\"CustomAvatarConfig\");",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarconfig",
            "title": "AvatarConfig"
        }
    },
    {
        "page_content": "AvatarObjectLoader\nThe AvatarObjectLoader class is used for loading and downloading avatar models and configuring the output.\nAvatarObjectLoader was previously called AvatarLoader but has since changed with the introduction of the new modular Unity SDK or Unity SDK 2.0\nProperties\n[](#properties)\nProperty\nType\nDescription\nAvatarConfig\nAvatarConfig\nAvatar Configuration instance used when downloading avatars.\nAvatarImporter\nIAvatarImporter\nAvatar Importer instance used for importing the GLB model.\n\u200b\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nLoadAvatar(string url)\nvoid\nInitiates avatar download and import operations. Takes an Avatar URL as a parameter.\nCancel()\nvoid\nCancels the current avatar loading process. Fires \nOnFailed\n  event with \nFailureEventArgs\n as \nOperationCancelled\n.\n\u200b\nEvents\n[](#events)\nEvent\nEventArgs\nDescription\nOnCompleted\nCompletionEventArgs\nCalled upon avatar loader success.\nOnFailed\nFailureEventArgs\nCalled upon avatar loading failure.\nOnProgressChanged\nProgressChangedEventArgs\nCalled upon avatar loader progress change.\nExample\n[](#example)\nusing\n \nReadyPlayerMe\n.\nAvatarLoader\n;\nusing\n \nReadyPlayerMe\n.\nCore\n;\nusing\n \nUnityEngine\n;\n\u200b\nnamespace\n \nReadyPlayerMe\n{\n \npublic\n \nclass\n \nAvatarLoadingExample\n \n:\n \nMonoBehaviour\n \n{\n \n[\nSerializeField\n]\n \nprivate\n \nstring\n avatarUrl \n=\n \n\"https://api.readyplayer.me/v1/avatars/632d65e99b4c6a4352a9b8db.glb\"\n;\n\u200b\n \nprivate\n \nGameObject\n avatar\n;\n\u200b\n \nprivate\n \nvoid\n \nStart\n()\n \n{\n            ApplicationData\n.\nLog\n();\n \nvar\n avatarLoader \n=\n \nnew\n \nAvatarObjectLoader\n();\n            avatarLoader\n.\nOnCompleted \n+=\n \n(\n_\n,\n args\n)\n \n=>\n \n{\n                avatar \n=\n args\n.\nAvatar\n;\n                AvatarAnimatorHelper\n.\nSetupAnimator\n(\nargs\n.\nMetadata\n.\nBodyType\n,\n avatar\n);\n \n};\n            avatarLoader\n.\nLoadAvatar\n(\navatarUrl\n);\n \n}\n\u200b\n \nprivate\n \nvoid\n \nOnDestroy\n()\n \n{\n \nif\n \n(\navatar \n!=\n \nnull\n)\n \nDestroy\n(\navatar\n);\n \n}\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarloader",
            "title": "AvatarObjectLoader"
        }
    },
    {
        "page_content": "AvatarRenderLoader\nThe AvatarRenderLoader class is used for loading a 2D render of the avatar.\nYou can load a 2D render of your avatar using the Avatar Render Loader class which obtains a rendered image of your avatar via the Render API.\nProperties\n[](#properties)\nProperty\nType\nDescription\nTimout\nint\nSet or get the timout in seconds for the avatar render loader.\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nLoadRender(\n  string url,\n  AvatarRenderScene scene, \n  string blendShapeMesh,\n  Dictionary<string,float> blendShapes\n)\nvoid\nLoads a 2D render of the avatar at the supplied URL according to the supplied paramenters.\nLoadRender() Parameters\n[](#loadrender-parameters)\nurl\nstring\nURL of the avatar to render. This is the same URL as used to load the avatar model.\nscene\nAvatarRenderScene\nType of scene to render.  See below.\nblendShapeMesh (optional)\nstring\nTarget blend shape mesh name. Required to apply custom blend shape weights to the render.\nblendShapes (optional)\nDictionary<string, float>\nBlend shape name and weight to apply to the avatar render.\nValues for AvatarRenderScene\n[](#values-for-avatarrenderscene)\nProperty\nType\nDescription\nFullBodyPostureTransparent\nAvatarRenderScene\nCreates a portrait with a pose from a full-body avatar with transparent background.\nPortrait\nAvatarRenderScene\nCreates a portrait from a half-body avatar.\nPortraitTransparent\nAvatarRenderScene\nCreates a portrait from a half-body avatar with transparent background.\nActions\n[](#actions)\nEvent\nEventArgs\nDescription\nOnFailed\n<FailureType, string>\nCalled upon failure.\nOnCompleted\n<Texture2D>\nCalled upon success.\nProgressChanged\n<float, string>\nCalled upon download progress.\nExample\n[](#example)\npublic\n \nclass\n \nAvatarRenderExample\n \n:\n \nMonoBehaviour\n{\n \nprivate\n \nconst\n \nstring\n TAG \n=\n \nnameof\n(\nAvatarRenderExample\n);\n\u00e2\u20ac\u2039\n \nprivate\n \nstring\n url \n=\n \n\"https://api.readyplayer.me/v1/avatars/6185a4acfb622cf1cdc49348.glb\"\n;\n \nprivate\n \nAvatarRenderScene\n scene \n=\n AvatarRenderScene\n.\nFullBodyPostureTransparent\n;\n\u00e2\u20ac\u2039\n \nprivate\n \nstring\n blendShapeMesh \n=\n \n\"Wolf3D_Avatar\"\n;\n \n//Main-Node for blendshapes\n \nprivate\n \nDictionary\n<\nstring\n,\n \nfloat\n>\n blendShapes \n=\n \nnew\n \nDictionary\n<\nstring\n,\n \nfloat\n>\n \n{\n \n{\n \n\"mouthSmile\"\n,\n \n0.7f\n \n},\n \n{\n \n\"viseme_aa\"\n,\n \n0.5f\n \n},\n \n{\n \n\"jawOpen\"\n,\n \n0.3f\n \n}\n \n};\n\u00e2\u20ac\u2039\n \nvoid\n \nStart\n()\n \n{\n \nvar\n avatarRenderer \n=\n \nnew\n \nAvatarRenderLoader\n();\n        avatarRenderer\n.\nOnCompleted \n=\n Completed\n;\n        avatarRenderer\n.\nOnFailed \n=\n Fail\n;\n        avatarRenderer\n.\nLoadRender\n(\nurl\n,\n scene\n,\n blendShapeMesh\n,\n blendShapes\n);\n        loadingPanel\n.\nSetActive\n(\ntrue\n);\n \n}\n\u00e2\u20ac\u2039\n \nprivate\n \nvoid\n \nCompleted\n(\nTexture2D\n render\n)\n \n{\n \n// Do something with the image\n \n}\n\u00e2\u20ac\u2039\n \nprivate\n \nvoid\n \nFail\n(\nFailureType\n type\n,\n \nstring\n message\n)\n \n{\n \n// Errorhandling\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarrenderloader",
            "title": "AvatarRenderLoader"
        }
    },
    {
        "page_content": "Changelog\nUnity SDK Updates - March 29, 2023\n[](#unity-sdk-updates-march-29-2023)\nUnity SDK Core Module v1.3.0\nImport timeout to module installer \n[#70](https://github.com/readyplayerme/rpm-unity-sdk-core/pull/70)\n\u00e2\u20ac\u2039\nAdd new setup guide window \n[#71](https://github.com/readyplayerme/rpm-unity-sdk-core/pull/71)\n\u00e2\u20ac\u2039\nAdded function for folder size in MB \n[#72](https://github.com/readyplayerme/rpm-unity-sdk-core/pull/72)\n\u00e2\u20ac\u2039\nVarious editor window layout fixes \n[#73](https://github.com/readyplayerme/rpm-unity-sdk-core/pull/73)\n\u00e2\u20ac\u2039\nUnity SDK Avatar Loader Module v1.3.0\nAPI for async avatar loading \n[#76](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/76)\n\u00e2\u20ac\u2039\nAdded setup guide window \n[#85](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/85)\n\u00e2\u20ac\u2039\nUpdates for core module refactor \n[#78](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/78)\n\u00e2\u20ac\u2039\nGeneral cleanup and refactor \n[#79](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/79)\n\u0000\u00e2\u20ac\u2039\nRefactor of multiple avatar renderer example \n[#83](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/83)\n\u00e2\u20ac\u2039\nRefactor of avatar cache \n[#86](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/86)\n\u00e2\u20ac\u2039\nDocumentation UI improvements \n[#87](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/87)\n\u00e2\u20ac\u2039\nAlignment issues and spacing in Core settings window \n[#88](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/88)\n\u00e2\u20ac\u2039\nUnity SDK WebView Module v1.2.0\nAdded support for account linking for auto login \n[#14](https://github.com/readyplayerme/rpm-unity-sdk-webview/pull/14)\n\u00e2\u20ac\u2039\nAdded support for asset unlock events \n[#15](https://github.com/readyplayerme/rpm-unity-sdk-webview/pull/15)\n\u00e2\u20ac\u2039\nUnity SDK Updates - April 18, 2023\n[](#unity-sdk-updates-april-18-2023)\nUnity SDK Core Module v1.2.0\nSupport for response codes \n[#62](https://github.com/readyplayerme/rpm-unity-sdk-core/pull/62)\n\u00e2\u20ac\u2039\nRefactor of WebRequestDispatcher \n[#59](https://github.com/readyplayerme/rpm-unity-sdk-core/pull/59)\n\u00e2\u20ac\u2039\nUnity SDK Avatar Loader Module v1.2.0\nMesh Optimization compression support \n[#74](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/74)\n\u00e2\u20ac\u2039\nQueryBuilder class for handling Avatar API parameter generation \n[#71](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/71)\n\u00e2\u20ac\u2039\nEyeAnimationHandler and VoiceHandler now logs if required blendshapes are missing \n[#66](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/66)\n\u00e2\u20ac\u2039\nAdded extra unit tests for better coverage \n[#68](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/68)\n\u00e2\u20ac\u2039\nAvatarMetdata now includes a color hex value for SkinTone \n[#63](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/63)\n\u00e2\u20ac\u2039\nAn issue caused by avatar URL's that have a space at beginning or end \n[#73](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/73)\n\u00e2\u20ac\u2039\nAvatarRenderLoader now uses latest Render API via URL query parameters \n[#64](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/64)\n\u00e2\u20ac\u2039\nRefactor of WebRequestDispatcher \n[#67](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/67)\n\u00e2\u20ac\u2039\nModel urls for sample scenes updated \n[#72](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/72)\n\u00e2\u20ac\u2039\nUnity SDK WebView Module v1.1.1\nExposed WebViewPanel loaded field to check when canvas is ready \n[#13](https://github.com/readyplayerme/rpm-unity-sdk-webview/pull/13)\n\u00e2\u20ac\u2039\nUnity SDK Updates - March 21, 2023\n[](#unity-sdk-updates-march-21-2023)\nUnity SDK Core Module v1.1.0\nQuick Start Window \n[#50](https://github.com/readyplayerme/rpm-unity-sdk-core/pull/50)\n\u00e2\u20ac\u2039\nOperationCompleted event for recording analytics for loading times \n[#53](https://github.com/readyplayerme/rpm-unity-sdk-core/pull/53)\n\u00e2\u20ac\u2039\nUnity SDK Avatar Loader Module v1.1.0\nAvatar Component \n[#52](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/52)\n\u00e2\u20ac\u2039\nCaching issue due to time zone change \n[#55](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/55)\n\u00e2\u20ac\u2039\nAnimation folder path update \n[#59](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/59)\n\u00e2\u20ac\u2039\nAnimation Extractor update to handle multiple files \n[#60](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/pull/60)\n\u00e2\u20ac\u2039\nUnity SDK WebView Module v1.1.0\nPermission request on app focus \n[#7](https://github.com/readyplayerme/rpm-unity-sdk-webview/pull/7)\n\u00e2\u20ac\u2039\nURL Config Builder \n[#8](https://github.com/readyplayerme/rpm-unity-sdk-webview/pull/8)\n\u00e2\u20ac\u2039\nUnity SDK 2.0 - February 08, 2023\n[](#unity-sdk-2.0-february-08-2023)\nChanged\nSDK split into three separate modules, all hosted on GitHub.\nReady Player Me Core\n\n[https://github.com/readyplayerme/rpm-unity-sdk-core](https://github.com/readyplayerme/rpm-unity-sdk-core)\n \nReady Player Me Avatar Loader\n\n[https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader)\n\u00e2\u20ac\u2039\nReady Player Me WebView\n\n[https://github.com/readyplayerme/rpm-unity-sdk-webview](https://github.com/readyplayerme/rpm-unity-sdk-webview)\n\u00e2\u20ac\u2039\nChangelogs are now found in the CHANGELOG.md files for each module's Git repository\n\u00e2\u20ac\u2039\n[https://github.com/readyplayerme/rpm-unity-sdk-core/blob/develop/CHANGELOG.md](https://github.com/readyplayerme/rpm-unity-sdk-core/blob/develop/CHANGELOG.md)\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n[https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/blob/develop/CHANGELOG.md](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader/blob/develop/CHANGELOG.md)\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n[https://github.com/readyplayerme/rpm-unity-sdk-webview/blob/develop/CHANGELOG.md](https://github.com/readyplayerme/rpm-unity-sdk-webview/blob/develop/CHANGELOG.md)\n\u00e2\u20ac\u2039\nUnity SDK 1.13.2 - December 20, 2022\n[](#unity-sdk-1.13.2-december-20-2022)\nAdded\n[](#added)\nIsWebViewUpToDate method is added for making sure the target device can handle 3D rendering.\nWebView Example updated with IsWebViewUpToDate usage.\nWebView android library is updated.\nUnity SDK 1.13.1 - November 16, 2022\n[](#unity-sdk-1.13.1-november-16-2022)\nFixed\nFixed a typo in the header attributes for the avatar request.\nURL processor handling for shortcodes to support URL redirects.\nFix for CORS-related issues with Cloudfront URLs in WebGL.\nFixed an issue on the LOD Example slider.\nUnity SDK 1.13.0 - October 26, 2022\n[](#unity-sdk-1.13.0-october-26-2022)\nAdded\n[](#added-1)\nLOD example scene and script added to Examples folder of Ready Player Me plugin.\nFixed\n[](#fixed)\nWebView Android Manifest will now have allowBackup:false to help fix WebGLES2 issues in older devices.\nUnity SDK 1.12.0 - October 11, 2022\n[](#unity-sdk-1.12.0-october-11-2022)\nAdded\n[](#added-2)\nAvatar API support in Avatar Loader, now users can create configurable avatars.\nAvatar Configuration Scriptable Object for requesting avatars with different configurations.\nAvatar Caching support for avatars created with different avatar configurations.\nEditor options and scripting API for Avatar Caching, Cache Cleaning, and Avatar Config. \nTimeout variable in AvatarLoader for setting timeout of all web requests.\nShifted to using async/await instead of coroutines.\nAvatar Loader design shifted from a chain of methods to array of executable operations.\nAvatar loading operations can now be cancelled.\nExample scene for Avatar Config usage for showing multiple quality avatar loading.\nUpdated\n[](#updated)\nShort code handling logic updated for Avatar API.\nVisual updates for Avatar Loader and Settings windows.\nAvatar caching turned off by default.\nAvatars are now loaded without a default Animation Controller.\nAvatar URLs in example scenes are updated.\nDocumentation updated.\nFixed\n[](#fixed-1)\nAvatar position flicker on load issue is fixed.\nWebView cache cleanup issue is fixed. KeepSessionAlive usage for restarting avatar loading.\nHalf-body avatar loading error due to no Animator component issue is fixed.\nWebView white background flicker issue is fixed.\nUnity SDK 1.11.0 - \nAugust 3, 2022\n[](#unity-sdk-1.11.0-august-3-2022)\nAdded\n[](#added-3)\nAvatars are now cached at runtime and therefore loading much faster. Cached avatars are stored at Application.persistentDataPath.\nThe SDKLogger that prints logs about the current operation and the status of the avatar loading process. Enabled by default.\nPlease help us to improve the SDK by enabling analytics.\nYou can now generate and render 2D images of avatars directly from the Unity SDK.\nYou can now remove the session info after the avatar creation by setting the \nKeepSessionAlive\n flag to false.\nLoaded avatars from the Avatar Loader Editor Window are now imported as prefabs.\nExample on how to load multiple avatars efficiently added to Runtime Examples folder.\nA new runtime debug panel has been added to the Runtime Example.\nUpdated\n[](#updated-1)\nThe UI of the Avatar Loader is now cleaner and provides you with the most important functionality.\nThe WebView Partner Editor has been renamed to a more general name Settings.\nFixed\nVoiceHandler blend shape weight fix.\nAvatar Loader and Settings Dialog style issues on the first launch, in Unity 2020 and 2021 are fixed.\nRender pipeline error in Unity 2022 is fixed.\nEditor Coroutine runner duplicated when switching from play mode to edit mode fixed.\n\u00e2\u20ac\u2039\nUnity SDK 1.10.0 - May 24, 2022\n[](#unity-sdk-1.10.0-may-24-2022)\nHighlights\nOnFailed, OnProgressChanged and OnCompleted events for AvatarLoader. AvatarLoader with callbacks is now obsolete.\nVuplex example package. If you own Vuplex, you can use this package to load avatars in VR or standalone builds.\nAbility to clean up the cache of the WebView, which helps you starts RPM from the beginning.\nStopCoroutine method added to CoroutineRunner.\n\u00e2\u20ac\u2039\nChanged\nGeneral refactoring of the package. Avatar creation operations separated into classes.\n\u00e2\u20ac\u2039\nUnity SDK 1.9.0 - April 6, 2022\n[](#unity-sdk-1.9.0-april-6-2022)\nAdded\n[](#added-4)\nContext menu for extracting animations from FBX files.\nChanged\n[](#changed)\nRemoved legacy post message event listener.\nFixed\n[](#fixed-2)\nAsync loading issue causing mesh explosion.\n\u00e2\u20ac\u2039\nUnity SDK 1.8.0 - March 21, 2022\n[](#unity-sdk-1.8.0-march-21-2022)\nAdded\n[](#added-5)\nEye Animation Handler play-mode update and blink rate field.\nChanged\n[](#changed-1)\nAnimation Target FBX files are removed, animations and animation avatars are moved into separate folders.\nMipMaps are disabled for avatar textures.\nRemoved \"Wolf3D\" from namespace and component names and filenames.\nRenamed \"Wolf3D Ready Player Me Avatar SDK\" folder to \"Ready Player Me\".\nFixed\n[](#fixed-3)\nPartner subdomain not saved issue.\nPartner subdomain forced to return \"demo\" if set blank.\n\u00e2\u20ac\u2039\nUnity SDK 1.7.3 - January 20, 2022\n[](#unity-sdk-1.7.3-january-20-2022)\nChanged\nEditor UI updates\nWebView IOS and Android platform dependent compilation blocks\nLoading avatars if short code URL is pasted\nWebView example close button behaviour update in UI\nFixed\nPartner subdomain save issue\nCode commenting and typo fixes\nRemoved\nFormer animation source FBX fields are removed.\n\u00e2\u20ac\u2039\nUnity SDK 1.7.0 - October 08, 2021\n[](#unity-sdk-1.7.0-october-08-2021)\nChanged\n[](#changed-2)\nLayout and styles for Ready Player Me custom editor windows.\nAdded\n[](#added-6)\nFAQ button to custom editor windows.\n\u00e2\u20ac\u2039\nUnity SDK 1.6.0 - September 3, 2021\n[](#unity-sdk-1.6.0-september-3-2021)\nUpdates\nMessageCanvas replaced with MessagePanel for flexible use.\nWebView is called on a prefab which can be added via Game Object/UI/WebView Canvas menu.\nWebView example scene updated.\nAdded\nAdded OnAvatarImported callback to avatar loader, to receive the GameObject before it is processed.\nFixed\nFile name and typo fixes.\nRemoved\nMessageCanvas removed. Unsupported cases are covered by a message panel.\nwebview.html is removed.\n\u00e2\u20ac\u2039\nUnity SDK 1.5.1 - June 29, 2021\n[](#unity-sdk-1.5.1-june-29-2021)\nAdded\n[](#added-7)\nAudio Clip support for Voice Handler.\nUpdates\n[](#updates)\nProject version is updated to 2019.4.11f1 LTS.\nRuntime Test scene has URL to an optimized avatar.\nAnimation Target files updated with models with basic mesh.\nAnimator is moved to root avatar object.\nAvatar Armature and HipBone scale are set to 1.\nFixed\n[](#fixed-4)\nTypo fixes and refactoring in general.\nUnity SDK 1.5.0 - June 16, 2021\n[](#unity-sdk-1.5.0-june-16-2021)\nAdded\n[](#added-8)\nSupport for loading avatars from short codes.\nWebView menu window for editing partner subdomain in webview.html.\nUpdates\n[](#updates-1)\nGeneral refactoring.\nRPM website updated to Unity SDK.\nVoiceHandler supports beard and teeth mesh.\nFixed\n[](#fixed-5)\nAnimations not exporting correctly in the second time.\nWebView IOS permissions issues.\nWebView SSL Issue on Android.\nWebView does not send URL after window is restarted.\n\u00e2\u20ac\u2039\nUnity SDK 1.4.3 - May 28, 2021\n[](#unity-sdk-1.4.3-may-28-2021)\nAdded \n[](#added-9)\nVariable caching for Avatar Loader window. \nReveal Animations Folder button to Avatar Loader window. \nSupport for auto assigning animation files avatars during import. \nWebView no internet connection case cover.\nUpdated \n[](#updated-2)\nAnimation target FBX files for V2 avatars are updated. \nWebView plugin is refactored and code is cleaned up.\nFixed \n[](#fixed-6)\nIOS WebView not receiving glb URL. \nAsset import order conflict between animation and animation target files fixed. \nAnimation Controllers losing animation references fixed.\nRemoved \n[](#removed)\nMacOS support for WebView due to working only partially.\n\u00e2\u20ac\u2039\nUnity SDK 1.4.1 - May 20, 2021\n[](#unity-sdk-1.4.1-may-20-2021)\nUpdated\n[](#updated-3)\nRefactored eye and mouth movement scripts.\nFixed\n[](#fixed-7)\nEye and animation handler now works for avatars with texture atlas.\n\u00e2\u20ac\u2039\nUnity SDK 1.4.0 - May 11, 2021\n[](#unity-sdk-1.4.0-may-11-2021)\nAdded\n\u00e2\u20ac\u2039\n[New Unity WebView plugin](http://url200.wolf3d.io/ls/click?upn=zO1XgcDKkDORM-2FWG6BxU5XKYNYqrQwpQBEsxRwi1kzK5yEXg7qPTu6FaELE7Qb5N-2FuG23-2BGqMA-2FCf1WnNdcXxqFLLUac7osgDyiTU5-2Bmyutw3djRV3GfYmsmeIZMJyXeSp6jYEICT4EokgtPg8bTdDI8cOdHDsRk0h5sns0l7TmnFJMGXih7H2-2FbXeqOgYU1YrxRYTFbrE7jW4CC-2B-2Bh8Hajh8jw5wK6Nhx2L4Z4OeZ5I3NBqSytWYiw3xRLisFfuAHPV_mPe56M9GBmSUs2G6ZB0A0PmpLEmyrgDxYo5oWFqVizORgprkWiFhCQ-2BJDFrzq0hRqqSBE-2B0i4ZFChGqxOnVUQs3-2BWGzz432VnSbhd7177C9AlSNOXn-2F11P6mtRxtr-2FHB0q8Op4-2FeZoavzrFhaPqxIfHn9s04HkgyN0J2YHLQwgKqFhVU4G5pUE0adEJaicouO830Wze2eTiZ7WDZqXIzd5YOQn-2Ff3SeRGNLWr7DybtvA7rx0Br0jDyW1S1x6E1aMxa8UlkpzFDQCjMcp5Q7v70BfBL8nPbjpNEShiKN3sYodA8KEToUr4HF40C0LwhQbXmbNH2OGd-2BXjIOwevzh3DrBW7a2ip9wxPO-2B4lqL6wBxZmWM0ARN5HooyCXBTkrpOo11syVgQahxpMT0hms006Xaz8L7iG5YfewcKl8ba836YLgEMMwTDvjQdtofIED1lcH2iXOlovVUL3JhBBEIQOjPANYbZlLdqi1-2FLuEObgiafWqW2dW-2FnE6svySwLjj7cWMN0cD-2Ff63F6eESZHfb-2BGFWkpJSXU5a7NkM4DMnFk63fNMTcnnZSN2HPOoc-2Bj69J7vdAag0agcyKSIJc-2BZypW24SqkpPRVxOw3CA9o2zVB49NA0nYos5fYy3VRc70ZNMvdTUGpKnYzdZkrIcUfkfzVHPk50ETHrSDEQnzM7TCOM-3D)\n, which lets your users create an avatar from readyplayer.me without leaving their mobile application. You can \n[see it in action on Android in a video here](http://url200.wolf3d.io/ls/click?upn=zO1XgcDKkDORM-2FWG6BxU5Vs4G1xKsbrd5gwCet9F3hB8yMdFai99ZKoCFcZ-2F-2BcS5E1KAnla4qse7cnIfZvUXoQ-3D-3DV8bq_mPe56M9GBmSUs2G6ZB0A0PmpLEmyrgDxYo5oWFqVizORgprkWiFhCQ-2BJDFrzq0hRqqSBE-2B0i4ZFChGqxOnVUQs3-2BWGzz432VnSbhd7177C9AlSNOXn-2F11P6mtRxtr-2FHB0q8Op4-2FeZoavzrFhaPqxIfHn9s04HkgyN0J2YHLQwgKqFhVU4G5pUE0adEJaicouO830Wze2eTiZ7WDZqXIzd5YOQn-2Ff3SeRGNLWr7DybtvA7rx0Br0jDyW1S1x6E1aMxa8UlkpzFDQCjMcp5Q7v70BfBL8nPbjpNEShiKN3sYodA8KEToUr4HF40C0LwhQbXmbNH2OGd-2BXjIOwevzh3DrBW7a2ip9wxPO-2B4lqL6wBxZmWM0ARN5HooyCXBTkrpOo11syVgQahxpMT0hms006Xaz8L7iG5YfewcKl8ba836YLgEMMwTDvjQdtofIED1lcH2iXOlovVUL3JhBBEIQOjPANYbZlLdqi1-2FLuEObgiafWqW2dW-2FnE6svySwLjj7ceA77JaZ-2B1EIz1AoIRwrONIeH-2BOtJOw9uXIheFaIJdKkLuhd1FKI9LFiF7yn9voi7G-2BBqtaMp8dA6qoeLRmziX7NGFrEyvXZ8aJf9OhoUQ093OoQ0rygkZjjLjldi9cIfZZdwGLQaK9lUbCJyCqq1m47y-2B5zp-2BRUzVSUAsBLHzFM-3D)\n.\nFixed\nMouth Open blendshape index detection issue in VoiceHandler component is fixed.\nAsset Post-processor animation target file folder name causing all animation folders to be processed as humanoid is fixed.\nDownload the latest version of Unity SDK from our \n[releases page](https://docs.readyplayer.me/integration-guides/unity/unity-sdk-download)\n.\n\u00e2\u20ac\u2039\nUnity SDK 1.3.1 - April 21st, 2021\n[](#unity-sdk-1.3.1-april-21st-2021)\nWe've updated full-body avatars rigs, removing issues with upside-down hip bones and improving skin weights. In order to take advantage of the improved full-body rigs, updating to the latest UnitySDK is advised.\nDownload the latest SDK from the \n[releases page](https://docs.readyplayer.me/integration-guides/unity/unity-sdk-download)\n.\nAdded\nAnimation Avatar Target files for V2 outfit rigs.\nFetching avatar metadata such as outfit version, outfit gender, and body type.\nFixed\nGLTFUtility Experimental Asset Importer namespace fix for 2020.1 or newer versions.\n\n\nUnitySDK 1.3.0 - April 12th, 2021\n[](#unitysdk-1.3.0-april-12th-2021)\nDownload the latest SDK from the \n[releases page](https://docs.readyplayer.me/integration-guides/unity/unity-sdk-download)\n.\nAdded\n[](#added-10)\nRuntime loading of avatars.\nGLTFUtility optimizations for faster avatar loading.\nFixed\n[](#fixed-8)\nFixes avatar loading for Android builds for Oculus Quest/Quest 2.\nDocs\n[](#docs)\nAdded the \n[General Integration Guide]()\n on how to integrate avatars into a web or Unity/Unreal app.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/changelog",
            "title": "Changelog"
        }
    },
    {
        "page_content": "Extras\nThe SDK comes with extra components to help you set up your avatar.\n[EyeAnimationHandlerRotates and blinks the eyes of the avatar randomly. \u200b](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/eyeanimationhandler)\n[VoiceHandlerUses microphone feedback to animate the mouthOpen blend shape based on the amplitude of the voice.\u200b](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/voicehandler)\n\u200b\n\u200b\n[](#undefined)\n\u200b\n[](#undefined-1)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras",
            "title": "Extras"
        }
    },
    {
        "page_content": "SDKLogger\nLog handler for the avatar loading process.\nThe SDKLogger prints logs about the current operation and the status of the avatar loading process.\nProperties\n[](#properties)\nProperty\nType\nDescription\nlogEnabled\nbool\nEnables (true) or disables (false) logging. \nTrue by default.\nExample\n[](#example)\nSDKLogger\n.\nAvatarLoaderLogger\n.\nlogEnabled \n=\n \nfalse\n;\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/sdklogger",
            "title": "SDKLogger"
        }
    },
    {
        "page_content": "WebView\nWebView \nis a component of the \nWebViewCanvas \nprefab that is part of the Ready Player Me SDK. To use a WebView, create a WebViewCanvas game object by selecting \n\nGameObject > UI > WebView Canvas\n.\npublic async Task IsWebViewUpToDate()\nCheck if the WebView that will be used for displaying the RPM website is up to date for handling 3D graphics. If it returns false, it is not advised to load WebView since the browser performance will be poor. Instead, you can warn the user for them to update their system WebView applications.\nReady Player Me website will work on Android devices with System WebView with a rendering engine equal to or newer than Chrome v70 or Firefox v64, and IOS devices with Webkit WebView equal to or newer than v600. This info is checked using the userAgent string of the WebView.\npublic void CreateWebview()\nThe Ready Player Me website will work on Android devices with System WebView with a rendering engine equal to or newer than Chrome v70 or Firefox v64, and IOS devices with Webkit WebView equal to or newer than v600. \nThis info is checked using the userAgent string of the WebView.\nProperties\n[](#properties)\nProperty\nType\nDescription\nKeepSessionAlive\nbool\nIf set to false, clears stored avatar data after the avatar creation is finished or when the WebView is destroyed. \nBy default, this is set to true.\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nCreateWebview()\nvoid\nCreates the WebView window and loads the Ready Player Me website.\nSetScreenPadding(\n  int left, int top,\n  int right,\n  int bottom)\nvoid\nSets the screen padding of the WebView window. \nDefault is 0 for all sides.\nSetVisible(bool visible)\nvoid\nSets the visibility of the WebView. \nClearAvatarData()**\nvoid\nClears avatar data from the WebView local storage and reloads the Ready Player Me page for new avatar creation.\nasync Task IsWebViewUpToDate()\nbool\nChecks if the WebView that will be used for displaying the RPM website is up to date for handling 3D graphics. If it returns false, it is not advised to load WebView since the browser performance will be poor. Instead, you can warn the user for them to update their system WebView applications.\nIf the cache is cleared, then the next time you open Ready Player Me in the WebView, your previous avatar will not be there, and you will start from the beginning of the avatar creation process.\nAction\n[](#action)\nEvent\nEventArgs\nDescription\nOnAvatarCreated\n<string>\nEvent to call when an avatar is created. Receives GLB URL.\nExample\n[](#example)\nOnce you have imported the Ready Player Me SDK, find an example at \n\nPlugins > Ready Player Me > Examples > Webview Example\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/webview",
            "title": "WebView"
        }
    },
    {
        "page_content": "Changelog\nRecent changes to the UE SDK.\nUnreal SDK 1.0.0 - February 22, 2023\n[](#unreal-sdk-1.0.0-february-22-2023)\nAdded\n[](#added)\nOpen source the SDK.\nLoad the avatar from the cache if the avatar request fails.\nBlendShape support for the RenderLoader.\nFemale avatar FBX file into the \nRPM_Avatar_Reference.zip\n.\nMemoryCache for preloading and saving the avatars in the runtime memory.\nUpdated\n[](#updated)\nSDK setup should be done through the open-source GitHub repository.\nBreaking Changes\n[](#breaking-changes)\nFAvatarDownloadCompleted\n delegate now uses USkeletalMesh instead of UglTFRuntimeAsset.\nReadyPlayerMeComponent::LoadRender\n function was removed. Use \nReadyPlayerMeRenderLoader::Load\n function instead.\nFDownloadImageCompleted\n delegate now uses UTexture2D instead of UTexture.\nUnreal SDK 0.19.0 - November 28, 2022\n[](#unreal-sdk-0.19.0-november-28-2022)\nAdded\n[](#added-1)\nAccess to the skeletal mesh config for material customization.\nRuntime animation retargeting support.\nEditor widget for exporting skeletal mesh without materials.\nSupport for Draco mesh compression.\nFixed\n[](#fixed)\nUpdated glTFRuntime plugin to the version 20220823 to support UE5.1.\nAdded missing ARKit morph targets to the avatar config.\nChanged the render request functionality to use avatar-api.\nRemoved the Viseme and ARKit morph targets from DA_StandardMorphTargets.\nUnreal SDK 0.18.1 - October 07, 2022\n[](#unreal-sdk-0.18.1-october-07-2022)\nFixed\nUpdated glTFRuntime plugin to the version 20220823 to support virtual bones for the avatars.\nUnreal SDK 0.18.0 - September 28, 2022\n[](#unreal-sdk-0.18.0-september-28-2022)\nAdded\n[](#added-2)\nAvatar API configuration parameter support.\nSuccess callback for ReadyPlayerMeComponent.\nAvatar Loading cancellation.\nUpdated\n[](#updated-1)\nDocumentation updated.\nFixed\n[](#fixed-1)\nAvatar caching support for Avatar API.\n\u200b\nUnreal SDK 0.17.1 - September 2, 2022\n[](#unreal-sdk-0.17.1-september-2-2022)\nFixed\nDownloading avatars by shortcodes hasn\u2019t been working in all cases. That\u2019s fixed now.\nSDK Analytics is now working with Unreal Engine 4.26+ and Unreal Engine 5.\n\u200b\nUnreal SDK 0.17.0 - August 23, 2022\n[](#unreal-sdk-0.17.0-august-23-2022)\nAdded\nYou can now generate and render 2D images of avatars directly from the Unreal SDK.\nAvatars are now cached at runtime (experimental).\nWe embedded fully optional product analytics.\nUpdated\nDeveloper Documentation is matching the latest released version of Unreal SDK.\nBig refactoring of internal classes.\nAvatar requests both, avatar metadata and .glb in parallel to reduce wait time.\n\u200b\nUnreal SDK 0.16.0 - \nMay 5, 2022\n[](#unreal-sdk-0.16.0-may-5-2022)\nFixed\nUE5 android (Quest) build issues caused by glTFRuntime.\nChanged\nUpdated to latest version of glTFRuntime .\n\u200b\nUnreal SDK 0.15.1 HOTFIX - \nApril 12, 2022\n[](#unreal-sdk-0.15.1-hotfix-april-12-2022)\nFixed\nReverted Ready Player Me avatar axis to be Y-forward to fix retargeting issues\nUnreal SDK 0.15.0 - \nApril 11, 2022\n[](#unreal-sdk-0.15.0-april-11-2022)\nChanged\nUpdated glTFRuntime for the latest changes and UE5 support.\nAvatars now spawn with X-axis forward to match Unreal standard.\nReference avatar assets were also updated to reflect forward axis change.\n\u200b\nUnreal SDK 0.14.0 - \nMarch 21, 2022\n[](#unreal-sdk-0.14.0-march-21-2022)\nAdded\nHalfbody avatar reference mesh, textures and skeleton.\nReady Player Me actor for loading Halfbody in RPM_Demo map.\nChanged\nAdded support for setting skeleton when loading Halfbody avatars.\nSplit character folder into Halfbody and Fullbody with all the appropriate assets.\n\u200b\nUnreal SDK 0.13.0 - March 18, 2022\n[](#unreal-sdk-0.13.0-march-18-2022)\nChanged\nPlugin folder restructure.\nUpdated reference avatar and added textures.\nSeparate BP_RPM_Component blueprint removed, now BP_RPM_Actor has a ReadyPlayerMeComponent.\nRemoved functionality for runtime setting of animation blueprints, now it must be set in the editor before running application.\nRemoved unnecessary parameters from avatar loading helper functions.\nAdded\nNew ReadyPlayerMeActor base class that adds required components on construction.\nFixed\nThe issue where animation wasn't being played in builds.\n\u200b\nUnreal SDK 0.12.1 - February 17, 2022\n[](#unreal-sdk-0.12.1-february-17-2022)\nAdded\nAdded bone mapping for humanoid skeleton.\nChanged\nUpdated gltfRuntime fork with updates for duplicate morph target names.\nEnabled import morph targets on RPM Mixamo SkeletalMesh.\n\u200b\nUnreal SDK 0.12.0 - February 4, 2022\n[](#unreal-sdk-0.12.0-february-4-2022)\nFixed\nUpdated skeleton retargeting for eye position issues.\nFixed conversion issues when building for Linux.\nFixed syntax errors preventing UE5 compatibility.\nChanged\nUpdated glTFRuntime fork to get the latest changes.\nPlugin config and code updates to allow for plugin packaging for BP Only projects.\n\u200b\nUnreal SDK 0.11.0\n - \nJanuary 11, 2022\n[](#unreal-sdk-0.11.0-january-11-2022)\nAdded\nReady Player Me Actor component \nChanged\nrefactored ReadyPlayerMeFunctionLibrary\n\u200b\nUnreal SDK 0.10.2 - October 22, 2021\n[](#unreal-sdk-0.10.2-october-22-2021)\nFixed\nUpdated glTFRuntime version to fix build errors\n\u200b\nUnreal SDK 0.10.0 - October 14, 2021\n[](#unreal-sdk-0.10.0-october-14-2021)\nAdded\n[](#added-3)\nBasic shortcode URL Validation\nChanged\n[](#changed)\nupdated full-body reference skeleton mesh and blueprint\nRemoved\n[](#removed)\nsupport for old avatars with V1 skeleton\nFixed\n[](#fixed-2)\nerrors from invalid shortcode URL's for full-body avatars\n\u200b\nUnreal SDK 0.8.1 - August 19, 2021\n[](#unreal-sdk-0.8.1-august-19-2021)\nFixed\n[](#fixed-3)\nfixed issue with regex on application build\nRemoved\n[](#removed-1)\nremoved Ready Player Me Web View due to issues with RPM Hub update\n\u200b\nUnreal SDK 0.8.0 - August 8, 2021\n[](#unreal-sdk-0.8.0-august-8-2021)\nAdded\n[](#added-4)\nsupport for Ready Player Me avatar shortcodes\nminor bug fixes\n\u200b\nUnreal Engine SDK 0.7.0 - June 14, 2021\n[](#unreal-engine-sdk-0.7.0-june-14-2021)\nFixed\nCrash when loading half-body avatars\nUpdated\nRefactor of example blueprint\nCheck for missing metadata fields\n\u200b\nUnreal Engine SDK 0.6.0\n[](#unreal-engine-sdk-0.6.0)\nAdded\n[](#added-5)\nTemporary workaround in glTFSkeletalMeshImporter for morph targets naming clash\nInclude headers to ReadyPlayerMeFunctionLibrary.cpp to fix android build errors\n\u200b\nUnreal Engine SDK 0.5.0 - May 4, 2021\n[](#unreal-engine-sdk-0.5.0-may-4-2021)\nAdded\nSupport for the new V2 avatars with updated rigs and new outfits\nBackwards compatibility with the V1 rig\nSupport and for retrieving generated AvatarMetaData (.json)\nDownload the latest Unreal Engine SDK from our \n[releases page](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/unreal-plugin-download)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/changelog",
            "title": "Changelog"
        }
    },
    {
        "page_content": "ReadyPlayerMeActor\nActor class for Ready Player Me avatars.\nReadyPlayerMeActor\n for runtime loading and displaying of avatars.\nProperties\n[](#properties)\nProperty\nType\nDescription\nSkeletalMeshComponent\nUSkeletalMeshComponent*\nThe default SkeletalMeshComponent. The skeletal mesh will be set during the avatar loading process.\nReadyPlayerMeComponent\nUReadyPlayerMeActorComponent*\nHandles the loading and setup of the avatar.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeactor",
            "title": "ReadyPlayerMeActor"
        }
    },
    {
        "page_content": "ReadyPlayerMeAvatarConfig\nBase data asset class that provides configuration for the avatar loader. For customization, create a Blueprint data asset subclass and modify the properties.\nPublic Properties\n[](#public-properties)\nProperty\nType\nDescription\nMeshLod\nEAvatarMeshLod\nMesh level of detail. High LOD is detailed but heavier work to load.\nDefault: High.\nPose\nEAvatarPose\nAvatar Pose. T and A poses are supported by the SDK. In most cases. A Pose will be used.\nTextureAtlas\nEAvatarTextureAtlas\nEnable to merge all textures into a single texture. If enabled, avatar is rendered with a single draw call.\nDefault: Disabled.\nTextureSizeLimit\nEAvatarTextureSizeLimit\nSet the max texture size.\nDefault: 1024.\nbUseHands\nbool\nIf set to true, the hands of the avatars will be included. This property applies only to half-body avatars.\nDefault: True.\nMorphTargets\nTSet\nThe selected morph targets (blend shapes) will be included in the avatar.\nbUseDracoMeshCompression\nbool\nIf set to true, the avatar will be compressed with the Draco mesh compression.\nMorphTargetGroup\nUReadyPlayerMeMorphTargetGroup*\nThe selected morph target group (blend shapes) will be included in the avatar.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeavatarconfig",
            "title": "ReadyPlayerMeAvatarConfig"
        }
    },
    {
        "page_content": "ReadyPlayerMeAvatarLoader\nThe AvatarLoader class is used for loading and downloading avatar models and configuring the output.\nReadyPlayerMeAvatarLoader \nloads the avatar from the provided \nurl\n and stores it in local storage. Used by \n[ReadyPlayerMeActorComponent](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeavatarloader#readyplayermeactorcomponent)\n. \nPublic Functions\n[](#public-functions)\nFunction\nReturns\nDescription\nLoadAvatar(\nconst FString& UrlShortcode, class UReadyPlayerMeAvatarConfig* AvatarConfig,\nUSkeleton* TargetSkeleton, const FglTFRuntimeSkeletalMeshConfig& SkeletalMeshConfig,\n\nconst FAvatarLoadCompleted& OnLoadCompleted, \nconst FAvatarLoadFailed& OnLoadFailed);\nvoid\nDownloads the avatar asset from the \nUrlShortcode\nand saves it in local storage.\nCancelAvatarLoad();\nvoid\nImmediately cancels avatar loading. When the garbage collector is removing the AvatarLoader, avatar loading gets automatically cancelled.\nLoadAvatar() Parameters\n[](#loadavatar-parameters)\nParameter\nDescription\nconst FString& UrlShortcode\nAvatar url or shortcode.\nUReadyPlayerMeAvatarConfig* AvatarConfig\nConfig for loading avatar with custom configuration.\nUSkeleton* TargetSkeleton\nChose the skeleton that will be used for the loaded avatar. If not set, the default skeleton will be used.\nconst FglTFRuntimeSkeletalMeshConfig& SkeletalMeshConfig\nglTFRuntime skeletal mesh config that will be used for loading the avatar.\nImportant: This property should be changed only for very special cases as changing this property might break the avatar.\nconst FAvatarLoadCompleted& OnLoadCompleted\nSuccess callback. Called when the avatar asset is downloaded.\nconst FAvatarLoadFailed& OnLoadFailed\nFailure callback. If the avatar fails to load, the failure callback will be called.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeavatarloader",
            "title": "ReadyPlayerMeAvatarLoader"
        }
    },
    {
        "page_content": "ReadyPlayerMeBlueprintLibrary\nProvides public functions that can be called directly from Blueprints.\nPublic Functions\n[](#public-functions)\nFunction\nReturns\nDescription\nClearAvatarCache()\nvoid\nDeletes all locally stored avatars.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeblueprintlibrary",
            "title": "ReadyPlayerMeBlueprintLibrary"
        }
    },
    {
        "page_content": "ReadyPlayerMeComponent\nActor component for Ready Player Me avatars.\nReadyPlayerMeComponent\n is an Actor component responsible for loading the avatar and visualizing it by setting its SkeletalMesh. It also provides functions for loading the avatar and loading a rendered image of the avatar. ReadyPlayerMeComponent internally uses \n[ReadyPlayerMeAvatarLoader ](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermecomponent#readyplayermeavatarloader)\nfor loading the avatar and \n[ReadyPlayerMeRenderLoader ](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermecomponent#readyplayermeavatarloader-1)\nfor rendering the avatar.\nThe Actor containing this component must also contain a SkeletalMeshComponent.\nProperties\n[](#properties)\nProperty\nType\nDescription\nUrlShortcode\nFString\nThe avatar URL or shortcode used to load the avatar from the web.\nTargetSkeleton\nUSkeleton*\nChose the skeleton that will be used for the loaded avatar. If not set, the default skeleton will be used.\nAvatarMetadata\nFAvatarMetadata\nProvides read-only information about the loaded avatar, such as the type, outfit, or gender.\nAvatarConfig\nUReadyPlayerMeAvatarConfig*\nAvatar configuration asset data. Used to load the avatar with the specific configs.\nIf no config is set, the partner-specific configs will be used for loading the avatar.\nSkeletalMeshComponent\nUSkeletalMeshComponent*\nSkeletal mesh component used for setting the skeletal mesh of the loaded avatar. If not set, it will be initialised with the skeletal mesh component of the parent Actor.\nFor runtime animation retargeting, if the Actor has multiple skeletal mesh components, this property must be set. \nSkeletalMeshConfig\nFglTFRuntimeSkeletalMeshConfig\nglTFRuntime skeletal mesh config that will be used for loading the avatar.\nImportant: This property should be changed only for very special cases as changing this property might break the avatar.\nPublic Functions\n[](#public-functions)\nFunction\nReturns\nText\nLoadAvatar(\nconst FAvatarLoadCompleted& OnLoadCompleted, \nconst FAvatarLoadFailed& OnLoadFailed);\nvoid\nDownloads the avatar from the web and generates a skeletal mesh of it. If the model was previously downloaded and stored locally, the local model will be used if avatar caching is enabled.\nLoadNewAvatar(\nconst FString& Url, \nconst FAvatarLoadCompleted& OnLoadCompleted, \nconst FAvatarLoadFailed& OnLoadFailed);\nvoid\n\u00e2\u20ac\u2039\nLoadRender(const ERenderSceneType& SceneType, const FDownloadImageCompleted& OnCompleted, \nconst FDage for townloadImageFailed& OnFailed);\nvoid\nLoads the rendered image of the avatar from the server. By setting the \nSceneType\n the avatar can be rendered in different scenes.\nCancelAvatarLoad();\nvoid\nImmediately cancels avatar loading. When the garbage collector is removing the component, avatar loading gets automatically cancelled.\nLoadAvatar() and LoadNewAvatar() Parameters\n[](#loadavatar-and-loadnewavatar-parameters)\nParameter\nDescription\nconst FAvatarLoadCompleted& OnLoadCompleted\nSuccess callback. Called when the avatar asset is downloaded and the skeletal mesh is set.\nconst FAvatarLoadFailed& OnLoadFailed\nFailure callback. If the avatar fails to load, the failure callback will be called.\nconst FString& Url\nAvatar URL or shortcode.\n\u00e2\u20ac\u2039",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermecomponent",
            "title": "ReadyPlayerMeComponent"
        }
    },
    {
        "page_content": "ReadyPlayerMeMemoryCache\nMemory cache for preloading and reusing the avatars.\nReadyPlayerMeMemoryCache\n is used to preload avatars and store the cached skeletal meshes. Cached avatars will be instantiated instantly. It's mainly used for preloading the avatars in the background.\nProperties\n[](#properties)\nProperty\nType\nDescription\nCachedAvatars\nTArray<FAvatarMemoryCacheData>\nThe avatar URL or shortcode used to load the avatar from the web.\nPublic Functions\n[](#public-functions)\nFunction\nReturns\nText\nPreload(const TArray& PreloadDataList, const FAvatarPreloadCompleted& OnPreloadCompleted)\nvoid\nPreloads the avatar data so the avatars would be instantiated instantly when loading them from the ReadyPlayerMeComponent.\nGetAvatarCacheData(const FString& Url, UReadyPlayerMeAvatarConfig* AvatarConfig) const\nFAvatarMemoryCacheData \nReturns the preload avatar data for a specific avatar.\nAddAvatar(const FString& Url, UReadyPlayerMeAvatarConfig* AvatarConfig, USkeletalMesh* SkeletalMesh, const FAvatarMetadata& Metadata)\nvoid\nAdds an already loaded avatar to the memory cache.\nRemoveAvatar(const FString& Url)\nvoid\nRemoves specific avatar data from the memory cache.\nRemoveAvatar()\nvoid\nClears all avatars from the memory cache.\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermecomponent-1",
            "title": "ReadyPlayerMeMemoryCache"
        }
    },
    {
        "page_content": "ReadyPlayerMeCustomMorphGroup\nBase data asset class for providing custom morph targets to the avatar config. For customization create a Blueprint data asset subclass.\nProperties\n[](#properties)\nProperty\nType\nDescription\nMorphTargets\nTSet<EAvatarMorphTarget>\nThe selected morph targets will be included in the avatar.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermecustommorphgroup",
            "title": "ReadyPlayerMeCustomMorphGroup"
        }
    },
    {
        "page_content": "ReadyPlayerMeFunctionLibrary\nStatic functions to be used from the Blueprint.\nPublic Functions\n[](#public-functions)\nFunction\nReturns\nDescription\nClearAvatarCache()\nvoid\nEmpty the avatar cache.\nClearAvatar(const FString& Guid)\nvoid\nClears a specific avatar from persistent cache.\nIsAvatarCacheEmpty()\nbool\nIs there any avatars present in the persistent cache.\nGetAvatarCount()\nint32\nTotal Avatars stored in persistent cache.\nGetCacheSize()\nint64\nTotal Avatars stored in persistent cache.\nGetAvatarGuid(const FString& UrlShortcode)\nFString\nGet unique id of the avatar.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermefunctionlibrary",
            "title": "ReadyPlayerMeFunctionLibrary"
        }
    },
    {
        "page_content": "ReadyPlayerMeMorphTargetGroup\nPublic Functions\n[](#public-functions)\nFunction\nReturns\nDesicription\nGetTargets(\nTSet& Groups, TSet& Targets) const {};\nvoid\nBase data asset class that provides morph targets to the Avatar Config.\nDo not override this class for customization; override the Standard or Custom TargetGroup instead.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermemorphtargetgroup",
            "title": "ReadyPlayerMeMorphTargetGroup"
        }
    },
    {
        "page_content": "ReadyPlayerMeRenderLoader\nThe AvatarRenderLoader class is used for loading a 2D render of the avatar.\nReadyPlayerMeRenderLoader\n is responsible for loading the rendered image from the \nModelUrl\n. \nPublic Functions\n[](#public-functions)\nFunction\nReturns\nDescription\nvoid Load(const FString& ModelUrl, \nconst ERenderSceneType& SceneType, \n\nconst TMap<EAvatarMorphTarget, float>& BlendShapes\n, \nconst FDownloadImageCompleted& OnCompleted, \nconst FDownloadImageFailed& OnFailed)\nvoid\nLoads the rendered image.\nLoad() Parameters\n[](#load-parameters)\nParameter\nDescription\nconst FString& ModelUrl\nModel url.\nconst ERenderSceneType& SceneType\nThe type of the scene where the avatar should be rendered.\nconst TMap<EAvatarMorphTarget, float>& BlendShapes\nMap of the blend shapes and values for them.\nconst FDownloadImageCompleted& OnCompleted\nSuccess callback. Called when the render is loaded and provides the avatar texture as an argument.\nconst FDownloadImageFailed& OnFailed\nFailure callback. If the render operation fails, the failure callback will be called.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermerenderloader",
            "title": "ReadyPlayerMeRenderLoader"
        }
    },
    {
        "page_content": "ReadyPlayerMeSettings\nProperties\n[](#properties)\nProperty\nType\nDescription\nbEnableAvatarCaching\nbool\nIf checked, the loaded avatars will be saved in local storage.\nPublic Functions\n[](#public-functions)\nFunction\nReturns\nDescription\nSetAvatarCaching(bool bEnableCaching);\nvoid\nEnables (true) or disables (false) avatar caching.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermesettings",
            "title": "ReadyPlayerMeSettings"
        }
    },
    {
        "page_content": "ReadyPlayerMeStandardMorphGroup\nBase data asset class for providing standard morph targets to the Avatar Config. For customization create a Blueprint data asset subclass.\nPublic Functions\n[](#public-functions)\nFunction\nReturns\nDescription\nGetTargets(TSet& Groups, TSet& Targets) \nconst override { Groups = MorphTargetGroups; };\nvoid\nThe selected morph target groups will be included in the avatar.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermestandardmorphgroup",
            "title": "ReadyPlayerMeStandardMorphGroup"
        }
    },
    {
        "page_content": "ReadyPlayerMeTypes\n// Copyright \u00c2\u00a9 2021++ Ready Player Me\n#pragma once\n\u00e2\u20ac\u2039\n#include \"ReadyPlayerMeTypes.generated.h\"\n\u00e2\u20ac\u2039\nUENUM(BlueprintType)\nenum class EAvatarGender : uint8\n{\n\tUndefined UMETA(DisplayName = \"Gender Undefined\"),\n\tMasculine UMETA(DisplayName = \"Gender Masculine\"),\n\tFeminine UMETA(DisplayName = \"Gender Feminine\")\n};\n\u00e2\u20ac\u2039\nUENUM(BlueprintType)\nenum class EAvatarBodyType : uint8\n{\n\tUndefined UMETA(DisplayName = \"Undefined Body Type\"),\n\tFullBody UMETA(DisplayName = \"Full Body Type\"),\n\tHalfBody UMETA(DisplayName = \"Half Body Type\")\n};\n\u00e2\u20ac\u2039\nUSTRUCT(BlueprintType)\nstruct FAvatarMetadata\n{\n\tGENERATED_BODY()\n\u00e2\u20ac\u2039\n\tUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"ReadyPlayerMe\")\n\tEAvatarBodyType BodyType;\n\u00e2\u20ac\u2039\n\tUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"ReadyPlayerMe\")\n\tEAvatarGender OutfitGender;\n\u00e2\u20ac\u2039\n\tUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"ReadyPlayerMe\")\n\tint32 OutfitVersion;\n\u00e2\u20ac\u2039\n\tUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"ReadyPlayerMe\")\n\tFString LastModifiedDate;\n\u00e2\u20ac\u2039\n\tFAvatarMetadata()\n\t{\n\t\tBodyType = EAvatarBodyType::Undefined;\n\t\tOutfitGender = EAvatarGender::Undefined;\n\t\tOutfitVersion = 1;\n\t}\n};\n\u00e2\u20ac\u2039\nUENUM(BlueprintType)\nenum class EStandardMorphTargetGroup : uint8\n{\n\tNone UMETA(DisplayName = \"None\"),\n\tArKit UMETA(DisplayName = \"ArKit\"),\n\tOculus UMETA(DisplayName = \"Oculus Viseme\")\n};\n\u00e2\u20ac\u2039\nUENUM(BlueprintType)\nenum class EAvatarMorphTarget : uint8\n{\n\t// Oculus Viseme blend shapes\n\tViseme_aa UMETA(DisplayName = \"Viseme_aa\"),\n\tViseme_E UMETA(DisplayName = \"Viseme_E\"),\n\tViseme_I UMETA(DisplayName = \"Viseme_I\"),\n\tViseme_O UMETA(DisplayName = \"Viseme_O\"),\n\tViseme_U UMETA(DisplayName = \"Viseme_U\"),\n\tViseme_CH UMETA(DisplayName = \"Viseme_CH\"),\n\tViseme_DD UMETA(DisplayName = \"Viseme_DD\"),\n\tViseme_FF UMETA(DisplayName = \"Viseme_FF\"),\n\tViseme_kk UMETA(DisplayName = \"Viseme_kk\"),\n\tViseme_nn UMETA(DisplayName = \"Viseme_nn\"),\n\tViseme_PP UMETA(DisplayName = \"Viseme_PP\"),\n\tViseme_RR UMETA(DisplayName = \"Viseme_RR\"),\n\tViseme_sil UMETA(DisplayName = \"Viseme_sil\"),\n\tViseme_SS UMETA(DisplayName = \"Viseme_SS\"),\n\tViseme_TH UMETA(DisplayName = \"Viseme_TH\"),\n\u00e2\u20ac\u2039\n\t// ArKit blend shapes\n\tBrowDownLeft UMETA(DisplayName = \"BrowDownLeft\"),\n\tBrowDownRight UMETA(DisplayName = \"BrowDownRight\"),\n\tBrowInnerUp UMETA(DisplayName = \"BrowInnerUp\"),\n\tBrowOuterUpLeft UMETA(DisplayName = \"BrowOuterUpLeft\"),\n\tBrowOuterUpRight UMETA(DisplayName = \"BrowOuterUpRight\"),\n\tEyeBlinkLeft UMETA(DisplayName = \"EyeBlinkLeft\"),\n\tEyeBlinkRight UMETA(DisplayName = \"EyeBlinkRight\"),\n\tEyeSquintLeft UMETA(DisplayName = \"EyeSquintLeft\"),\n\tEyeSquintRight UMETA(DisplayName = \"EyeSquintRight\"),\n\tEyeWideLeft UMETA(DisplayName = \"EyeWideLeft\"),\n\tEyeWideRight UMETA(DisplayName = \"EyeWideRight\"),\n\tJawOpen UMETA(DisplayName = \"JawOpen\"),\n\tJawForward UMETA(DisplayName = \"JawForward\"),\n\tJawLeft UMETA(DisplayName = \"JawLeft\"),\n\tJawRight UMETA(DisplayName = \"JawRight\"),\n\tNoseSneerLeft UMETA(DisplayName = \"NoseSneerLeft\"),\n\tNoseSneerRight UMETA(DisplayName = \"NoseSneerRight\"),\n\tCheekPuff UMETA(DisplayName = \"CheekPuff\"),\n\tCheekSquintLeft UMETA(DisplayName = \"CheekSquintLeft\"),\n\tCheekSquintRight UMETA(DisplayName = \"CheekSquintRight\"),\n\tMouthSmileLeft UMETA(DisplayName = \"MouthSmileLeft\"),\n\tMouthSmileRight UMETA(DisplayName = \"MouthSmileRight\"),\n\tMouthLeft UMETA(DisplayName = \"MouthLeft\"),\n\tMouthRight UMETA(DisplayName = \"MouthRight\"),\n\tMouthClose UMETA(DisplayName = \"MouthClose\"),\n\tMouthFunnel UMETA(DisplayName = \"MouthFunnel\"),\n\tMouthDimpleLeft UMETA(DisplayName = \"MouthDimpleLeft\"),\n\tMouthDimpleRight UMETA(DisplayName = \"MouthDimpleRight\"),\n\tMouthStretchLeft UMETA(DisplayName = \"MouthStretchLeft\"),\n\tMouthStretchRight UMETA(DisplayName = \"MouthStretchRight\"),\n\tMouthRollLower UMETA(DisplayName = \"MouthRollLower\"),\n\tMouthRollUpper UMETA(DisplayName = \"MouthRollUpper\"),\n\tMouthPressLeft UMETA(DisplayName = \"MouthPressLeft\"),\n\tMouthPressRight UMETA(DisplayName = \"MouthPressRight\"),\n\tMouthUpperUpLeft UMETA(DisplayName = \"MouthUpperUpLeft\"),\n\tMouthUpperUpRight UMETA(DisplayName = \"MouthUpperUpRight\"),\n\tMouthFrownLeft UMETA(DisplayName = \"MouthFrownLeft\"),\n\tMouthFrownRight UMETA(DisplayName = \"MouthFrownRight\"),\n\tMouthPucker UMETA(DisplayName = \"MouthPucker\"),\n\tMouthShrugLower UMETA(DisplayName = \"MouthShrugLower\"),\n\tMouthShrugUpper UMETA(DisplayName = \"MouthShrugUpper\"),\n\tMouthLowerDownLeft UMETA(DisplayName = \"MouthLowerDownLeft\"),\n\tMouthLowerDownRight UMETA(DisplayName = \"MouthLowerDownRight\"),\n\u00e2\u20ac\u2039\n\t// Additional blend shapes\n\tMouthOpen UMETA(DisplayName = \"MouthOpen\"),\n\tMouthSmile UMETA(DisplayName = \"MouthSmile\"),\n\tEyesClosed UMETA(DisplayName = \"EyesClosed\"),\n\tEyesLookUp UMETA(DisplayName = \"EyesLookUp\"),\n\tEyesLookDown UMETA(DisplayName = \"EyesLookDown\"),\n\u00e2\u20ac\u2039\n\tEyeLookDownLeft UMETA(DisplayName = \"EyeLookDownLeft\"),\n\tEyeLookInLeft UMETA(DisplayName = \"EyeLookInLeft\"),\n\tEyeLookOutLeft UMETA(DisplayName = \"EyeLookOutLeft\"),\n\tEyeLookUpLeft UMETA(DisplayName = \"EyeLookUpLeft\"),\n\tEyeLookDownRight UMETA(DisplayName = \"EyeLookDownRight\"),\n\tEyeLookInRight UMETA(DisplayName = \"EyeLookInRight\"),\n\tEyeLookOutRight UMETA(DisplayName = \"EyeLookOutRight\"),\n\tEyeLookUpRight UMETA(DisplayName = \"EyeLookUpRight\"),\n\tTongueOut UMETA(DisplayName = \"TongueOut\"),\n};\n\u00e2\u20ac\u2039\nDECLARE_DYNAMIC_DELEGATE_TwoParams(FAvatarDownloadCompleted, class UglTFRuntimeAsset*, Asset, const FAvatarMetadata&, Metadata);\n\u00e2\u20ac\u2039\nDECLARE_DYNAMIC_DELEGATE(FAvatarLoadCompleted);\n\u00e2\u20ac\u2039\nDECLARE_DYNAMIC_DELEGATE_OneParam(FAvatarLoadFailed, const FString&, ErrorMessage);\n\u00e2\u20ac\u2039\nDECLARE_DYNAMIC_DELEGATE_OneParam(FDownloadImageCompleted, class UTexture*, Texture);\n\u00e2\u20ac\u2039\nDECLARE_DYNAMIC_DELEGATE_OneParam(FDownloadImageFailed, const FString&, ErrorMessage);\n\u00e2\u20ac\u2039\nUENUM(BlueprintType)\nenum class ERenderSceneType : uint8\n{\n\tFullBodyPortrait UMETA(DisplayName = \"Full Body Portrait\"),\n\tHalfBodyPortrait UMETA(DisplayName = \"Half Body Portrait\"),\n\tFullBodyPortraitTransparent UMETA(DisplayName = \"Full Body Portrait Transparent\"),\n\tHalfBodyPortraitTransparent UMETA(DisplayName = \"Half Body Portrait Transparent\"),\n\tFullBodyPostureTransparent UMETA(DisplayName = \"Full Body Posture Transparent\")\n};\n\u00e2\u20ac\u2039\nstruct FAvatarUri\n{\n\tFString Guid;\n\tFString ModelUrl;\n\tFString LocalModelPath;\n\tFString MetadataUrl;\n\tFString LocalMetadataPath;\n\tFString LocalAvatarDirectory;\n};\n\u00e2\u20ac\u2039\nDECLARE_LOG_CATEGORY_EXTERN(LogReadyPlayerMe, Log, All);\n\u00e2\u20ac\u2039",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermetypes",
            "title": "ReadyPlayerMeTypes"
        }
    },
    {
        "page_content": "Avatar Shortcodes\nUse a single short code instead of a URL to retreive an avatar.\nAn avatar shortcode is a unique 6-digit combination of numbers and letters that identifies an avatar. You can use this shortcode instead of the URL in most places in your project, for example, to retrieve avatars into your application. \nHere is an example of a URL that uses a shortcode: \nhttps://readyplayer.me/api/avatar/\nRWS7XA\nFor users, this is especially useful for VR and mixed reality applications where avatar creation via WebView is difficult and entering a URL is unwieldy.\nThis is an example of how the shortcode is presented to the user at the end of avatar creation, if enabled.\n\u200b\n\u200b\nYou can use shortcodes with the Ready Player Me Unity and Unreal Engine SDKs.\nEnabling shortcodes\n[](#enabling-shortcodes)\nEnable the \nAvatar Shortcode\n setting to show users the avatar shortcode. Note that entering or clicking a shortcode in the browser will download the avatar GLB. (Example: \n[https://readyplayer.me/api/avatar/KJIXZB](https://readyplayer.me/api/avatar/KJIXZB)\n)\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator/avatar-shortcodes",
            "title": "Avatar Shortcodes"
        }
    },
    {
        "page_content": "Avatar URLs\nEvery avatar has a unique URL.\nEvery avatar created with the Avatar Creator is assigned a unique URL. \nThe URL is unique across all Ready Player Me subdomains.\nThe URL inlcudes a reference to the .GLB file for the avatar. \nPasting the URL into a browser will download the file. \nWhen an avatar is updated, or changed by the user, these changes will be reflected via the same URL.\nIf you use Avatar Configurations in your URL, there is a different URL for each configutation.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator/avatar-urls",
            "title": "Avatar URLs"
        }
    },
    {
        "page_content": "Skinning and testing\nVerify your design on a moving model.\nTo make sure your designs work when the model moves, use the provided static and animated \n[full-body templates](https://readyplayerme-art-team.s3.amazonaws.com/Templates-for-external/ReadyPlayerMe-full-body-templates.zip)\n to skin and test your outfits.\n\u200b\n[Animations testing in Mixamo](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits/skinning-and-testing#animations-testing-in-mixamo)\n\u200b\n\u200b\n[Skinning and testing in Blender](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits/skinning-and-testing#skinning-and-testing-in-blender)\n\u200b\nAnimations testing in Mixamo\n[](#animations-testing-in-mixamo)\nReday Player Me rigs are compatible with \n[Mixamo](https://www.mixamo.com/)\n animations, which means you can test your outfit's mesh deformation with animations in your browser using Mixamo.\n1.\nRemove the roughness map from your FBX file to avoid errors when uploading to Mixamo.\n2.\nExport your updated FBX file.\n3.\nGo to the \n[Mixamo](https://www.mixamo.com/)\n website, login if necessary, and click \nUpload Character\n in the right sidebar.\n4.\nSelect the FBX for your character, wait until uploading is finished, and click \nNext\n.\n5.\nIn the panel on the left, pick an animation to test.\nSkinning and testing in Blender\n[](#skinning-and-testing-in-blender)\n1.\nOpen your full-body outfit in Blender.\n2.\nImport the downloaded test FBX file.\n3.\nSelect the clothing part and retarget its Armature to the Armature-skinning-test. \n4.\nRetarget all other elements of your outfit.\n\n\n5.\nPlay the animation.\n\n\n6.\nAdjust the Weight Paints, if needed.\n7.\nOnce you see no more clipping or other issues, retarget the outfit back to the \nArmature\n and delete the skinning test files.\nThe final blend file should not contain any extra information, only the full-body outfit and the \nArmature\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits/skinning-and-testing",
            "title": "Skinning and testing"
        }
    },
    {
        "page_content": "Validation tool for Blender\nIn order to complete uploading, an asset has to pass validation.\nIn order to complete uploading in Ready Player Me Studio, and be available to users, an asset has to meet Ready Player Me requirements. The Ready Player Me Asset Validation tool tests an asset and provides a list of issues for you to fix so it can pass validation.\nThis tool is still under development. \nThe Validation tool is currently only available for Windows. \nInstallation and Setup\n[](#installation-and-setup)\n1.\n\u200b\n[Download the Ready Player Me Blender tools.](https://drive.google.com/drive/folders/1cT4jPOTeUD95Jws8gkflhprfKrlnttvy)\n\u200b\n2.\nExtract the files on your local machine (into a folder that's not called BlenderTools). \n3.\nStart Blender 3.0\n4.\nOpen \nEdit > Preferences.\n5.\nIn the \nBlender Preferences\n window, in the left-hand navigation, click \nFile Paths\n.\n6.\nAt the top, expand the \nData \ntab.\n7.\nIn \nScripts\n, add the \nBlenderTools folder\n. \n\n\n8.\nExit and restart Blender with admin rights. For example, on Windows, right-click the Blender icon and choose \nRun As Administrator\n.\n9.\nSelect \nEdit > Preferences\n.\n10.\nIn the left-hand navigation, click \nAdd-ons\n.\n11.\nAt the top, make sure that \nEnabled Add-ons Only\n is \nunchecked\n.\n12.\nAt the top right, enter \"pyblish\" into the search bar. \nThis should display two add-ons. If they do not appear, check for folder nesting from unzipping (that is commonly, BlenderTools/BlenderTools!). \n13.\nEnable the plugins  \nGeneric: Pyblish Blender\n and \nGeneric: Pyblish Wolf3D\n. (Ignore the warning triangle.)\n\n\n14.\nClick the small dropdown arrow to the left of \nGeneric: Pyblish Blender\n.\n15.\nClick \nInstall Dependencies\n (it will turn blue). If everything went well, you should now see the PyQt5 version displayed.\n\n\n16.\nType \"validator\" in the search bar.\n17.\nEnable the \nGeneric: Ready Player Me - asset validator\n plugin.\n18.\nRestart Blender. You do not need to run it as administrator.\n19.\nIn the \n3D Viewport Editor\n, locate the new\n Validation GUI \ntab.\n20.\nClick \nValidation GUI\n to open the Validation tool. \n\n\nNotice the\n Import & Validate\n button next to Validation GUI. - It allows you to import a glTF file and run it through the validator with just a few clicks.\n\u200b\nUsing the Validation tool\n[](#using-the-validation-tool)\nClick \nValidation GUI\n to validate the current Scene. Or click \nImport & Validate\n to choose a glTF file to run through the validator.\nThe \nvalidator \nwindow displays all assets found in the current Scene on the left side.\nClick \nCheck All\n to check your current Scene. (There is no feedback.)\nClick on an asset for a list of its passed and failed tests. \nChecks that \nfailed show in red\n.\nChecks that \nsucceeded show in green\n.\nChecks that are \nwarnings show in orange\n. We recommend you fix them as well. \nClick on a test for more details on it in the pane above.\nFor detailed information on a check, right-click it and visit the documentation page.\nThe Validation tool for Blender is still under development\nSome results may not be accurate. \nThe documentation is a work in progress.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits/validation-tool-for-blender",
            "title": "Validation tool for Blender"
        }
    },
    {
        "page_content": "Asset Manager in Studio\nUpload custom outfits in Studio and make them available in your apps.\nAsset Manager in Ready Player Me Studio allows Ready Player Me partners to upload, validate, publish, and manage custom outfits for avatars within the Studio dashboard in a self-serve manner.\nAsset Manager is currently in the Open Beta stage. During this time, you might experience unexpected bugs. In such cases, please submit your feedback here: \n[https://support.readyplayer.me/kb-tickets/new](https://support.readyplayer.me/kb-tickets/new)\n \nBenefits\n[](#benefits)\nPersonalize the user experience by uploading custom assets.\nValidate custom assets automatically upon upload.\nEnable or disable custom assets in your applications.\nCan be used by anyone on the team. No coding skills required.\nFeatures\n[](#features)\nModel upload\nOnly GLB (.glb) files are accepted.\nFile size: up to 10MB.\nModel type\nUploaded model has to be based on a full-body template.\nNote: Full-body does not include headgear such as hats or glasses.\n\u200b\n[Download the full-body templates](https://readyplayerme-art-team.s3.amazonaws.com/Templates-for-external/ReadyPlayerMe-full-body-templates.zip)\n to create custom outfits.\nSee \n[Create Custom Outfits](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits)\n for a  detailed guide and specifications for creating full-body avatars.\nValidation\nUpon upload, your model is automatically validated to check the asset for errors.\nRecommendation: Use the \n[Ready Player Me Blender plugin](https://drive.google.com/drive/folders/1cT4jPOTeUD95Jws8gkflhprfKrlnttvy)\n to verify your model during the creation process and before uploading.\nNote: You can use any 3D asset creation tool as long as it can output GLB files. We recommend Blender because we provide a validation plugin that you can use to ensure your custom outfit will pass validation when you upload it in Studio.\nModel preview\nDisplay of the uploaded model.\nGender\nChoose whether the uploaded model is for male or female avatar models. If you want to make the same outfit available for both male and female avatars, you need to upload them separately.\nPreview icon\nUpload an icon of your asset that will be displayed in the outfit list of the avatar editor.\nMax icon dimensions: 256x256 pixels.\nFile size: up to 5MB. We recommend a small icon (< 1MB) to improve UI download speed for users.\nAssign to application\nTo make an asset available to users, assign it to one or more of your applications.\nIf you do not assign the asset to an application, you can save it, but it will not be available to your users.\nEdit uploaded assets\nSaved custom assets can be edited by removing the current model or icon and uploading a different one.\nImportant: Editing existing assets will immediately affect users that use them. For example, if a user has your custom asset equipped, it will be changed once you edit it.\nAsset Manager overview\nList of your uploaded assets. You can sort by status, gender, and last updated.\nActive (checkmark) means the asset is available in one of your apps. Inactive (x) means the asset is saved but not assigned to an application. \nDeleting assets\nYou cannot currently delete uploaded assets. Instead, modify them. \nSteps for uploading and managing custom outfits\n[](#steps-for-uploading-and-managing-custom-outfits)\n1.\nGo to \n[Ready Player Me Studio](https://studio.readyplayer.me/)\n and login. \n2.\nIn the side navigation, click \nAsset Manager\n.\n3.\nClick \nAdd new asset\n. \n4.\nFill in the information on the \nAdd new asset\n screen, as described below. \nAsset name:\n Name of the asset. \nGender:\n Select male or female. If your outfit fits both models, you need to create an asset for each. \nModel:\n Upload a .glb file (< 10MB) of the custom outfit. \nPreview icon:\n Upload a square-shaped icon (< 5MB, 256x256 max) that will be displayed as a preview of your outfit in the avatar editor, as shown below.\nApplications:\n List of your applications. Check an application to make your outfit available to users of this application.\nIf you don't select an application, the outfit is saved, but it won't be available to users.\nAdd \nor \nSave\n button: The new or edited asset is validated and saved.\nIf validation fails, you receive a notification, and a pink outline marks the asset preview. Below the asset preview (you may need to scroll), click \nValidation log\n to open a JSON file of your errors. See \n[Error handling](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits/asset-manager-in-studio#handling-errors)\n for details.\nIf validation is successful, you receive a \u201cValidation successful\u201d notification and the uploaded model preview is displayed.\nOnce you have saved your new asset, you are returned to the \nAsset Manager\n page.\nManaging custom outfits\n[](#managing-custom-outfits)\nThe \nAsset Manager\n page lists your custom assets.\nName \nand preview icon identify your asset. \nActive:\n Indicates whether the asset is assigned to an application. Active (checkmark) means the asset is available in one of your apps. Inactive (x) means the asset is saved but not assigned to an application.\nGender\n: Asset fits male or female model.\nType:\n Type of the asset. \nLast updated:\n Date and time of the last changes.\nTo edit an asset, click its name. \nNote: If you replace the model, it will go through validation again before you can save the asset.\n\u200b\nError handling\n[](#error-handling)\nIf asset validation fails, you receive a notification, and a pink outline marks the asset preview.  \n1.\nBelow the asset preview (you may need to scroll), look for the \nValidation log\n button.\n2.\nClick \nValidation log\n to open a JSON file of your errors.\n3.\nClick \nCopy log\n to copy the file contents to your clipboard. \n4.\nPaste the contents into a text file and save it for further use.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits/asset-manager-in-studio",
            "title": "Asset Manager in Studio"
        }
    },
    {
        "page_content": "Manage custom outfits using the API\nCreate UGC tools or embed Ready Player Me in your content pipeline.\nYou can embed the outfit management into your pipeline using the Assets endpoints of the Ready Player Me API. It also enables you to create tools to create UGC tools on top of the APIs.\nGet and authorize with an API Key\n[](#get-and-authorize-with-an-api-key)\nFor all subsequent requests to the Asset endpoints, you need an API Key. Please go to \n[Studio -> API Keys](https://studio.readyplayer.me/developer-tools/api-keys/)\n to create one.\nYou can authorize by adding x-api-key to the header of the request.\n--header 'x-api-key: {your-api-key}'\nUpload a custom outfit\n[](#upload-a-custom-outfit)\n1. Create the asset meta-data.\n[](#1.-create-the-asset-meta-data.)\nAn \"asset\" can be seen as the meta-data of an asset model. Therefore it contains a name, type, gender, URLs for the 3D-model and the icon, etc. but not the asset itself.\npost\nhttps://api.readyplayer.me/v1\n/assets\nUse this endpoint to create a new asset\nTo create an asset, the URL of a 3D model and an icon is optional. You can update it later or upload a Model / Icon using the respective POST commands (Upload Model, Upload Asset).\nIf you specify a model URL, it will trigger the validation of the model. Please check out all details about the validation in the 3D asset creation guide. In case of a negative validation, you will be returned the validation errors in the response, and the asset will not be created.\nIf you specify an icon URL, it will check its max dimensions of 256x256 and max file size of 5MB. In case of a negative validation, you will be returned the validation errors in the response, and the asset will not be created.\nOnce an asset is created and has a valid model and icon, it can be added to an application. By default, an asset does not belong to any application and therefore is also not visible in the avatar creator.\n2. Upload or Update an Icon\n[](#2.-upload-or-update-an-icon)\nAn Icon is needed to show the asset in the avatar-creator for the end user.\nYou can either use the URL parameter in the \n[Create Asset](https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits/manage-custom-outfits-using-the-api#1.-create-the-asset-meta-data.)\n command to upload an Icon, or use the POST to upload the image itself. Therefore the asset needs to exist already.\npost\nhttps://api.readyplayer.me/v1\n/assets/:id/icon\nUse this endpoint to upload the icon for an asset\nRecommended Specs: .png or .jpg with a dimension of 256x256 pixel max. The image may not exceed 5MB. However, for the best loading speed of the avatar creator, you should optimize the image size.\n3. Upload or Update the 3D Model\n[](#3.-upload-or-update-the-3d-model)\nYou need to have a Ready Player Me compatible full-body outfit. \n[You can learn how to create one  in this guide here](https://docs.readyplayer.me/ready-player-me/customizing-guides/create-custom-outfits)\n.\nYou can use the URL parameter in the Create Asset command to upload a 3D model or the POST to upload the model itself separately. For the second approach, the asset needs to exist already.\nOnce the model is uploaded, it will trigger the validation of the model. Please check out all details about the validation in the 3D asset creation guide. In case of a negative validation, you will be returned the validation errors in the response, and the asset will not be created.\npost\nhttps://api.readyplayer.me/v1\n/assets/:id/model\nUse this endpoint to upload the model for an asset\n4. Add an asset to an application\n[](#4.-add-an-asset-to-an-application)\nIn Studio (Developer Dashboard), you need to create an Application for every game or app you create. Each application has an Application ID, which you can find in the URL of the page.\nAfter you obtain the Application ID, you can make a POST request to the following endpoint:\npost\nhttps://api.readyplayer.me/v1\n/assets/:id/application\nUse this endpoint to add an asset to an application\nAfter getting the success message, you should be able to see your custom asset in your avatar creator \nhttps://[yoursubdomain].readyplayer.me\n.\n5. Remove the asset from the application\n[](#5.-remove-the-asset-from-the-application)\nWhen you no longer want to have the asset available in your avatar creator, you can remove it from the application.\ndelete\nhttps://api.readyplayer.me/v1\n/assets/:id/application\nUse this endpoint to remove an asset from an application\n6. Get all custom assets\n[](#6.-get-all-custom-assets)\nYou can retrieve a paginated, ordered list of all uploaded assets in your organization.\nget\nhttps://api.readyplayer.me/v1\n/assets\nList Assets\nCurrently, it is not possible to apply any filters to the request. So you need to fetch the list and query it on your end.\nFull API Reference\n[](#full-api-reference)\nTo see example requests, please check out the \n[REST API Reference](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/customizing-guides/upload-and-manage-custom-outfits/manage-custom-outfits-using-the-api",
            "title": "Manage custom outfits using the API"
        }
    },
    {
        "page_content": "Account Linking\nLink Ready Player Me accounts to your user profiles.\nAccount Linking allows end-users to link their Ready Player Me account to your app/game account, so they won't have to log in again when they return to your app. This is particularly useful for cross-device experiences when session information is lost.\nPrerequisites\n[](#prerequisites)\nServer Component\n\nThe endpoints should be called from a server to keep your API Key secure. So we recommend you set up a server component and have all account linking logic connected to your user management in the backend.\nGet your API Key\nThis can be found within Ready Player Me Studio on the left-hand navigation panel or directly \n[here](https://studio.readyplayer.me/developer-tools/api-keys)\n. You will need the API Key for all API-Requests. See \n[authorizing requests.](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/account-linking#authorizing-requests)\n\u200b\nAuthorization for existing Ready Player Me users\n[](#authorization-for-existing-ready-player-me-users)\nUsers with a Ready Player Me account can authorize your application to create/modify avatars by entering their credentials in the Avatar Creator. They do that by clicking the sign-in with Ready Player Me button within the iFrame.\n\u200b\n\u200b\n\u200b\n\u200b\nOnce the user authorizes, you will be returned it\u2019s User-ID from the iFrame. Therefore you need to subscribe to the postMessage event \nv1.user.authorized\n from the iFrame\n\u200b\n[Read more on postMessage events](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/avatar-creator-integration)\n\u200b\nYou will need the User ID to login on behalf of your user with an API request. (See next chapter)\nLogin on behalf of a user and request a token.\n[](#login-on-behalf-of-a-user-and-request-a-token.)\nAfter getting authorized by the end-user and having his/her userId, you can request an access token for this user, which you can use to open the Avatar Creator in the iFrame or WebView.\n1.\nGET Request\nGET\nhttps\n://\napi\n.\nreadyplayer\n.\nme\n/\nv1\n/\nauth\n/\ntoken\n?\nuserId\n=\n{\nuserId\n}\n&\npartner\n=\n{\nyourSubdomain\n}\nIf the user authorized your app before, and your credentials are valid, you will receive a token to use in the next step to open the iFrame.\nSample Response:\n{\n \n\"data\"\n:\n \n{\n \n\"token\"\n:\n \u201ceyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n...\n\u201d\n \n}\n}\n1.\nAdd this token to the main ReadyPlayerMe URL you use in the iframe or WebView.\niframe\n.\nsrc \n=\n \n'https://{your-subdomain}.readyplayer.me/avatar?frameApi&token={token}'\nThe user should be logged in and have access to his/her avatars within the iFrame.\nThe token lives for 15 seconds, so you must request it right before using it.\nAuthorizing requests\n[](#authorizing-requests)\nTo successfully authorize API calls, use your organization\u2019s API key as a value of the \nX-API-Key\n header:\n--header 'x-api-key\n:\n \n{\nyour-api-key\n}\n'\nYou can create an API Key in \n[Studio](https://studio.readyplayer.me/developer-tools/api-keys)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/account-linking",
            "title": "Account Linking"
        }
    },
    {
        "page_content": "Guest Accounts\nYou can create a Ready Player Me Guest Account for every user on your end. That is helpful when you want to store the state of the avatars and assets for your users without them having a Ready Player Me account. This also reduces friction in the user experience.\nPrerequisites\n[](#prerequisites)\nGet your application id\nFor the request, you need an \napplication id\n. Therefore, you must be signed up in Studio (\n[https://studio.readyplayer.me](https://studio.readyplayer.me)\n) and click on the application. You will find the app-id in the header of the application page.\nServer Component\n\nThe endpoints should be called from a server to keep your API Key secure. So we recommend you set up a server component and have all guest-account creation logic connected to your user management in the backend.\nGet your API Key\n\nThis can be found within Ready Player Me Studio on the left hand navigation panel or directly \n[here](https://studio.readyplayer.me/developer-tools/api-keys)\n. You will need the API Key for all API-Requests. See \n[authorizing requests.](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/guest-accounts#authorizing-requests)\n\u200b\nCreate a guest account\n[](#create-a-guest-account)\nWith an API call, you can create a guest account. You will be returned a user-id for an account that has already authorized your application to create/modify avatars.\nPOST Request to create a user\nPOST\nhttps\n://\napi\n.\nreadyplayer\n.\nme\n/\nv1\n/\nusers\nRequest body:\n{\n \n\"data\"\n:\n \n{\n \n\"applicationId\"\n:\n \n\"{your-application-id}\"\n \n}\n}\nResponse:\n{\n \n\"data\"\n:\n \n{\n \n\"partners\"\n:\n \n[\n \n\"{{your-partner-name}}\"\n \n],\n \n\"applicationIds\"\n:\n \n[\n \n\"{{your-application-id}}\"\n \n \n],\n \n\"createdAt\"\n:\n \n\"2023-03-01T15:57:15.517Z\"\n,\n \n\"updatedAt\"\n:\n \n\"2023-03-01T15:57:15.517Z\"\n,\n \n\"id\"\n:\n \n\"63ff75dbb63b7b5808ab07e0\"\n \n// userId for the created user\n \n}\n}\nWith that User-ID, you can then request the token for the iFrame \n[as explained here (Account Linking)](https://www.notion.so/Account-Linking-f89321b01dad45899bfbbb7d2226ce44?pvs=21)\n\u200b\nTransfer avatars and assets to an existing Ready Player Me Account\n[](#transfer-avatars-and-assets-to-an-existing-ready-player-me-account)\nFor users with a guest account, it is also possible to sign in with their existing Ready Player Me account. They will be asked to transfer their avatars and assets from the guest account to their Ready Player Me account.\nAfter clicking on the Sign-In button, the user will be prompted with this message.\nThe iFrame also emits the \nv1.events.authorized\n event with the new User-ID. You need to replace the User-ID (from your Guest-Account) with the new User-ID (from the regular Ready Player Me Account).\nPlease note that the guest account is being marked for deletion after merging, and you will be returned a new user-id.\nAuthorizing requests\n[](#authorizing-requests)\nTo successfully authorize API calls, use your organization\u2019s API key as a value of the \nX-API-Key\n header:\n--header 'x-api-key\n:\n \n{\nyour-api-key\n}\n'\nYou can create an API Key in \n[Studio](https://studio.readyplayer.me/developer-tools/api-keys)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/guest-accounts",
            "title": "Guest Accounts"
        }
    },
    {
        "page_content": "Avatar Creator Integration\nIntegrate the Ready Player Me Avatar Creator in your React application.\nIn the Quickstart guide, you were introduced to the process of integrating the \nAvatarCreatorViewer\n component. This aims to get started quickly on the entire flow of creating and loading an avatar.\nIn case you want to visualize your avatar separately from the creator, you can use \nAvatarCreator\n component to receive configured Avatar URL and load it with your custom visualization layer. \nImport and show the AvatarCreator\n[](#import-and-show-the-avatarcreator)\nOnce the package is installed (see \n[Quickstart](https://docs.readyplayer.me/ready-player-me/integration-guides/react/quickstart)\n), you can import the \nAvatarCreator\n component and bring it to your React project. You will be expected to pass your subdomain as a parameter to the component.\nimport\n \n{\n AvatarCreator \n}\n \nfrom\n \n'@readyplayerme/rpm-react-sdk'\n;\n\u200b\nexport\n \ndefault\n \nfunction\n \nApp\n()\n \n{\n \nreturn\n \n(\n \n<\ndiv\n>\n \n<\nAvatarCreator\n \nsubdomain\n=\n\"\nyour_subdomain\n\"\n/>\n \n</\ndiv\n>\n \n);\n}\nConfigure the AvatarCreator\n[](#configure-the-avatarcreator)\nWhen you use Ready Player Me in an iframe, you can use certain URL parameters to customize it to fit your use case. \nAvatarCreator\n component can take an \neditorConfig\n parameter which helps you with this.\nparameter\ntype\neffect\nlanguage\nstring\nSets the \n[default language](https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator#default-language)\n of the creator.\nbodyType\n\"halfbody\" | \"fullbody\"\nInstead of select page, starts with given option.\nquickStart\nboolean\nStart with a \n[quick start ](https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator#quick-start-for-users)\navatar selection.\nclearCache\nboolean\nIf disabled previous avatar will not be loaded.\nconst\n config\n:\n EditorConfig  \n=\n \n{\n  clearCache\n:\n \ntrue\n;\n  bodyType\n:\n \n'halfbody'\n;\n  quickStart\n:\n \n'false'\n;\n  language\n:\n \n'pl'\n;\n};\n\u200b\n<\nAvatarCreator\n \nsubdomain\n=\n\"\ndemo\n\"\n \neditorConfig\n=\n{\nconfig\n}\n \n/>\nConfigure the avatar output (Optimize for quality / speed)\n[](#configure-the-avatar-output-optimize-for-quality-speed)\nThe AvatarCreator returns a URL to an avatar .glb file. A sample URL looks like that:\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb\nWith the Avatar API, it is possible to pass various parameters to this URL to request a better-optimized, but lower-quality avatar - which could result in an avatar URL like this with a meshLod=2\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?meshLod=2\nTo achieve this within your project, you can now pass an avatar config to the AvatarCreator component, which adds necessary parameters to the exported avatar URL to help you download or import with a set of optimization options. You can read more about these options \n[here](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-3d-avatars)\n.\nparameter\ntype\neffect\nquality\n\"low\" | \"medium\" | \"high\"\nQuality presets.\nmeshLod\n0 | 1 | 2\nChanges mesh detail.\ntextureSizeLimit\nnumber\nMaximum size for each texture.\ntextureAtlas\n\"none\" | 256 | 512 | 1024\nSize of atlased texture.\ntextureChannels\narray\nTexture channels to load.\nmorphTargets\narray\nMorph targets to load.\npose\n\"A\" | \"T\"\nAvatar pose.\nuseHands\nboolean\nUse halfbody avatar hands.\nuseDracoCompression\nboolean\nUse Draco compression.\nuseMeshOptCompression\nboolean\nUse Mesh Opt compression.\nconst\n avatarConfig\n:\n AvatarConfig \n=\n \n{\n  meshLod\n:\n \n2\n,\n  textureAtlas\n:\n \n512\n,\n  morphTargets\n:\n \n'ARKit'\n,\n  pose\n:\n \n'T'\n,\n};\n \n<\nAvatarCreator\n \nsubdomain\n=\n\"\ndemo\n\"\n \navatarConfig\n=\n{\navatarConfig\n}\n \n/>\nReceive the results from AvatarCreator\n[](#receive-the-results-from-avatarcreator)\nYou can pass \nAvatarCreator\n callbacks to receive exported avatar's URL and the user's ID.\nconst\n \nhandleOnUserSet\n \n=\n \n(\nuserId\n:\n \nstring\n)\n \n=>\n \n{\n \nconsole\n.\nlog\n(\n`\nUser ID is: \n${\nuserId\n}\n`\n)\n};\n\u200b\nconst\n \nhandleOnAvatarExported\n \n=\n \n(\nurl\n;\n:\n \nstring\n)\n \n=>\n \n{\n \nconsole\n.\nlog\n(\n`\nAvatar URL is: \n${\nurl\n}\n`\n)\n};\n\u200b\n<\nAvatarCreator\n \nsubdomain\n=\n\"\ndemo\n\"\n \nonUserSet\n=\n{\nhandleOnUserSet\n}\n \nonAvatarExported\n=\n{\nhandleOnAvatarExported\n}\n \n/>\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/react/avatar-creator-integration",
            "title": "Avatar Creator Integration"
        }
    },
    {
        "page_content": "Load Avatars\nLoad 3D avatars into your React Project.\nIn the previous chapters, you learned how to integrate the avatar creator. As a result you get the URL to the avatar .glb model. In this chapter, we look into how to render the avatar in your app.\nLoad and render avatars with AvatarCreatorViewer\n[](#load-and-render-avatars-with-avatarcreatorviewer)\nIf you need a simple and quick solution for displaying the avatar result to your users, you can import AvatarCreatorViewer component which was shown in the Quickstart guide. This component is a wrapper around AvatarCreator component and Visage that gives some parameters to personalize the creator to viewer experience.\nIt utilizes the same parameters that were present in the AvatarCreator component and on top of it you can pass a \nViewerConfig\n, a \nloadingNode \nand \nonAvatarLoaded \ncallback.\nConfigure the How You Render the Avatar\n[](#configure-the-how-you-render-the-avatar)\nIn \nAvatarCreatorViewer \ncomponent you can use some of the Visage parameters to customize how you display the avatars to your users. \nviewerConfig: \nYou can create an object with following params and pass it to the component to change certain parameters of Visage. \nparameter\ntype\neffect\nposeSrc\nstring | Blob\nStatic pose to be loaded on avatar.\nanimationSrc\nstring | Blob\nAnimation loop to be played on avatar.\nclassName\nstring\nCSS class name.\nstyle\nCSSProperties\nInline CSS style object.\nhalfbody\nboolean\nSet true if avatar is halfbody.\nshadows\nboolean\nUse shadows in scene.\nscale\nnumber\nScale of the avatar.\ncameraTarget\nnumber\nVertical height of the camera focus on avatar.\ncameraInitialDistance\nnumber\nInitial direct distance of camera to avatar.\nidleRotation\nboolean\nPlay a subtle idle rotation animation on avatar.\nheadMovement\nboolean\nMake avatar head follow cursor.\nloadingNode\n: When transitioning from AvatarCreator to the Viewer there will be seconds of time delay while the avatar is being downloaded in the background. During this time you can display a custom \nloadingNode \nparameter passed to AvatarCreatorViewer component. This parameter can either be a string or a JSX.Element with all the possible visual details. The content will be centered and fill in the main size of the component.\nonAvatarLoaded: \nUsing this callback parameter you can be notified when Avatar is finished loaded on to the screen.\nLoad and render avatars with Visage\n[](#load-and-render-avatars-with-visage)\nVisage package is a dependency to the \nReady Player Me React SDK,\n to load and render avatars and other 3D models. So in case you followed the \n[Quickstart](https://docs.readyplayer.me/ready-player-me/integration-guides/react/quickstart)\n, you already have visage in your project. \nThis example should give you an idea of how simple it is to use. Import the component and pass the model URL to it.\nimport\n React \nfrom\n \n'react'\n;\nimport\n ReactDOM \nfrom\n \n'react-dom'\n;\nimport\n \n{\n Avatar \n}\n \nfrom\n \n'@readyplayerme/visage'\n;\n\u200b\nconst\n modelSrc \n=\n \n'https://readyplayerme.github.io/visage/male.glb'\n;\n \n// this can be a relative or absolute URL\n\u200b\nfunction\n \nApp\n()\n \n{\n \nreturn\n \n(\n \n<\nAvatar\n \nmodelSrc\n=\n{\nmodelSrc\n}\n \n/>\n \n);\n}\n\u200b\nReactDOM\n.\nrender\n(\n<\nApp\n \n/>\n,\n document\n.\nquerySelector\n(\n'#app'\n));\nCustomize the rendering\n[](#customize-the-rendering)\nVisage comes with many options and parameters to customize the avatar's appearance, such as background, lighting, animations, camera-settings etc.\nPlease \n[look into Storybook ](https://readyplayerme.github.io/visage/?path=/docs/components-avatar--animated)\nto check and test the full functionality and all parameters.\nScreenshot of Storybook Docs\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/react/load-avatars",
            "title": "Load Avatars"
        }
    },
    {
        "page_content": "Quickstart\nLoad your personal Ready Player Me avatar in your React project in less than 5 minutes.\nBefore you begin\n[](#before-you-begin)\nSign in to \n[Studio](https://studio.readyplayer.me/?utm_souce=unity-quickstart)\n \n(Developer Dashboard)\n and copy your subdomain. This will allow you to create and load an avatar in your domain at a later step.\nInstall the package\n[](#install-the-package)\nReady Player Me React SDK is available as an \n[npm package](https://www.npmjs.com/package/@readyplayerme/rpm-react-sdk)\n. Run the following command in the root of your React project.\nnpm i @readyplayerme/rpm-react-sdk\nOverview\n[](#overview)\nReady Player Me React SDK comes with two main components. \nAvatarCreator:\n A component wrapping the Ready Player Me in an iFrame with parameters to configure the creator.\nAvatarCreatorViewer:\n A combination of AvatarCreator and Visage to load and render the avatar after creation. \n[Visage ](https://github.com/readyplayerme/visage)\nis a 3D viewer layer of Ready Player Me which is used for loading and visualizing 3D objects and Avatars. Visage comes with two main components (\nExhibit\n and \nAvatar\n).\nImport the package and integrate the Avatar Creator\n[](#import-the-package-and-integrate-the-avatar-creator)\nAfter installing the npm package into your project, you can import the \nAvatarCreatorViewer\n Component and pass your \nsubdomain \nas a parameter to load the Ready Player Me in your React project. You can also add a \nonAvatarExported \ncallback to the component to receive the avatar's URL when it is exported.\nimport\n \n{\n AvatarCreatorViewer \n}\n \nfrom\n \n'@readyplayerme/rpm-react-sdk'\n;\n\u00e2\u20ac\u2039\nexport\n \ndefault\n \nfunction\n \nApp\n()\n \n{\n \nconst\n \nhandleOnAvatarExported\n \n=\n \n(\nurl\n:\n string\n)\n \n=>\n \n{\n    console\n.\nlog\n(\n`\nAvatar URL is: \n${\nurl\n}\n`\n)\n \n}\n\u00e2\u20ac\u2039\n \nreturn\n \n(\n \n<\ndiv\n>\n \n<\nAvatarCreatorViewer\n \n \nsubdomain\n=\n\"\nyour_subdomain\n\"\n \n \nonAvatarExported\n=\n{\nhandleOnAvatarExported\n}\n/>\n \n</\ndiv\n>\n \n);\n}\nIf you want to signup later, you can use \n[demo](https://demo.readyplayer.me)\n as subdomain parameter.\nCheck out the live code sample on CodeSandbox\n[](#check-out-the-live-code-sample-on-codesandbox)\nNext Steps\n[](#next-steps)\nLearn how to customize the experience tailored to your app by checking out\nThe details about \n[integrating the avatar creator](https://docs.readyplayer.me/ready-player-me/integration-guides/react/avatar-creator-integration)\n\u00e2\u20ac\u2039\nHow to \n[load and display an avatar](https://docs.readyplayer.me/ready-player-me/integration-guides/react/load-avatars)\n\u00e2\u20ac\u2039",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/react/quickstart",
            "title": "Quickstart"
        }
    },
    {
        "page_content": "Avatar Creator Integration\nIntegrate the Ready Player Me Avatar Creator in your Unity application.\nThe Avatar Creator is a web-based, device-agnostic. and ready-to-use way of integrating the avatar creation and editing process into your game. In this guide you will learn how to integrate it for different deployment targets.\nYou have various customization options for the Avatar Creator. \nSee the \n[Avatar creator customization guide](https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator)\n\u200b\nReady Player Me Avatar Creator\nAvatar Creator integration\n[](#avatar-creator-integration)\nDepending on your deployment platform there are different approaches to integrating the Avatar Creator directly with your Unity application.\nFollow the steps in the integration guide for your platform.\n[Avatar Creator for\nAndroid and iOSUse the WebView component to include the Avatar Creator in your Android or iOS game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-android-and-ios)\n[Avatar Creator for \nVR and PCUse Vuplex Web Component to include the Avatar Creator in your VR or PC game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-vr-and-pc)\n[Avatar Creator for \nWebGLUse a web overlay to integrate the avatar creator in your WebGL game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-webgl)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator",
            "title": "Avatar Creator Integration"
        }
    },
    {
        "page_content": "Code Samples\nHow to use avatars and integrate the Avatar Creator.\nThe following sample projects demonstrate the use of Ready Player Me avatars as well as Avatar Creator integration for different platforms.\n\u200b\n[Loading 3D Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/loading-3d-avatars)\n\u200b\n\u200b\n[Loading 2D Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/loading-2d-avatars)\n\u200b\n\u200b\n[Avatar Creator (WebGL)](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/avatar-creator-webgl)\n\u200b\n\u200b\n[Avatar Creator (Desktop, VR)](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/avatar-creator-desktop)\n\u200b\n\u200b\n[Avatar Creator (Mobile)](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/avatar-creator-mobile)\n\u200b\n\u200b\n[Distance based LODs](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/distance-based-lods)\n\u200b\nThe examples have been tested in Unity 2020.3LTS and newer versions of the Unity3D game engine.\nThe default domain for code samples is always \ndemo \nand it provides both full-body and half-body avatars.\nIf you have a subdomain, you can replace the target URL with your own.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples",
            "title": "Code Samples"
        }
    },
    {
        "page_content": "FAQ for Unity\nFrequently asked questions by Unity developers.\nIs there a way to cache (store) avatars locally to reuse them without downloading each time?\n[](#is-there-a-way-to-cache-store-avatars-locally-to-reuse-them-without-downloading-each-time)\nYes. Starting with SDK 1.12.0, avatars are cached at runtime and therefore loading much faster. See \n[Avatar Caching](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-caching)\n.\nCan I create an avatar directly in-engine? \n[](#can-i-create-an-avatar-directly-in-engine)\nNo. It is not currently possible to directly create an avatar inside the engine. You need to use a WebView. See \n[Avatar Creator Integration](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator)\n.\nHow do I customize a GLB model in Unity?\n[](#how-do-i-customize-a-glb-model-in-unity)\nImportant: This question is about getting and customizing the actual model, not about using the avatar in your app\n.\nYou need to download your avatar, import it into Blender, make the changes, then save, export, and re-import into Unity.\n1.\nCreate and download the avatar.\n2.\nImport the downloaded GLB file into Blender by selecting \nFile > Import > gITF 2.0 (.glb/gltf)\n. \n3.\nEdit the model as desired. \n4.\nGo to the \nTexture Paint\n tab. \n5.\nIn the \nImage Editor\n panel, select \nView\n. \n6.\nSelect each texture from the drop-down at the top. \n7.\nWhen done, select \nImage/Save As\u2026\n (or Shift + Alt + S) to save. \n8.\nExport your model as an FBX selecting \nFile > Export > FBX (.fbx)\n.\n9.\nImport your model and textures into Unity. \n10.\nClick the FBX avatar in the \nAssets \npane. \n11.\nIn the \nInspector\n, change the \nLocation \nto \nUse External Materials (Legacy)\n and apply. \n12.\nIf some base textures don\u2019t appear, click on the body part and manually assign the texture to the correct map (Albedo).\nHow do I change the Render Pipeline of my Unity Project with avatars to URP?\n[](#how-do-i-change-the-render-pipeline-of-my-unity-project-with-avatars-to-urp)\nThere are no specifics when it comes to changing the render pipeline with Ready Player Me avatars. Depending on the Unity version you use, you need to follow the general guide for changing the Render Pipeline.\n\u200b\n[See the Unity Documentation](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@12.0/manual/features/rp-converter.html)\n\u200b\nWhy is my avatar not decomposed?\n[](#why-is-my-avatar-not-decomposed)\nFor most use cases it is best to have a single mesh and a minimum number of texture atlases to minimize draw calls per avatar and maximize performance in your application. However, if you need to have your avatar decomposed into multiple pieces, you can do so by turning off the atlasing on the Avatar Configuration. See \n[Avatar Configuration](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n.\nHow can I integrate the Avatar Creator into my VR application?\n[](#how-can-i-integrate-the-avatar-creator-into-my-vr-application)\nYou can do so by using a 3rd party library called Vuplex WebView. See \n[Avatar Creator for VR and PC](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-vr-and-pc)\n and the \n[Unity/Vuplex example on GitHub](https://github.com/readyplayerme/Unity-Vuplex-Example)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/faq-for-unity",
            "title": "FAQ for Unity"
        }
    },
    {
        "page_content": "Help us improve the Unity SDK\nEnable analytics and help us improve.\nWe are constantly adding new features and improvements to the Ready Player Me SDK. Enable analytics and help us build even better free tools for more developers. \nThe collected analytics data is used for internal purposes only and not shared with third parties. See \n[Licensing & Privacy](https://docs.readyplayer.me/ready-player-me/support/terms-of-use)\n.\nWhat we track\n[](#what-we-track)\nWe believe in transparency, so here is a list of the events that we track.\nGeneral Data\n[](#general-data)\nSDK version\nUnity version and render pipeline \nOperating system and version \nYour partner subdomain and application name \nYour device ID (we use this to group events by developer) \nEvents (Unity Editor only) \n[](#events-unity-editor-only)\nActivity on the Ready Player Me editor dialogs (clicked buttons and checkboxes) \nBuild application for a specific target\nAvatar loaded (target-platform, url, success, error)\nHow to enable SDK Analytics \n[](#how-to-enable-sdk-analytics)\nYou will be asked to enable SDK Analytics when you import the SDK into Unity as part of the Setup Guide. \nClick \nAnalytics\n \nEnabled \nto opt-in and allows us to track the events listed above.\n\u200b\n\u200b\nEnabling Analytics after choosing Never Ask Again\n[](#enabling-analytics-after-choosing-never-ask-again)\nIf you previously checked Never Ask Again and want to allow tracking now, do the following.\n1.\nFrom the menu bar, select \nReady Player Me > Settings\n.\n2.\nIn the \nReady Player Me\n dialog, check \nAnalytics Enabled\n\u200b\n\u200b\nHow to disable SDK Analytics\n[](#how-to-disable-sdk-analytics)\nYou can disable analytics at any time.\n1.\nFrom the menu bar, select \nReady Player Me > Settings\n.\n2.\nIn the \nReady Player Me\n dialog, uncheck \nAnalytics enabled\n.\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/help-us-improve-the-unity-sdk",
            "title": "Help us improve the Unity SDK"
        }
    },
    {
        "page_content": "Load Avatars\nLoad 3D and 2D avatars into your Unity Scene.\nIn this guide, you learn how to load avatars into your Unity Scenes.\n\u200b\n[Load 3D Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars#load-3d-avatars)\n\u200b\n\u200b\n[Load 2D Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars#load-2d-avatars)\n\u200b\n\u200b\n[Save Avatars in your Unity Project](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars#save-avatars-as-npcs-in-your-project)\n\u200b\nLoad 3D Avatars\n[](#load-3d-avatars)\nYou can load \nfull-body\n and \nhalf-body\n avatars into your Unity game. For both types of avatars you can follow the same procedure.\n1.\nCreate an instance of the \nAvatarObjectLoader\n. \n2.\nCall the \nLoadAvatar()\n method with an avatar URL. The example uses a URL from the demo Avatar Creator \n[https://demo.readyplayer.me](https://demo.readyplayer.me/avatar)\n. You will later learn how to retrieve an Avatar URL directly in your game.\nvar\n avatarUrl \n=\n \n\"https://api.readyplayer.me/v1/avatars/632d65e99b4c6a4352a9b8db.glb\"\n;\nAvatarObjectLoader\n avatarLoader \n=\n \nnew\n \nAvatarObjectLoader\n();\navatarLoader\n.\nLoadAvatar\n(\nAvatarURL\n);\n \n3. Receive the GameObject of the avatar in \nCompletionEventArgs\n of the \nOnCompleted\n callback.\nSee the code below for the completed example. \nSee the \n[API Reference]()\n for a complete list of callbacks of the \nAvatarLoader\n. \nYou can also find the code below in the \nAssets\\Plugins\\Ready Player Me\\Examples\\Runtime Example\\RuntimeExample\nScene and script.\nusing\n \nReadyPlayerMe\n.\nAvatarLoader\n;\nusing\n \nReadyPlayerMe\n.\nCore\n;\nusing\n \nUnityEngine\n;\n\u200b\nnamespace\n \nReadyPlayerMe\n{\n \npublic\n \nclass\n \nAvatarLoadingExample\n \n:\n \nMonoBehaviour\n \n{\n \n//Demo Avatar URL\n \n[\nSerializeField\n]\n \nprivate\n \nstring\n avatarUrl \n=\n \n\"https://api.readyplayer.me/v1/avatars/632d65e99b4c6a4352a9b8db.glb\"\n;\n\u200b\n \nprivate\n \nGameObject\n avatar\n;\n\u200b\n \nprivate\n \nvoid\n \nStart\n()\n \n{\n            ApplicationData\n.\nLog\n();\n \nvar\n avatarLoader \n=\n \nnew\n \nAvatarObjectLoader\n();\n            avatarLoader\n.\nOnCompleted \n+=\n \n(\n_\n,\n args\n)\n \n=>\n \n{\n                avatar \n=\n args\n.\nAvatar\n;\n                AvatarAnimatorHelper\n.\nSetupAnimator\n(\nargs\n.\nMetadata\n.\nBodyType\n,\n avatar\n);\n \n};\n            avatarLoader\n.\nLoadAvatar\n(\navatarUrl\n);\n \n}\n\u200b\n \nprivate\n \nvoid\n \nOnDestroy\n()\n \n{\n \nif\n \n(\navatar \n!=\n \nnull\n)\n \nDestroy\n(\navatar\n);\n \n}\n \n}\n}\n\u200b\nLoad 2D Avatars\n[](#load-2d-avatars)\nYou can load a 2D render of your avatar using the \n[AvatarRenderLoader](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarrenderloader)\n class which obtains a rendered image of your avatar via the Render API.\n1.\nCreate an instance of \nAvatarRenderLoader\n.\n2.\nCall the \nLoadRender()\n method, passing the required arguments.\nAvatarRenderLoader\n avatarRenderLoader \n=\n \nnew\n \nAvatarRenderLoader\n();\navatarRenderLoader\n.\nLoadRender\n(\nurl\n,\n scene\n,\n blendShapeMeshes\n,\n blendShapes\n);\nSee the code below for a complete example. \nSee the \n[AvatarRenderLoader API Reference](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarrenderloader)\n to learn more about \nAvatarRenderLoader\n and the function arguments.\nYou can find a complete example usage of this code in the \nAssets/Samples/Ready Player Me Avatar Loader/[VERSION_NUMBER]/AvatarLoading/AvatarLoadingExample\n scene and script.\nSave avatars as NPCs in your project\n[](#save-avatars-as-npcs-in-your-project)\nThe easiest way to save avatars in your project and package them with your build is using the Avatar Loader.\nThe Avatar Loader lets you download and save an avatar in your project in the Unity Editor.\n1.\nOpen the Avatar Loader window by choosing \nReady Player Me > Avatar Loader\n. \n\u200b\n2.\nPaste your avatar URL (or shortcode) into the \nAvatar URL or Shortcode\n field.\n3.\nOptionally, check \nUse Eye Animations\n. This will add a component to the avatar GameObject.\n4.\nOptionally, check \nVoice To Animation\n. This will add a component to the avatar GameObject.\n5.\nClick \nLoad Avatar into the Current Scene\n. \n6.\nYour avatar loads into the current Scene at position (0,0,0). \n7.\nThe avatar prefab is stored in a new folder (name = avatar ID) in \nAssets > Avatars\n.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars",
            "title": "Load Avatars"
        }
    },
    {
        "page_content": "Mixamo Animations\nHow to add animations to Ready Player Me avatars.\nReady Player Me full-body avatars are compatible with \n[Mixamo](https://www.mixamo.com/)\n\u200b\n[ ](http://www.mixamo.com/)\nanimations and include a Mixamo-compatible full-body skeletal rig that makes it possible to use animations exported from Mixamo. To download and use Mixamo animations on full-body avatars do the following.\n1.\nGo to \n[www.mixamo.com](http://www.mixamo.com/)\n and log in with your Adobe credentials or create an account.\n2.\nSelect any animation. \n3.\nClick \nDownload\n.\n4.\nIn the \nDownload Settings\n dialog, select the \nFormat\n as \nFBX for Unity\n and the \nSkin\n as \nWith Skin\n. Leave \nFrames per Second\n as 30 and \nKeyframe Reduction\n as none.\n5.\nClick \nDownload\n.\n6.\nMove the downloaded FBX file and import it into Unity\n7.\nAfter importing be sure to set the AnimationType to Humanoid (instead of Generic)\nAlternatively, you can make use of our AssetPostprocessor to automatically configure the fbx import settings. To do this create the following directory inside the Assets folder \n/Ready Player Me/Animations\n Then just drag/drop the fbx animation asset into this folder. \n\u200b\n\u200b\n\u200b\nFor use with the Ready Player Me avatar in your project, you need to separate the animation from the FBX file and add it to the Avatar Animator.\n1.\nRight-click on the FBX file and choose \nExtract Animation\n. This creates a new file with your animation. \n2.\nDouble-click \nPackages > Ready Player Me Avatar Loader > Resources> Avatar Animator\n.\n3.\nDrag your animation into the editor and add it to the state machine. (See \n[https://docs.unity3d.com/Manual/class-AnimatorController.html](https://docs.unity3d.com/Manual/class-AnimatorController.html)\n)\n4.\nRun your Game and you should see the animation. \nIf you are using an SDK version before 1.8.0, you will need to upload animation target files to get an animation based on your avatar's body type.\nUpload either \nFemaleAnimationTargetV2\n or \nMaleAnimationTargetV2\n from \nAssets/Plugins/Wolf3D Ready Player Me SDK/Resources/AnimationTargets\n to Mixamo. Then follow the same steps.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/loading-mixamo-animations",
            "title": "Mixamo Animations"
        }
    },
    {
        "page_content": "Optimize\nTune visual quality and performance.\nYou can optimize Ready Player Me avatars to match with your available compute and graphics power. Choose maximum details or fine-tune visual quality to meet your performance goals.\n[Avatar ConfigurationSet the specs of the avatars loaded into the Scene (e.g. LODs, texture size).](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n[Avatar CachingLearn how to turn on and manage the client-side avatar cache.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-caching)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize",
            "title": "Optimize"
        }
    },
    {
        "page_content": "Quickstart\nLoad your personal Ready Player Me avatar in Unity in less than 10 minutes.\nBefore you begin\n[](#before-you-begin)\nSign in to \n[Studio](https://studio.readyplayer.me/?utm_souce=unity-quickstart)\n \n(Developer Dashboard)\n and copy your subdomain. This will allow you to create and load an avatar in your domain at a later step.\nMake sure you have downloaded and installed \nUnity 2020.3.0f1 LTS\n or later.\nFor this to work, you need to have \nGit installed on your machine\n, which can be downloaded from \n[here](https://git-scm.com/downloads)\n. After installation, you will also need to restart Unity.\nOpen your Unity Project\nIf you have an earlier version of the SDK installed, please follow the \n[Unity SDK 2.0 Migration Guide](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/unity-sdk-2.0-migration-guide)\n.\n1. Import the Ready Player Me Unity SDK\n[](#1.-import-the-ready-player-me-unity-sdk)\nImport the package via \nWindow -> Package Manager -> + icon -> Add Package from git URL\n.\nPaste this git URL into the input field\nhttps://github.com/readyplayerme/rpm-unity-sdk-core.git\n\u00e2\u20ac\u2039\n2. Enter your subdomain\n[](#2.-enter-your-subdomain)\nWhen you import the package for the first time, you will be greeted with our Setup Guide editor window to guide you through the setup process.\nHere you should edit the UI field \ndemo\n and replace it with your own subdomain. \ne.g \nyourappname\nIf you are not a partner or do now have your own subdomain please click the tickbox next to the \n\"I don't have an account. Use demo subdomain instead\"  \nfield.\nThen click the Next button. \n3. Avatar configuration\n[](#3.-avatar-configuration)\nNext, you are required\n \nto set your avatar configuration that will be used when you load an avatar.\nIf you do not set the Avatar Config property the \nNext \nbutton will be disabled.\nClick the Avatar config editable field to select the configuration you want to use. To see the configs included by default you will need to click the eye icon image the top right. \nAlternatively, you can create your own Avatar Config, you can do this by right-clicking in the Assets tab and going to \nCreate > Ready Player Me > Avatar Configuration\nThen adjust the settings as you need, more information on avatar configuration can be found \n[here](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n. \n4. Help us improve the SDK\n[](#4.-help-us-improve-the-sdk)\nFinally, in the last step of the setup process, you can optionally adjust the analytics setting which is enabled by default.\nOnce you are happy with the settings you can click the \nOpen QuickStart Scene \nwhich will trigger the import of the Quick Start sample folder.\nIf you do not wish to open our QuickStart scene you can instead click the \nFinish Setup\n button\n5. Open the runtime example scene\n[](#5.-open-the-runtime-example-scene)\nGo to \nAssets -> Samples-> Ready Player Me Avatar Loader-> [VERSION_NUMBER]-> QuickStart -> QuickStart\n and double-click to open the scene.\n4. Load your personal avatar\n[](#4.-load-your-personal-avatar)\nNext, you need an avatar URL. If you don't have one, you can create one in your own subdomain \n[https://[your-subdomain].readyplayer.me/avatar](https://demo.readyplayer.me/avatar)\n. You can get your subdomain from \n[Studio](https://studio.readyplayer.me)\n.\nIf you want to signup later, you can use \n[https://demo.readyplayer.me/avatar](https://demo.readyplayer.me)\n\u00e2\u20ac\u2039\nAfter creating your avatar, \ncopy the URL\n.\nReturn to the \nQuick Start\n \nScene\n.\nIn the hierarchy, select the \nRPM Player\n game object and open the \nThird Person Loader\n Component.\nPaste the Avatar URL into the \nAvatar Url\n Property.\n5. Run your project\n[](#5.-run-your-project)\nClick \nPlay\n and wait a moment for your avatar to load and animate with a basic third-person controller setup.\nThe third-person controller is currently designed to work with a keyboard and mouse using the old Unity Input system.\nNext steps\n[](#next-steps)\nNext, you will learn in more detail how to:\nload \n[3D avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars#load-3d-avatars)\n,\nload \n[2D avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars#load-2d-avatars)\n (e.g., for profile pictures),\nintegrate and customize the \n[Avatar Creator](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator)\n in your game or app,\nand how to \n[animate](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/loading-mixamo-animations)\n your avatars.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart",
            "title": "Quickstart"
        }
    },
    {
        "page_content": "Troubleshooting\nCommon errors, known issues, and updating from earlier SDK versions.\nCommon errors\n[](#common-errors)\n\u200b\n[Avatar loading issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/avatar-loading-issues)\n\u200b\nKnown issues\n[](#known-issues)\n\u200b\n[Newtonsoft JSON issues]()\n\u200b\n\u200b\n[iOS issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/ios-issues)\n\u200b\n\u200b\n[WebGL issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/webgl-issues)\n\u200b\n\u200b\n[Firewall issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/firewall-issues)\n\u200b\nEarlier SDK versions\n[](#earlier-sdk-versions)\n\u200b\n[Updating from earlier versions](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/updating-from-earlier-versions)\n\u200b\nIf you need additional support, contact us at \n[[email\u00a0protected]](https://docs.readyplayer.me/cdn-cgi/l/email-protection#15666065657a676155677074716c6579746c70673b7870)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting",
            "title": "Troubleshooting"
        }
    },
    {
        "page_content": "Unity SDK 1.13.x [Deprecated]\nAs of February 2023, our Unity SDK was migrated onto publicly hosted GitHub repositories and split into 3 modular unity packages. As such all versions of Unity SDK up to version 1.13.x which was hosted on Google Drive are now deprecated and its development is now in maintenance mode we recommend updating to the new modular SDK. \nIf you are still using the old SDK (up to version 1.13.x) you can use the documentation found here however we strongly recommend you update to the new Unity SDK.\nRefer to the \n[Quick Start](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n for instructions on how to import the new Unity SDK.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated",
            "title": "Unity SDK 1.13.x [Deprecated]"
        }
    },
    {
        "page_content": "Animations\nHow to add animations to Ready Player Me avatars.\n[Loading Mixamo animationsHow to add Mixamo animations to Ready Player Me avatars.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations/loading-mixamo-animations)\n[Blender FBX export to UEExport Ready Player Me Avatars from Blender as FBX for use in UE.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations/blender-to-unreal-export)\n[Oculus Lip Sync integrationApply Oculus Lip Sync facial animations to the Ready Player Me avatars\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations/oculus-lipsync-integration)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations",
            "title": "Animations"
        }
    },
    {
        "page_content": "Avatar Creator Integration\nIntegrate the Ready Player Me Avatar Creator with your Unreal Engine application.\nIn Unreal Engine 5 you can integrate the Ready Player Me Avatar Creator by using a web browser module without the need for a 3rd party plugin.\nNote that the Avatar Creator in Unreal Engine only works from UE 5.0.1 and higher and currently supports only the PC platform.\nDownload the sample code\n[](#download-the-sample-code)\nYou can download the \n[UnrealExamples](https://github.com/readyplayerme/UnrealExamples)\n project and see it working in the WebBrowser map.\n[GitHub - readyplayerme/UnrealExamples: ReadyPlayerMe integration into UE5 examplesGitHub](https://github.com/readyplayerme/UnrealExamples)\nFollow the steps in the \n[ReadMe](ttps://github.com/readyplayerme/UnrealExamples/tree/main/Content/ReadyPlayerMe/WebBrowser#readme)\n and learn how it works and how it is set up.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/avatar-creator-integration",
            "title": "Avatar Creator Integration"
        }
    },
    {
        "page_content": "Code Samples\nExamples of integrating the Avatar Creator and avatars with UE projects.\nUnless stated otherwise, all code and code samples are for Unreal Engine 5.\n[Unreal Engine 5 Samples\u200b\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/code-samples/unreal-engine-5-samples)\n[Lyra Example Project\u200b\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/code-samples/lyra-project-integration-example)\n[Unreal Engine 4Legacy examples.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/code-samples/unreal-engine-4-legacy)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/code-samples",
            "title": "Code Samples"
        }
    },
    {
        "page_content": "FAQ for Unreal Engine\nFrequently asked questions by Unreal Engine developers.\nIs there a way to cache (store) avatars locally to reuse them without downloading each time?\n[](#is-there-a-way-to-cache-store-avatars-locally-to-reuse-them-without-downloading-each-time)\nStarting with Unreal Engine SDK 0.18.0, avatars can be cached at runtime if you enable avatar caching. See \n[Avatar caching](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-caching)\n.\nCan I create an avatar directly in-engine? Without the web interface?\n[](#can-i-create-an-avatar-directly-in-engine-without-the-web-interface)\nNo. It is currently not possible to directly create an avatar inside the engine. You can run the Ready Player Me Avatar Creator website in Unreal Engine 5 using the Web Browser plugin. See \n[Code Samples](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/code-samples)\n to see how this works. \nHow do I use a 3rd person avatar in UE?\n[](#how-do-i-use-a-3rd-person-avatar-in-ue)\nSee the complete example on GitHub.\n\u200b\n[UE4 Third Person Example ->](https://github.com/readyplayerme/UE4-ThirdPerson-Example)\n\u200b\nWhy is there lag when loading an avatar into a scene?\n[](#why-is-there-lag-when-loading-an-avatar-into-a-scene)\nThe performance issues or \"freezing\" when an avatar loads into a scene is a known limitation of the third-party plugin glTFRuntime we use for handling the import of .gltf/glb files. Unfortunately, they do not have a solution at this point.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/faq-for-unreal-engine",
            "title": "FAQ for Unreal Engine"
        }
    },
    {
        "page_content": "Help us improve the Unreal Engine SDK\nEnable analytics and help us improve.\nWe are constantly adding new features and improvements to the Ready Player Me SDK. Enable analytics and help us build even better free tools for more developers. \nThe collected data is used for internal purposes only and not shared with third parties. \nRead our \n[Privacy Policy](https://docs.readyplayer.me/ready-player-me/support/terms-of-use)\n.\nWhat we track\n[](#what-we-track)\nWe believe in transparency, so here is a list of the events that we track.\nGeneral Data\n[](#general-data)\nSDK version\nUnreal Engine version \nOperating system \nYour application name \nYour device ID (we use this to group events by developer) \nEvents (Unreal Editor only) \n[](#events-unreal-editor-only)\nOpening and closing the project\nHow to enable SDK Analytics \n[](#how-to-enable-sdk-analytics)\nYou will be asked to enable SDK Analytics when you import the SDK into Unreal. \nClick \nEnable Analytics\n to opt in and allows us to track the events listed above.\n\u200b\n\u200b\nEnable or disable SDK Analytics from Editor Preferences\n[](#enable-or-disable-sdk-analytics-from-editor-preferences)\nIf you selected \nNever Ask Again\n, you can enable or disable analytics at any time, as follows.\n1.\nFrom the Editor Preferences, select \nGeneral > Ready Player Me\n.\n2.\nCheck \nEnable analytics\n.\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/help-us-improve-the-unreal-engine-sdk",
            "title": "Help us improve the Unreal Engine SDK"
        }
    },
    {
        "page_content": "Load Avatars\nLoad 3D and 2D avatars into your Unreal Engine project.\nIn this guide, you learn how to load avatars into your Unreal Engine project.\n\u00e2\u20ac\u2039\n[Load 3D avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/load-avatars#load-3d-vatars)\n.\n\u00e2\u20ac\u2039\n[Load 2D avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/load-avatars#load-2d-avatars)\n.\nLoad 3D avatars\n[](#load-3d-avatars)\nThe Ready Player Me Unreal Engine plugin comes with one pre-made Blueprint \nBP_RPM_Actor\n. You can add this Blueprint to any map and use it for loading a Ready Player Me avatar from a URL at runtime. \nReady Player Me Actor Blueprint\n[](#ready-player-me-actor-blueprint)\nFind \nReadyPlayerMe Content/Blueprints/BP_RPM_Actor \nand examine it in the \nComponents \npanel. The components are described below.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nSkeletal Mesh Component \n[](#skeletal-mesh-component)\n1.\nSelect the \nSkeletalMeshComponent\n. TheSkeletalMeshComponent is required and holds all the skeletal mesh data once the avatar has been loaded. \n2.\nExamine its \nDetails \nand under the \nAnimation \nheading, find the \nAnimClass \nproperty. Its default value is \nBP_RPM_Animation\n. You need to set this to the Animation Blueprint you want to use for the character. \nThe \nAnim Class property\n must be set in the editor before you build or run the application, otherwise, the animation will not play on the avatar for built applications.\nReady Player Me Component\n[](#ready-player-me-component)\nThe \nReadyPlayerMeComponent\n is an \nActorComponent\n that you can add to any existing actor. It requires a \nSkeletalMeshComponent\n. If you try to load an avatar on an actor without a SkeletalMeshComponent, it will add a new one automatically. \n1.\nSelect the \nReadyPlayerMe Component\n. The ReadyPlayerMeComponent\n \nhas all the functionality required for loading a Ready Player Me avatar with a single function call.\n2.\nExamine its details and under the \nReady Player Me\n heading. Find the \nUrl Shortcode\n and \nTarget Skeleton\n properties.\nUrl Shortcode\n contains the Ready Player Me Avatar \n[URL or Shortcode](https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator/avatar-shortcodes)\n of an avatar created with the Avatar Creator. \nTarget Skeleton \ndefines the skeleton that the loaded character will use with skinning and animation.\nIf you want to create or use your own target skeleton, it must perfectly match the skeleton that you are loading from the URL. \nWe do not recommend that you change this property.\n1.\nExamine the \nEvent Graph.\n2.\nFind the \nLoad Avatar On Start\n Boolean variable. Set this variable to enable or disable the avatar loading process from running on \nEventBeginPlay \nas shown below in the Event Graph.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nLoading the avatar\n[](#loading-the-avatar)\nYou can use two different methods for loading an avatar with the Ready Player Me Actor Blueprint (BP_RPM_Actor) or any Actor that has a \nReadyPlayerMeComponent\n:\n LoadAvatar \nor \nLoadNewAvatar\n\u00e2\u20ac\u2039\n[LoadAvatar ](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeavatarloader)\nonly requires a reference to the ReadyPlayerMe Component you wish to run it on. This function assumes that you have already set the Url Shortcode to use for loading the avatar model. \n \n\u00e2\u20ac\u2039\n[LoadNewAvatar](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermeavatarloader)\n has an additional Url\n \nparameter so that you can update the ReadyPlayerMeComponent's Url Shortcode variable before loading the avatar.\nBoth of these functions have on \nOnSetupFailed()\nfunction for basic error handling.  \nLoad 2D avatars\n[](#load-2d-avatars)\nYou can load a 2D render of your avatar using the \n[ReadyPlayerMeRenderLoader ](https://docs.readyplayer.me/ready-player-me/api-reference/unreal-engine-sdk/readyplayermerenderloader)\nclass which obtains a rendered image of your avatar via the Render API.\nThe url of the avatar needs to be provided for rendering the avatar.\nvoid Load(const FString& ModelUrl, const ERenderSceneType& SceneType, const TMap<EAvatarMorphTarget, float>& BlendShapes, const FDownloadImageCompleted& OnCompleted, const FDownloadImageFailed& OnFailed)\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/load-avatars",
            "title": "Load Avatars"
        }
    },
    {
        "page_content": "Optimize\nTune visual quality and performance.\nYou can optimize Ready Player Me avatars to match with your available compute and graphics power. Choose maximum details or fine-tune visual quality to meet your performance goals.\n\u200b\n\u200b\n[Avatar ConfigurationSet the specs of the avatars loaded into the scene (LODs, Texture Size, etc.)\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-configuration)\n[Avatar CachingLearn how to turn on and manage the client-side avatar cache.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-caching)\n[Avatar PreloadingLoad an avatar in runtime memory.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-preloading)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize",
            "title": "Optimize"
        }
    },
    {
        "page_content": "Quickstart\nImport and configure the Unreal Engine SDK for your project.\nBefore you begin\n[](#before-you-begin)\nSign in to \n[Studio](https://studio.readyplayer.me/?utm_souce=unreal-quickstart)\n \n(Developer Dashboard)\n and copy your subdomain. This will allow you to create and load an avatar in your domain at a later step.\nVerify that your Unreal Version is \nUnreal Engine 4.27\n, \nUnreal Engine 5,\n or higher\n1. Integrate into C++ or Blueprint Projects\n[](#1.-integrate-into-c++-or-blueprint-projects)\nPlease follow the steps in the guide below, depending on your Unreal Project.\n[Set up C++ ProjectsRecommended.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/setup-c++-projects)\n[Set up Blueprint ProjectsBy default, the UE plugin is designed to work with C++ projects. The SDK for Blueprint projects is much larger, and the setup is more involved. \u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/setup-blueprint-projects)\n2. Run the Demo\n[](#2.-run-the-demo)\nOnce you are set up, see your avatar in action in just 1 minute.\n\u200b\n[Run the Demo](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/exploring-the-demo)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart",
            "title": "Quickstart"
        }
    },
    {
        "page_content": "Troubleshooting\nKnown issues with the UE Ready Player Me SDK.\nKnown Issues\n[](#known-issues)\n\u200b\n[C++ project compilation issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/c++-project-compilation-issues)\n\u200b\n\u200b\n[Crashes on built applications](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/crashes-on-built-applications)\n\u200b\n\u200b\n[Blueprint project issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/blueprint-project-issues)\n\u200b\n\u200b\n[Avatar loading issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/avatar-loading-issues)\n\u200b\n\u200b\n[Animation issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/animation-issues)\n\u200b\n\u200b\n[Avatar lighting issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/avatar-lighting-issues)\n\u200b\nUnreal SDK breaking changes\n[](#unreal-sdk-breaking-changes)\n\u200b\n[Unreal SDK 0.17.0 breaking changes](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/unreal-sdk-breaking-changes)\n\u200b\n\u200b\n[Unreal SDK 0.18.0 breaking changes](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/unreal-sdk-breaking-changes)\n\u200b\n\u200b\n[Unreal SDK 1.0.0 breaking changes](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/unreal-sdk-breaking-changes)\n\u200b\nUpdating from earlier versions\n[](#updating-from-earlier-versions)\n\u200b\n[Updating from earlier versions](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting#updating-from-earlier-versions)\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting",
            "title": "Troubleshooting"
        }
    },
    {
        "page_content": "Avatar Creator integration\nIntegrate the Avatar Creator in your game or app as an iframe or WebView.\nIf you followed the \n[Quickstart ](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/quickstart)\nyou already integrated the Avatar Creator into a website using an iframe. This guide details the integration and customization options of this Avatar Creator.\nSubscribe to Events\n[](#configuration)\nThe iframe exposes a \n[post message](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n API that can be used to subscribe to events and for triggering certain actions. The \n[example code from the Quickstart ](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/quickstart#copy-this-code)\nshows how to set up the subscription handler and how to trigger custom code on different events.\nTo enable the events you need to append the parameter \n?frameApi\n to the avatar-creator URL.\nhttps://demo.readyplayer.me/avatar?frameApi\nEmitted Events\n[](#emitted-events)\nAll messages that the iframe emits will always contain a \neventName\n and \nsource\n and can be used for filtering the output that is emitted. See the table below for all the currently supported events and their sample outputs.\nEvent\nPayload example\nv1.frame.ready\n{\n \neventName\n:\n \n'v1.frame.ready'\n,\n \nsource\n:\n \n'readyplayerme'\n}\nv1.subscription.created\n{\n  correlationId\n,\n \ndata\n:\n \n{\n eventName \n},\n \neventName\n:\n \n'v1.subscription.created'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n \nstatusCode\n:\n \n201\n}\nv1.subscription.deleted\n{\n  correlationId\n,\n \ndata\n:\n \n{\n eventName \n},\n \neventName\n:\n \n'v1.subscription.deleted'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n \n \nstatusCode\n:\n \n200\n}\nv1.avatar.exported\n{\n \ndata\n:\n \n{\n    url\n,\n    userId\n \n},\n \n \neventName\n:\n \n'v1.avatar.exported'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n \n}\nv1.user.set\n{\n \ndata\n:\n \n{\n id \n},\n \neventName\n:\n \n'v1.user.set'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n}\nv1.user.updated\n{\n \ndata\n:\n \n{\n id \n},\n \neventName\n:\n \n'v1.user.updated'\n,\n \nsource\n:\n \n'readyplayerme'\n,\n}\nv1.user.logout\n{\n  correlationId\n,\n \neventName\n:\n \n'v1.user.logout'\n \nsource\n:\n \n'readyplayerme'\n \nstatusCode\n:\n \n200\n \ntype\n:\n \n'queryResponse'\n}\nv1.user.authorized\n{\n  data\n:\n \n{\n id \n},\n  eventName\n:\n 'v1.user.authorized'\n  source\n:\n 'readyplayerme'\n  statusCode\n:\n \n200\n  type\n:\n 'queryResponse'\n}\nQueries\n[](#queries)\nSupported messages that can be posted to the iframe after the \nv1.frame.ready\n event has been emitted.\nEffect\nMessage example\nLogout user\niframe\n.\ncontentWindow\n.\npostMessage\n(\n \nJSON\n.\nstringify\n({\n \ntarget\n:\n \n'readyplayerme'\n,\n \ntype\n:\n \n'query'\n,\n \neventName\n:\n \n'v1.user.logout'\n \n}),\n \n'*'\n);\nRefresh unlocked assets\niframe\n.\ncontentWindow\n.\npostMessage\n(\n \nJSON\n.\nstringify\n({\n \ntarget\n:\n \n'readyplayerme'\n,\n \ntype\n:\n \n'query'\n,\n \neventName\n:\n \n'v1.asset.unlocked'\n \n}),\n \n'*'\n);\nAvatar Creator Configuration\n[](#configuration-1)\nWhile you can configure most of the Avatar Creator features from \n[Studio](https://studio.readyplayer.me)\n, for some use cases it might be helpful to do it by providing a query string to the URL.\nThe available parameters, values, and their effects are described in the following table.\nParameter\nValue\nEffect\nframeApi\n\u00e2\u20ac\u2039\nEnables subscribing to \npostMessage\n events provided by the iframe. See more about \n[messaging](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/avatar-creator-integration#messaging)\n below.\nclearCache\n\u00e2\u20ac\u2039\nDisables caching avatar customization and restarts the app upon refreshing the iframe or when creating a new instance.\nselectBodyType\n\u00e2\u20ac\u2039\nEnables selecting between halfbody and fullbody avatars.\nbodyType\n'halfbody' | 'fullbody'\nSelects a body type for the avatar in the editor or allows the user to choose from both. Please note, that this only influences the behavior of the avatar-creator, but not the avatar-type you get on requesting an avatar. If you want to change that too, please contact \nExamples\nhttps://yourappname.readyplayer.me/avatar?\nframeApi\nhttps://yourappname.readyplayer.me/avatar?\nclearCache\n&\nbodyType=halfbody",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/avatar-creator-integration",
            "title": "Avatar Creator integration"
        }
    },
    {
        "page_content": "Integration examples\nHow to load avatars for various platforms.\n[WebLoad and show your Ready Player Me avatars on the web.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/web)\n[React NativeHow to integrate Ready Player Me into React Native applications.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/react-native)\n[iOS NativeHow to integrate Ready Player Me into iOS native applications.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/native-ios)\n[Android NativeHow to integrate Ready Player Me into Android native applications.\u200b](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/android-native)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples",
            "title": "Integration examples"
        }
    },
    {
        "page_content": "Optimize\nOptimize and balance quality and performance.\nTake full advantage of the Avatar API to optimize avatars to your needs.\nOptimize and balance quality and performance.\nAdjust download speed and fine-tune memory usage on your users' devices..\nWhen you get an Avatar URL from the Avatar Creator, you can append parameters, as shown below.\nExample\n[](#example)\n1.\nCreate your avatar in the embedded Avatar Creator.\n2.\nAfter finishing, you get the base RL of the avatar via postMessage.\nExample: \nhttps://api.readyplayer.me/v1/avatars/6185a4acfb622cf1cdc49348.glb\n3.\nAppend parameters. In this example, request an avatar with fewer triangles (meshLod=2).\n\nhttps://api.readyplayer.me/v1/avatars/6185a4acfb622cf1cdc49348.glb?meshLod=2\n4.\nMake the request with this URL, and you'll receive a .glb avatar with 50% reduction in polycount.\n\u200b\n[Check out the Avatar API Documentation to see all options.](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-3d-avatars)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/optimize",
            "title": "Optimize"
        }
    },
    {
        "page_content": "Quickstart\nIntegrate the Ready Player Me Avatar Creator with an HTML page.\nFor this quickstart guide, you will integrate the Avatar Creator into a  website using Ready Player Me APIs. It takes less than 5 minutes!\nYou can use this method for integrating with any stack that supports REST and postMessage.\nEmbed the Avatar Creator into a web page\n[](#embed-the-avatar-creator-into-a-web-page)\n1.\nCreate a new .html file in a text editor. \n2.\nCopy and paste the code below into the file and save it. \n3.\nOpen the file in a web browser. \n4.\nClick \nOpen Ready Player Me\n. The Avatar Creator iFrame opens.\n5.\nCreate an avatar.\n6.\nAfter creating the avatar, you'll receive the avatar URL in the \nv1.avatar.exported\n event. In the event handler, the avatar URL is shown and the Avatar Creator iFrame gets hidden again.\nSee the example code for details.\nExample code\n[](#example-code)\n<!\nDOCTYPE\n \nhtml\n>\n<\nhtml\n \nlang\n=\n\"\nen\n\"\n>\n\u00e2\u20ac\u2039\n<\nhead\n>\n \n<\nmeta\n \ncharset\n=\n\"\nUTF-8\n\"\n \n/>\n \n<\nmeta\n \nname\n=\n\"\nviewport\n\"\n \ncontent\n=\n\"\nwidth=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\n\"\n \n/>\n \n<\nmeta\n \nhttp-equiv\n=\n\"\nX-UA-Compatible\n\"\n \ncontent\n=\n\"\nie=edge\n\"\n \n/>\n \n<\ntitle\n>\nDocument\n</\ntitle\n>\n \n<\nstyle\n>\n \nhtml,\n        body,\n        .frame\n \n{\n \nwidth\n:\n 1080px\n;\n \nheight\n:\n 800px\n;\n \nmargin\n:\n 0\n;\n \nfont-family\n:\n -apple-system\n,\n BlinkMacSystemFont\n,\n Segoe UI\n,\n Roboto\n,\n Oxygen\n,\n Ubuntu\n,\n Cantarell\n,\n Fira Sans\n,\n                Droid Sans\n,\n Helvetica Neue\n,\n sans-serif\n;\n \npadding\n:\n 20px\n;\n \nfont-size\n:\n 14px\n;\n \nborder\n:\n none\n;\n \n}\n\u00e2\u20ac\u2039\n \n.warning\n \n{\n \nbackground-color\n:\n #df68a2\n;\n \npadding\n:\n 3px\n;\n \nborder-radius\n:\n 5px\n;\n \ncolor\n:\n white\n;\n \n}\n \n</\nstyle\n>\n</\nhead\n>\n\u00e2\u20ac\u2039\n<\nbody\n>\n \n<\nh2\n>\nReady Player Me iframe example\n</\nh2\n>\n \n<\nul\n>\n \n<\nli\n>\nClick the \"Open Ready Player Me\" button.\n</\nli\n>\n \n<\nli\n>\nCreate an avatar and click the \"Done\" button when you're done customizing.\n</\nli\n>\n \n<\nli\n>\nAfter creation, this parent page receives the URL to the avatar.\n</\nli\n>\n \n<\nli\n>\nThe Ready Player Me window closes and the URL is displayed.\n</\nli\n>\n \n</\nul\n>\n \n<\np\n \nclass\n=\n\"\nwarning\n\"\n>\n        If you have a subdomain, replace the 'demo' subdomain in the iframe source URL with yours.\n \n</\np\n>\n\u00e2\u20ac\u2039\n \n<\ninput\n \ntype\n=\n\"\nbutton\n\"\n \nvalue\n=\n\"\nOpen Ready Player Me\n\"\n \nonClick\n=\n\"\ndisplayIframe\n()\n\"\n \n/>\n \n<\np\n \nid\n=\n\"\navatarUrl\n\"\n>\nAvatar URL:\n</\np\n>\n\u00e2\u20ac\u2039\n \n<\niframe\n \nid\n=\n\"\nframe\n\"\n \nclass\n=\n\"\nframe\n\"\n \nallow\n=\n\"\ncamera *; microphone *; clipboard-write\n\"\n \nhidden\n>\n</\niframe\n>\n\u00e2\u20ac\u2039\n \n<\nscript\n>\n \nconst\n subdomain \n=\n \n'demo'\n;\n \n// Replace with your custom subdomain\n \nconst\n frame \n=\n document\n.\ngetElementById\n(\n'frame'\n);\n\u00e2\u20ac\u2039\n        frame\n.\nsrc \n=\n \n`\nhttps://\n${\nsubdomain\n}\n.readyplayer.me/avatar?frameApi\n`\n;\n\u00e2\u20ac\u2039\n        window\n.\naddEventListener\n(\n'message'\n,\n subscribe\n);\n        document\n.\naddEventListener\n(\n'message'\n,\n subscribe\n);\n\u00e2\u20ac\u2039\n \nfunction\n \nsubscribe\n(\nevent\n)\n \n{\n \nconst\n json \n=\n \nparse\n(\nevent\n);\n\u00e2\u20ac\u2039\n \nif\n \n(\njson\n?.\nsource \n!==\n \n'readyplayerme'\n)\n \n{\n \nreturn\n;\n \n}\n\u00e2\u20ac\u2039\n \n// Susbribe to all events sent from Ready Player Me once frame is ready\n \nif\n \n(\njson\n.\neventName \n===\n \n'v1.frame.ready'\n)\n \n{\n                frame\n.\ncontentWindow\n.\npostMessage\n(\n \nJSON\n.\nstringify\n({\n \ntarget\n:\n \n'readyplayerme'\n,\n \ntype\n:\n \n'subscribe'\n,\n \neventName\n:\n \n'v1.**'\n \n}),\n \n'*'\n \n);\n \n}\n\u00e2\u20ac\u2039\n \n// Get avatar GLB URL\n \nif\n \n(\njson\n.\neventName \n===\n \n'v1.avatar.exported'\n)\n \n{\n                console\n.\nlog\n(\n`\nAvatar URL: \n${\njson\n.\ndata\n.\nurl\n}\n`\n);\n                document\n.\ngetElementById\n(\n'avatarUrl'\n).\ninnerHTML \n=\n \n`\nAvatar URL: \n${\njson\n.\ndata\n.\nurl\n}\n`\n;\n                document\n.\ngetElementById\n(\n'frame'\n).\nhidden \n=\n \ntrue\n;\n \n}\n\u00e2\u20ac\u2039\n \n// Get user id\n \nif\n \n(\njson\n.\neventName \n===\n \n'v1.user.set'\n)\n \n{\n                console\n.\nlog\n(\n`\nUser with id \n${\njson\n.\ndata\n.\nid\n}\n set: \n${\nJSON\n.\nstringify\n(\njson\n)\n}\n`\n);\n \n}\n \n}\n\u00e2\u20ac\u2039\n \nfunction\n \nparse\n(\nevent\n)\n \n{\n \ntry\n \n{\n \nreturn\n \nJSON\n.\nparse\n(\nevent\n.\ndata\n);\n \n}\n \ncatch\n \n(\nerror\n)\n \n{\n \nreturn\n \nnull\n;\n \n}\n \n}\n\u00e2\u20ac\u2039\n \nfunction\n \ndisplayIframe\n()\n \n{\n            document\n.\ngetElementById\n(\n'frame'\n).\nhidden \n=\n \nfalse\n;\n \n}\n \n</\nscript\n>\n</\nbody\n>\n\u00e2\u20ac\u2039\n</\nhtml\n>",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/quickstart",
            "title": "Quickstart"
        }
    },
    {
        "page_content": "Apple ARKit\nReady Player Me avatars come with ARKit-compatible blend shapes.\nBoth half-body (VR) and full-body Ready Player Me avatars come with a blend shape based facial rig supporting Apple's \n[ARFaceAnchor.BlendShapeLocation](https://developer.apple.com/documentation/arkit/arfaceanchor/blendshapelocation)\n API.\nThis makes it possible to build applications that use real-time facial tracking with Ready Player Me avatars. \nList of supported blend shapes\n[](#list-of-supported-blend-shapes)\n// Blend shapes compatible with Apple ARKit (52)\neyeBlinkLeft\neyeLookDownLeft\neyeLookInLeft\neyeLookOutLeft\neyeLookUpLeft\neyeSquintLeft\neyeWideLeft\neyeBlinkRight\neyeLookDownRight\neyeLookInRight\neyeLookOutRight\neyeLookUpRight\neyeSquintRight\neyeWideRight\njawForward\njawLeft\njawRight\njawOpen\nmouthClose\nmouthFunnel\nmouthPucker\nmouthLeft\nmouthRight\nmouthSmileLeft\nmouthSmileRight\nmouthFrownLeft\nmouthFrownRight \nmouthDimpleLeft\nmouthDimpleRight\nmouthStretchLeft\nmouthStretchRight\nmouthRollLower\nmouthRollUpper\nmouthShrugLower\nmouthShrugUpper\nmouthPressLeft\nmouthPressRight\nmouthLowerDownLeft\nmouthLowerDownRight\nmouthUpperUpLeft\nmouthUpperUpRight\nbrowDownLeft\nbrowDownRight\nbrowInnerUp\nbrowOuterUpLeft\nbrowOuterUpRight\ncheekPuff\ncheekSquintLeft\ncheekSquintRight\nnoseSneerLeft\nnoseSneerRight \ntongueOut\n// Additional blend shapes\n\u200b\nmouthOpen\nmouthSmile\neyesClosed\neyesLookUp\neyesLookDown",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/avatars/morph-targets/apple-arkit",
            "title": "Apple ARKit"
        }
    },
    {
        "page_content": "Oculus OVR LipSync\nReady Playe Me avatars come with blend shapes to support the Oculus LipSync API.\nBoth half-body (VR) and full-body Ready Player Me avatars come with a blend shape based facial rig that supports the \n[Oculus Lipsync API](https://developer.oculus.com/downloads/package/oculus-lipsync-unity/)\n. All avatars have the \nviseme \nblend shapes required for real-time audio-based facial animation. \nThis makes it possible to build applications that use real-time facial animation based on audio input with Ready Player Me avatars.\nList of supported blend shapes\n[](#list-of-supported-blend-shapes)\n// Visemes compatible with Oculus LipSync SDK\n\u200b\nviseme_sil\nviseme_PP\nviseme_FF\nviseme_TH\nviseme_DD\nviseme_kk\nviseme_CH\nviseme_SS\nviseme_nn\nviseme_RR\nviseme_aa\nviseme_E\nviseme_I\nviseme_O\nviseme_U\n// Additional blend shapes\n\u200b\nmouthOpen\nmouthSmile\neyesClosed\neyesLookUp\neyesLookDown",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/avatars/morph-targets/oculus-ovr-libsync",
            "title": "Oculus OVR LipSync"
        }
    },
    {
        "page_content": "DELETE - Remove Asset from Application\nNote: All body parameters need to be inside a 'data' object, as shown in the example request at the bottom.\ndelete\nhttps://api.readyplayer.me/v1\n/assets/:id/application\nUse this endpoint to remove an asset from an application\nParameters\nPath\nid\n*\nstring\nThe id of the asset you want to update.\nBody\ndata.applicationId\n*\nstring\nThe id of the application you wish to remove the asset from.\nResponses\n201: Created\nA typical successful response\n400: Bad Request\nA validation error\n403: Forbidden\nA permissions error\nExample Request Body\n[](#example-request-body)\n{\n \n\"data\"\n:\n \n{\n \n\"applicationId\"\n:\n \n\"66568e46df136d3df8ce0d74\"\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/delete-remove-asset-from-application",
            "title": "DELETE - Remove Asset from Application"
        }
    },
    {
        "page_content": "GET - List Assets\nget\nhttps://api.readyplayer.me/v1\n/assets\nList Assets\nUse this endpoint to fetch a paginated list of assets. With query parameters, you control the order, the number of assets you want per page, and the selected page.\nParameters\nQuery\norder\nstring\nThe properties you would like to order the list by. You can specify multiple properties by adding the query param multiple times. Please check the example-response to check the names.\nBy default the order is ascending.\nIf want the descending one, add the `-` to the field name\nAllowed values:\nname, -name\nudpatedAt, -updatedAt\nhasApps, -hasApps\nlimit\nnumber\nThe amount of documents you want to fetch per page.\npage\nnumber\nThe page of documents you would like to fetch.\nResponses\n200: OK\nA typical success response\nExample Request\n[](#example-request)\nhttps://api.readyplayer.me/v1/assets?order=name&order=-updatedAt&limit=10&page=1\nExample Response\n[](#example-response)\n{\n \n\"data\"\n:\n \n[\n \n{\n \n\"id\"\n:\n \n\"63dbcb0571dad1e9aa85630c\"\n,\n \n\"type\"\n:\n \n\"outfit\"\n,\n \n\"gender\"\n:\n \n\"male\"\n,\n \n\"iconUrl\"\n:\n \n\"https://example.org/icon.png\"\n,\n \n\"modelUrl\"\n:\n \n\"https://example.org/model.glb\"\n,\n \n\"status\"\n:\n \n\"published\"\n,\n \n\"organizationId\"\n:\n \n\"61d8d13e5c7658ae34513411\"\n,\n \n\"name\"\n:\n \n\"my outfit\"\n,\n \n\"applicationIds\"\n:\n \n[\n \n\"63d8e1782096e0afb2dbbe9f\"\n \n],\n \n\"createdAt\"\n:\n \n\"2023-02-02T14:39:01.026Z\"\n,\n \n\"updatedAt\"\n:\n \n\"2023-02-02T14:39:08.656Z\"\n \n}\n \n],\n \n\"pagination\"\n:\n \n{\n \n\"totalDocs\"\n:\n \n1\n,\n \n\"limit\"\n:\n \n10\n,\n \n\"totalPages\"\n:\n \n1\n,\n \n\"page\"\n:\n \n1\n,\n \n\"pagingCounter\"\n:\n \n1\n,\n \n\"hasPrevPage\"\n:\n \nfalse\n,\n \n\"hasNextPage\"\n:\n \nfalse\n,\n \n\"prevPage\"\n:\n \n0\n,\n \n\"nextPage\"\n:\n \n0\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/get-list-assets",
            "title": "GET - List Assets"
        }
    },
    {
        "page_content": "PATCH - Update Asset\npatch\nhttps://api.readyplayer.me/v1\n/assets/:id\nUse this endpoint to update an asset\nParameters\nPath\nid\n*\nstring\nThe id of the asset you want to update.\nBody\ndata.name\nstring\nMinimum length of 1 character\ndata.type\nenum(string)\nPossible values:\noutfit\ndata.gender\nenum(string)\nPossible values:\nmale\n,\nfemale\ndata.modelUrl\nurl\nMust be a valid url pointing to a GLB file.\ndata.iconUrl\nurl\nMust be a valid url pointing to a PNG or JPG file.\nResponses\n201: Created\nA typical successful response\n400: Bad Request\nA validation error\n403: Forbidden\nA permissions error\nExample Request Body\n[](#example-request-body)\n{\n \n\"data\"\n:\n \n{\n \n\"name\"\n:\n \n\"New Asset\"\n,\n \n\"type\"\n:\n \n\"outfit\"\n,\n \n\"gender\"\n:\n \n\"male\"\n,\n \n\"modelUrl\"\n:\n \n\"https://example.org/model.glb\"\n,\n \n}\n}\nExample Response\n[](#example-response)\n{\n \n\"data\"\n:\n \n{\n \n\"id\"\n:\n \n\"640f2b0ed1dbab604a9955d0\"\n,\n \n\"type\"\n:\n \n\"outfit\"\n,\n \n\"gender\"\n:\n \n\"male\"\n,\n \n\"iconUrl\"\n:\n \n\"https://www.example.org/logo.png\"\n,\n \n\"modelUrl\"\n:\n \n\"https://www.example.org/model.glb\"\n,\n \n\"organizationId\"\n:\n \n\"63a58eb6df136d3df8ce0d74\"\n,\n \n\"name\"\n:\n \n\"asset updated\"\n,\n \n\"applicationIds\"\n:\n \n[],\n \n\"createdAt\"\n:\n \n\"2023-03-13T13:54:22.559Z\"\n,\n \n\"updatedAt\"\n:\n \n\"2023-03-13T13:54:22.559Z\"\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/patch-update-asset",
            "title": "PATCH - Update Asset"
        }
    },
    {
        "page_content": "POST - Add Asset to Application\nNote: All body parameters need to be inside a 'data' object, as shown in the example request at the bottom.\npost\nhttps://api.readyplayer.me/v1\n/assets/:id/application\nUse this endpoint to add an asset to an application\nParameters\nPath\nid\n*\nstring\nThe id of the asset you want to update.\nBody\ndata.applicationId\n*\nstring\nThe id of the application you wish to add the asset to.\nResponses\n201: Created\nA typical successful response\n400: Bad Request\nA validation error\n403: Forbidden\nA permissions error\nExample Request Body\n[](#example-request-body)\n\u00e2\u20ac\u2039\n{\n \n\"data\"\n:\n \n{\n \n\"applicationId\"\n:\n \n\"66568e46df136d3df8ce0d74\"\n \n}\n}\nExample Response\n[](#example-response)\n{\n \n\"data\"\n:\n \n{\n \n\"id\"\n:\n \n\"640f2b0ed1dbab604a9955d0\"\n,\n \n\"type\"\n:\n \n\"outfit\"\n,\n \n\"gender\"\n:\n \n\"male\"\n,\n \n\"iconUrl\"\n:\n \n\"https://www.example.org/logo.png\"\n,\n \n\"modelUrl\"\n:\n \n\"https://www.example.org/model.glb\"\n,\n \n\"organizationId\"\n:\n \n\"63a58eb6df136d3df8ce0d74\"\n,\n \n\"name\"\n:\n \n\"My new asset\"\n,\n \n\"applicationIds\"\n:\n \n[\n \n\"62cebaa1a04e199829e9277a\"\n \n],\n \n\"createdAt\"\n:\n \n\"2023-03-13T13:54:22.559Z\"\n,\n \n\"updatedAt\"\n:\n \n\"2023-03-13T13:54:22.559Z\"\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/post-add-asset-to-application",
            "title": "POST - Add Asset to Application"
        }
    },
    {
        "page_content": "POST - Create Asset\nNote: All body parameters need to be inside a 'data' object, as shown in the example request at the bottom.\npost\nhttps://api.readyplayer.me/v1\n/assets\nUse this endpoint to create a new asset\nParameters\nBody\ndata.name\n*\nstring\nMinimum length of 1 character\ndata.type\n*\nenum(string)\nPossible values:\noutfit\ndata.gender\n*\nenum(string)\nPossible values:\nmale\n,\nfemale\ndata.modelUrl\n*\nurl\nMust be a valid url pointing to a GLB file.\ndata.iconUrl\n*\nurl\nMust be a valid url pointing to a PNG or JPG file.\ndata.organizationId\n*\nstring\nThe id of the organization you wish to create the asset under.\n\\\n\\\nThis is directly linked to your permissions, and you will only be able to create assets for organizations which you have permission to.\ndata.applicationIds\narray\nList of application ids, this asset should be added to. If empty, this asset is not added to any application.\nResponses\n201: Created\nA typical successful response\n400: Bad Request\nA validation error\n403: Forbidden\nA permissions error\nExample Request Body\n[](#example-request-body)\n{\n \n\"data\"\n:\n \n{\n \n\"name\"\n:\n \n\"New Asset\"\n,\n \n\"type\"\n:\n \n\"outfit\"\n,\n \n\"gender\"\n:\n \n\"male\"\n,\n \n\"modelUrl\"\n:\n \n\"https://example.org/model.glb\"\n,\n \n\"iconUrl\"\n:\n \n\"https://example.org/icon.png\"\n,\n \n\"organizationId\"\n:\n \n\"62a58eb4df136d4df8ce0d74\"\n,\n \n\"applicationIds\"\n:\n \n[\n\"63a48eb488936d4df8ce0d74\"\n,\n\"63a48eb488939999f8ce0d74\"\n]\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/post-create-asset",
            "title": "POST - Create Asset"
        }
    },
    {
        "page_content": "POST - Upload Asset Files\npost\nhttps://api.readyplayer.me/v1\n/temporary-media\nUse this endpoint to upload asset models and icons\nIf the model and icon files you wish to use for your assets aren't available on a public URL, you can use this endpoint to upload the files to Ready Player Me. This endpoint will return a URL for each file upload which you can then use in \n[POST - Create Asset](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/post-create-asset)\n, or \n[PATCH - Update Asset](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/patch-update-asset)\n.\nParameters\nHeader\nContent-Type\n*\nmultipart/form-data\n\u200b\nBody\nfile\n*\nfile\n\u200b\nResponses\n200: OK\nA typical successful response\nPlease note, that this is only temporary storage. Files uploaded to this endpoint are being removed after 24h\nExample Response\n[](#example-response)\n{\n \n\"data\"\n:\n \n{\n \n\"url\"\n:\n \n\"your-image-or-model-url\"\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/assets/post-upload-model",
            "title": "POST - Upload Asset Files"
        }
    },
    {
        "page_content": "GET - Token\nget\nhttps://api.readyplayer.me/v1/\nauth/token\nRequest a token for iFrame session restoration\nThis token can be used to restore a user's session opening the iFrame. Learn how to use this in the Guide \n[Account Linking](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/account-linking)\n.\nThe request requires an API Key in the Header \nx-api-key.\nParameters\nPath\nuserId\n*\nString\nUser ID you want to get the access token for. Note, that this user needs to authorize your app first.\npartner\n*\nString\nYour partner name / subdomain.\nResponses\n200: OK\nSuccessfully created a Token\nSample Request\n[](#sample-request)\nhttps\n:\n//\napi.readyplayer.me\n/\nv1\n/\nauth\n/\ntoken\n?\nuserId\n=\n64943d471dc01e086ac887ee\n&\npartner\n=\nreadyplayermedemo",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/auth/get-token",
            "title": "GET - Token"
        }
    },
    {
        "page_content": "GET - 2D Avatars\nGet a 2D render of an avatar for stickers or profile pictures.\nget\nhttps://models.readyplayer.me\nGet avatar 2D render by id.\nGet an avatar 2D image with desired settings.\nParameters\nPath\navatarId.png\n*\nString\nID of an avatar.\nQuery\nscene\nString\nName of portrait type to render.\nblendShapes\nString\nMap of 3D meshes to their blend shapes.\nResponses\n200: OK\n2D Render of the avatar.\n404: Not Found\nThe requested avatar is not available.\nParameters, expected values, and examples\n[](#parameters-expected-values-and-examples)\n/avatarId.png\nExample\nID of an avatar with .png file extension.\nExpected values (String)\n6185a4acfb622cf1cdc49348.png\nIt may take some time to render the image in the backend for the initial request. For subsequent requests, the images will be fetched from cache and delivered much faster.\nRequest avatar render by ID.\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.png\nReturned value\nYou will receive a .png image\n[.](https://docs.fileformat.com/3d/glb/)\n\u200b\n?scene\nExample\nName of the portrait type to render.\nExpected values (String)\nfullbody-portrait-v1\n - Creates a portrait from a full-body avatar...\nfullbody-portrait-v1-transparent\n - ... with transparent background (default).\nhalfbody-portrait-v1\n - Creates a portrait from a half-body avatar...\nhalfbody-portrait-v1-transparent\n - ... with transparent background (default).\nfullbody-posture-v1-transparent\n - Creates a portrait with a pose from a full-body avatar.\nRequest avatar render with transparent fullbody posture\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.png?scene=fullbody-posture-v1-transparent\nRequest avatar render for full body portrait on dark background\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.png?scene=fullbody-portrait-v1\n?blendShapes\nExample\nMap of 3D meshes to their blend shapes.\nExpected values (String)\n\n\nblendShapes[Wolf3D_Head][mouthSmile]=0.2 }\nWolf3D_Head\n is the affected node in the avatar.\nmouthSmile\n is an example of a blend shape included in the avatar.\nYou can find all available blend shapes in \n[Full-body Avatars](https://docs.readyplayer.me/ready-player-me/api-reference/avatars/full-body-avatars)\n.\nYou can combine multiple blend shapes by concatenating them with '&' as shown in the following example:\n?blendShapes[Wolf3D_Head][mouthSmile]=0.2\n&\nblendShapes[Wolf3D_Head][browInnerUp]=0.2\nRequest a smiling avatar\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.png?blendShapes[Wolf3D_Head][mouthSmile]=0.8\nReturned value\nYou will receive a .png image of a smiling avatar.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-2d-avatars",
            "title": "GET - 2D Avatars"
        }
    },
    {
        "page_content": "GET - 3D avatars\nGet a 3D avatar GLB file with desired performance and configuration settings.\nget\nhttps://models.readyplayer.me\nGet an avatar GLB by id or by short code.\nGet an avatar 3D GLB model with desired performance and configuration settings.\nParameters\nPath\navatarId.glb\n*\nString\nID of an avatar.\nQuery\nquality\nString\nlow, medium or high - Use quality presets to combine performance related parameters.\nmeshLod\nInt\nControls the triangle count of the avatar.\ntextureSizeLimit\nInt\nSets the upper limit for texture resolution in pixels of any texture in the avatar.\ntextureAtlas\nInt\nGenerates a texture atlas of the desired resolution. The operation merges all meshes and splits opaque objects from transparent ones resulting in a maximum of 2 draw calls.\ntextureChannels\nString\nDefine which textureChannels should be included in the .glb. It can be a comma-separated combination of the following values: baseColor, normal, metallicRoughness, emissive, occlusion\nmorphTargets\nString\nComma-separated list of individual morph targets or morph target standard groups to include on the avatar.\nuseDracoMeshCompression\nBoolean\nReduces file size by compressing output avatars with Draco mesh compression. More effective on complex meshes.\nuseMeshOptCompression\nBoolean\nReduces file size by compressing output avatars with Mesh Optimization compression. More effective on meshes with morph targets.\npose\nString\nDefines the pose for a full-body avatar.\nuseHands\nBoolean\nToggles hands for half-body VR avatars.\nResponses\n200: OK\nModel/gltf-binary of avatar.\n404: Not Found\nThe requested model is not available.\nParameters, expected values, and examples\n[](#parameters-expected-values-and-examples)\nYou can combine multiple parameters by concatenating with \n&\n.\nSo for example requesting an avatar with meshLod 2 and without texture atlassing would look like that:\nhttps\n:\n//\nmodels.readyplayer.me\n/\n6185a4acfb622cf1cdc49348.glb\n?\nmeshLod\n=\n2\n&\ntextureAtlas=none\nParameters, expected values, and examples\n[](#parameters-expected-values-and-examples-1)\n/avatarId.glb\nExamples\nID or Shortcode of an avatar.\nExpected values (String)\n6185a4acfb622cf1cdc49348.glb\nABC123.glb\n\u00e2\u20ac\u2039\nNotes\nYou must include the \n.glb\n file extension or you will get a \n404\n return value.\nYou can get an avatar id or short code via \npostMessage\n returned from \n[Ready Player Me](https://readyplayer.me/avatar)\n. You can read more about how to do that at \n[Native Integration](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration)\n.\nWithout any of the optional parameters, the avatar is returned based on default values.\nRequest avatar by ID\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb\nRequest avatar by short code\nhttps://models.readyplayer.me/ABC123.glb\nReturned value\nYou will receive a standardized \n[.glb file.](https://docs.fileformat.com/3d/glb/)\n You can import and modify this file in any 3D software that supports this format.\n?quality\nExample\nUse quality presets to combine performance related parameters from below.\nExpected Values (String)\nlow\nmedium\nhigh\nThe values behind those presets are the following:\nlow (meshLod=2, textureSizeLimit=256, textureAtlas=256, morphTargets=none)\nmedium (meshLod=1, textureSizeLimit=512=textureAtlas=512, morphTargets=none)\nhigh (meshLod=0, textureSizeLimit=1024=textureAtlas=1024, morphTargets=none)\nAll other values overwrite quality. So e.g. you can use quality=low and overwrite the LOD with 0 to get the high-res avatar. See Examples.\nRequest an avatar with quality high\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?quality=high\nRequest an avatar with quality medium\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?quality=medium\nRequest an avatar with quality low\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?quality=low\nRequest an avatar with quality low but overwrite meshLod\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?quality=low&meshLod=0\n?meshLod\nExamples\nControl the triangle count of the returned avatar.\nExpected values (Number)\n0\n - No triangle count reduction is applied (default).\n1\n - Retain 50% of the original triangle count.\n2\n - Retain 25% of the original triangle count.\nRequest an avatar with meshLod 2\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?meshLod=2\n?textureSizeLimit\nExamples\nSet the upper limit for texture resolution in pixels of any texture in the avatar.\nExpected values (Number)\nThe value needs to be a multiple of two.\nMin: \n256\nMax: \n1024\n (default)\nRequest an avatar with textureSize limited to 512 x 512\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?textureSizeLimit=512\n?textureAtlas\nExamples\nGenerate a texture atlas of the desired resolution. This operation merges all meshes and splits opaque objects from transparent ones resulting in a maximum of 2 draw calls.\nThe texture atlas is generated for all PBR channels - baseColor, normal, metallicRoughness, emissive, and occlusion, if any of the assets making up the avatar includes them.\nExpected Values (String, Number)\nnone\n - Do not create a texture atlas (default).\n256\n - Create a texture atlas of 256x256px.\n512\n - Create a texture atlas of 512x512px.\n1024\n - Create a texture atlas of 1024x1024px.\nDisable texture atlas:\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?textureAtlas=none\nCreate 512px texture atlas:\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?textureAtlas=512\nAtlasing on - 1 draw call (without transparent objects)\nAtlassing off - 9 draw calls (without transparent objects)\n?textureChannels\nExamples\nSelect the texture channels you want to have included in the .glb. (By default, the .glb comes with all available channels).\nExpected Values (String)\nbaseColor\nnormal\nmetallicRoughness\nemissive\nocclusion\nnone\nYou can combine these values by comma separation. See examples.\nGet avatar with no textures\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?textureChannels=none\nGet avatar with only baseColor and normal map.\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?textureChannels=baseColor,normal\n?morphTargets\nExamples\nComma-separated list of individual morph targets or morph target standard groups to include on the avatar.\nExpected values (String)\nDefault\nARKit\nOculus Visemes\n+ or any supported \n[morph targets](https://docs.readyplayer.me/ready-player-me/api-reference/avatars/morph-targets)\n.\\\nThe default value is \n\"Default\"\n.\nDisable all morph targets\n?morphTargets=none\n\n\nUse selected morph targets\n\n\n?morphTargets=mouthSmile,mouthOpen\n\n\nUse morph target standard groups\n\n\n?morphTargets=ARKit,Oculus Visemes\n\n\nUse selected morph targets and standard group\n\n\n?morphTargets=mouthSmile,ARKit\nExample:\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?morphTargets=mouthSmile,ARKit\n?pose\nExamples\nDefine the pose for a full-body avatar.\nExpected values (String)\nA\n - Create a full-body avatar in A pose (default).\nT\n - Create a full-body avatar in T pose.\nOnly applies to full-body avatars.\nCreate an avatar in T-pose\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?pose=T\nCreate an avatar in A-pose\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?pose=A\n?useDracoMeshCompression\nExamples\nReduce the file size by compressing output avatars with Draco mesh compression.\nExpected values (Boolean)\ntrue\n - Enable compression.\nfalse\n - No compression (default).\nDraco mesh compression is disabled by default for maximum compatibility for various glTF loaders.\nRequest an avatar with Draco mesh compression turned on\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?useDracoMeshCompression=true\n?useMeshOptCompression\nExamples\nReduce the file size by compressing output avatars with Mesh Optimization compression. This technique is more effective on avatars with morph targets.\nExpected values (Boolean)\ntrue\n - Enable compression.\nfalse\n - No compression (default).\nMesh Optimization compression is disabled by default for maximum compatibility for various glTF loaders.\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?useMeshOptCompression=true\n?useHands\nExamples\nToggle hands for half-body VR avatars.\nExpected values (Boolean)\nfalse\n - Do not include hands with half-body VR avatars.\ntrue\n - Include hands with half-body VR avatars (default).\nOnly applies to half-body avatars.\nEnable hands for half-body VR avatars\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.glb?useHands=true\nThe default values above only apply when you have not requested any changes to those settings previously.\n\nPlease reach out to\n \n[[email\u00a0protected]](https://docs.readyplayer.me/cdn-cgi/l/email-protection#b3c0c6c3c3dcc1c7f3c1d6d2d7cac3dfd2cad6c19dded6)\n \nif you want to reset your default settings.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-3d-avatars",
            "title": "GET - 3D avatars"
        }
    },
    {
        "page_content": "GET - Metadata\nGet the metadata of an avatar in JSON format.\nget\nhttps://models.readyplayer.me\nGet avatar metadata by avatar id.\nGet avatar metadata in JSON format.\nParameters\nPath\navatarId.json\n*\nString\nID of an avatar.\nResponses\n200: OK\nMetadata of the avatar.\n404: Not Found\nThe requested avatar is not available.\nParameters, expected values, and examples\n[](#parameters-expected-values-and-examples)\n/avatarId.json\nExample\nRequest metadata for an avatar.\nExpected values (String)\n6185a4acfb622cf1cdc49348.json\n - Avatar id with .json ending.\nRequest metadata for an avatar\nhttps://models.readyplayer.me/6185a4acfb622cf1cdc49348.json\nReturned value\n1\n{\n2\n \n\"bodyType\"\n:\n\"fullbody\"\n,\n3\n \n\"outfitGender\"\n:\n\"masculine\"\n,\n4\n \n\"outfitVersion\"\n:\n2\n,\n5\n \n\"skinTone\"\n:\n\"#ffe5ce\"\n,\n6\n \n\"createdAt\"\n:\n\"2021-11-05T21:39:56.684Z\"\n,\n7\n \n\"updatedAt\"\n:\n\"2021-11-05T21:39:56.684Z\"\n8\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-metadata",
            "title": "GET - Metadata"
        }
    },
    {
        "page_content": "POST - Create User\nCreate a Ready Player Me Guest User\npost\nhttps://api.readyplayer.me/v1\n/users\nCreate a guest user\nCreate a guest user account for your user.\n \n[Learn more.](https://docs.readyplayer.me/ready-player-me/integration-guides/advanced-user-management/guest-accounts)\n\u200b\nParameters\nBody\ndata.applicationId\n*\nString\nUser will be authorized for this application\nResponses\n200: OK\nSuccessfully created the user\n401: Unauthorized\nYour API Key is not valid to make this operation\nSample Body:\n{\n \n\"data\"\n:\n \n{\n \n\"applicationId\"\n:\n \n\"638ef6e05c3df04745922bbb\"\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/users/post-create-user",
            "title": "POST - Create User"
        }
    },
    {
        "page_content": "EyeAnimationHandler\nAnimate avatar eye blinking.\nRotates and blinks the eyes of the avatar randomly. \nTo add eye blinking to your avatar, do one of the following.\nSelect \nComponent > Ready Player Me >EyeAnimationHandler.\nAt runtime, use Unity's \nAddComponent()\n method.\nProperties\n[](#properties)\nProperty\nType\nDescription\nBlinkSpeed\nfloat\nHow fast the eyes blink in seconds.\nBlinkInterval\nfloat\nFrequency of eye blinking in seconds.\nExample\n[](#example)\nprivate\n \nvoid\n \nAvatarLoadedCallback\n(\nGameObject\n avatar\n)\n{\n \n    avatar\n.\nAddComponent\n<\nEyeRotationHandler\n>\n();\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/eyeanimationhandler",
            "title": "EyeAnimationHandler"
        }
    },
    {
        "page_content": "VoiceHandler\nMouth animation using microphone feedback.\nUses microphone feedback to animate the \nmouthOpen\n \nblend shape based on the amplitude of the voice. The animation will have a 1-second delay due to the minimum recording length.\nTo add mouth animations to your avatar, do one of the following.\nSelect \nComponent > Ready Player Me >VoiceHandler.\nAt runtime, use Unity's \nAddComponent()\n method.\nProperties\n[](#properties)\nProperty\nType\nDescription\nAudioClip\nAudioClip\nAudio clip to play.\nAudioSource\nAudioSource\nAudio Source that will play the provided audio. If not assigned in the Inspector, it will be created on the same object as the VoiceHandler component.\nAudioProviderType\nAudioProvider\nEnum type of audio provider. \nMicrophone or Audio Clip.\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nPlayCurrentAudioClip()\nvoid\nPlays the current Audio Clip.\nPlayAudioClip(\n    AudioClip audioClip)\nvoid\nSets the current Audio Clip with the given parameter and plays it.\nExamples\n[](#examples)\nprivate\n \nvoid\n \nAvatarLoadedCallback\n(\nGameObject\n avatar\n)\n{\n \n    avatar\n.\nAddComponent\n<\nVoiceHandler\n>\n();\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/voicehandler",
            "title": "VoiceHandler"
        }
    },
    {
        "page_content": "Avatar Creator for Android & iOS\nLet users create avatars on their Android and iOS devices.\nUsers can create Ready Player Me avatars seamlessly in a WebView displayed within a Unity application.\nPrerequisites\n[](#prerequisites)\nReady Player Me SDK. \nYou need the Ready Player Me SDK for Unity installed in your project to retrieve avatars. See the \n[Quickstart guide](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n for instructions.\nDeploying the app.\n In order to test your WebView app, you have to deploy it to a physical or virtual device. See the Unity documentation on how to do that.\n\u200b\n[Android](https://docs.unity3d.com/Manual/android.html)\n development with Unity documentation.\n\u200b\n[iOS ](https://docs.unity3d.com/Manual/iphone.html)\ndevelopment with Unity documentation.\nProject setup (Android and iOS)\n[](#project-setup-android-and-ios)\nCreating a Scene with a WebView in your Unity project is the same for Android and iOS.\n1.\nCreate or open your Unity project. \n2.\nImport the Ready Player Me SDK into your project, if you haven't done so already.\n3.\nNavigate to \nAssets > Plugins > Ready Player Me > Examples > Webview Examples\n.\n4.\nOpen the \nWebviewExample\n Scene. \n5.\nIn the \nHierarchy\n, notice the \nWebviewTest \ngame object. It has a \nWebViewExample\n script component, as well as a Canvas with some buttons.\n6.\nOpen and examine the \nWebviewExample\n \nscript\n. Notice the following.\nVariables for a \nGameObject avatar\n, as well as fields for the UI elements. \nStart()\n adds Listeners to the buttons.\nDisplayWebView()\n creates a Webview for the Avatar Creator if there isn't one. \nOnAvatarCreated()\n. Once the avatar has been created by the user, this callback destroys any existing avatar, instantiates an \nAvatarLoader\n, sets callbacks for success and failure, and then loads the current avatar. \nHideWebView()\n hides the WebView.\nDestroy()\n cleans up the listeners. \n7.\nOpen the \nBuild Settings\n to set up deployment for your chosen platform.\nDeploy on Android\n[](#deploy-on-android)\n1.\nIn \nBuild Settings\n, set the \nPlatform \nto Android. \n2.\nCheck \nDevelopment Build\n.\n \n3.\nClick \nPlayer Settings...\n.\n4.\nFind \nPlayer > Other Settings > Identification\n.\nCheck \nOverride Default Package Name\n.\nSet a unique \nPackage Name\n in the format \ncom.YourCompanyName.YourProductName\n.\n5.\nFind \nPlayer > Other Settings > Under Configuration > Camera Usage Description\n and put some descriptive text in this mandatory field. \n6.\nFind \nPlayer > Other Settings > Under Configuration > Microphone Usage Description\n and put some descriptive text in this mandatory field.\n7.\nClose the \nProject Settings\n. \n8.\nOn your device, turn on \nUSB debugging\n in your Developer Options settings.\n9.\nConnect your device to your computer. \n10.\nClick \nBuild and Run\n.  \n11.\nOnce the app opens on your device, click the button. Give permissions, and off you go. \nAlternatively, you can build the APK and deploy it on your own.\nFor release builds, see the Unity and Android documentation.\nTroubleshooting\n[](#troubleshooting)\nIf you don't have a subdomain, this warning will pop up, and you can click \nContinue with 'demo' subdomain\n.\n\n\u200b\nIf your package name does not comply with the required format, you will get this warning and can't continue until you fix it. \n\n\u200b\nDeploy on iOS\n[](#deploy-on-ios)\n1.\nIn \nBuild Settings\n, set the \nPlatform \nto iOS\n.\n2.\nSelect \nDebug \nand check \nDevelopment build\n.\n3.\nFind \nPlayer > Other Settings > Identification\n.\nCheck \nOverride Default Package Name\n.\nBefore you build your Project for iOS, make sure that you set the \nBundle Identifier\n.\nSet a \nPackage Name\n in the format \ncom.YourCompanyName.YourProductName\n.\nFill in the \nSigning Team ID\n (not required for Debug builds to complete).\nYou can also choose whether your app targets the simulator or an actual device. To do this, change the\n SDK version** >> Target SDK\n to Simulate SDK or Device SDK.\n4.\nFind \nPlayer > Other Settings > Under Configuration > Camera Usage Description\n and put some descriptive text in this mandatory field. \n5.\nFind \nPlayer > Other Settings > Under Configuration > Microphone Usage Description\n and put some descriptive text in this mandatory field.\n6.\nClose \nProject Settings\n. \n7.\nClick \nBuild\n. \n8.\nIn the file explorer, find your \nBuilds \nfolder and in it the \nUnity-iPhone.xcodeproj\n.\nPublication follows the the standard procedure for publishing Unity projects to iOS. \nPublishing for iOS is different from publishing for platforms such as Windows or macOS. Due to restrictions in access to development tools, Unity can only create an Xcode project for an iOS game or app and not build the binary directly. \nSee these resources:\nIn this tutorial, you will learn to publish applications to iOS. \n[https://learn.unity.com/tutorial/how-to-publish-to-ios-2019-3#5e340ca6edbc2a05676e5676](https://learn.unity.com/tutorial/how-to-publish-to-ios-2019-3#5e340ca6edbc2a05676e5676)\n \n\u200b\n[https://docs.unity3d.com/Manual/StructureOfXcodeProject.html](https://docs.unity3d.com/Manual/StructureOfXcodeProject.html)\n\u200b\n\u200b\n[https://docs.unity3d.com/Manual/iphone-GettingStarted.htm](https://docs.unity3d.com/Manual/iphone-GettingStarted.html)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-android-and-ios",
            "title": "Avatar Creator for Android & iOS"
        }
    },
    {
        "page_content": "Avatar Creator for VR and PC\nUse the Vuplex plugin to embed the Avatar Creator in your Unity project.\nUsers can create Ready Player Me avatars seamlessly in a Vuplex WebView displayed within a Unity application. Note that this is a paid plugin.\nPrerequisites\n[](#prerequisites)\nReady Player Me SDK. \nYou need the Ready Player Me SDK for Unity imported into your Unity project to retrieve avatars. See the \n[Quickstart guide](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n for download and setup instructions.\nReady Player Me Vuplex Example Project\n[](#ready-player-me-vuplex-example-project)\n\u200b\n[-> Checkout the Vuplex example project on GitHub](https://github.com/readyplayerme/Unity-Vuplex-Example)\n\u200b\nThis repository contains a Unity project that uses the Vuplex Web Browser plugin to run the Ready Player Me Avatar Creator and load the Ready Player Me Avatar into the application at runtime. \nFollow the steps in the \n[Readme](https://github.com/readyplayerme/Unity-Vuplex-Example)\n to learn how it works and how to set it up.\nKnown Issues\n \n[](#known-issues)\nWith the older versions of Vuplex, you might experience issues with scrolling in the website. Make sure you are using \nversion 4.1\n or later.\nAlthough the non-Gecko Engine based version of Vuplex Android WebView has a smaller package size, you might experience intermittent 3D canvas freezing on the Ready Player Me website with \nQuest 2 \nbuilds. We recommend using the Gecko Engine based version for a more reliable experience.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-vr-and-pc",
            "title": "Avatar Creator for VR and PC"
        }
    },
    {
        "page_content": "Avatar Creator for WebGL\nLet users create avatar in your Unity WebGL applications.\nUsers can create Ready Player Me avatars seamlessly within a Unity WebGL application.\nPrerequisites\n[](#prerequisites)\nReady Player Me SDK. \nYou need the Ready Player Me SDK for Unity installed with your project to retrieve avatars. See the \n[Quickstart guide](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n for download and setup instructions.\nReady Player Me WebGL Example project\n[](#ready-player-me-webgl-example-project)\n\u200b\n[-> Checkout the WebGL example on GitHub.](https://github.com/readyplayerme/Unity-WebGL-Example)\n\u200b\nDownload and open the sample Unity Project from GitHub.\nFollow the steps in the \n[Readme](https://github.com/readyplayerme/Unity-WebGL-Example/blob/main/README.md)\n to learn how it works and how to set it setup.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-webgl",
            "title": "Avatar Creator for WebGL"
        }
    },
    {
        "page_content": "Avatar Creator (Desktop)\nIntegrate the Avatar Creator with your Unity desktop project.\nThis sample project uses the \n[paid Vuplex Web Browser plugin](https://developer.vuplex.com/webview/overview)\n to run the Ready Player Me Avatar Creator and load the Ready Player Me avatar into the application at runtime. Use this as a reference for adding Ready Player Me avatars and embed the Ready Player Me Avatar Creator directly into your Unity application.\nDownload and open the sample Unity Project from GitHub.\n\n[https://github.com/readyplayerme/Unity-Vuplex-Example](https://github.com/readyplayerme/Unity-Vuplex-Example)\n\u200b\nFollow the steps in the \n[Readme](https://github.com/readyplayerme/Unity-Vuplex-Example#readme)\n for setup and to learn how it works.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/avatar-creator-desktop",
            "title": "Avatar Creator (Desktop)"
        }
    },
    {
        "page_content": "Avatar Creator (Mobile)\nIntegrate the Avatar Creator with a mobile app.\nThis example demonstrates how to integrate a Ready Player Me WebView into a Unity Scene. This feature lets users create Ready Player Me avatars directly in a WebView browser displayed in Unity at runtime on mobile devices. \nWith the Ready Player Me SDK installed, find the sample code in\n\nReady Player Me/ Examples/WebView Example/WebViewExample.cs\nRunning the project\n[](#running-the-project)\n1.\nInclude the \nWebView Example/WebViewExample\n Scene in a mobile platform build.\n2.\nOpen the Scene on the device and click \nDisplay WebView\n.\n3.\nA WebView loads, and you can create a Ready Player Me avatar.\n4.\nOnce avatar creation is complete, the WebView closes and the avatar is loaded into the Scene.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/avatar-creator-mobile",
            "title": "Avatar Creator (Mobile)"
        }
    },
    {
        "page_content": "Avatar Creator (WebGL)\nIntegrate the Avatar Creator with you Unity WebGL project.\nThe Avatar Creator can be integrated into your WebGL Unity Project. This requires setting up the communication between the Avatar Creator and your Unity application.\nDownload and open the sample Unity Project from GitHub.\n\n[https://github.com/readyplayerme/Unity-WebGL-Example](https://github.com/readyplayerme/Unity-WebGL-Example)\n\u200b\nThis sample project uses a custom WebGL template to embed the Ready Player Me character creator inside an application to seamlessly add avatars. Use this as a reference for adding Ready Player Me avatars to your Unity WebGL application.\nThis example has been tested in Unity 2020.3LTS and newer versions.\nSee \n[Troubleshooting ](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting)\nif you encounter build errors. \nRunning the project\n[](#running-the-project)\n1.\nMake sure you are building for WebGL and \nScenes/WegGLExample\n is incluided in the Build Settings.\n2.\nOpen Project \nSettings > Player > Settings for WebGL > Resolution and Presentation\n and select the template for your version of Unity.\n3.\nBuild and run the project. You should see the Avatar Creator, be able to create an avatar, close the Avatar Creator, and see the avatar in the scene. \nUsing the template\n[](#using-the-template)\nFor more details, see the \n[Readme](https://github.com/readyplayerme/Unity-WebGL-Example/blob/main/README.md)\n on GitHub or in your project folder. \nFor Unity 2019 use the RPM_2019 Template. For later versions, use the RPMTemplate.\n\u200b\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/avatar-creator-webgl",
            "title": "Avatar Creator (WebGL)"
        }
    },
    {
        "page_content": "Distance-based LODs\nConfigure distance-based rendering.\nThe Ready Player Me Avatar Loader module includes an AvatarLod example that can be imported from the Unity Package Manager window.\nAfter importing the AvatarLod sample you can find the code sample in\n\nAssets/Samples/Ready Player Me Avatar Loader/1.0.0/AvatarLod/AvatarLodExample.cs\nThis example demonstrates how to load multiple levels of detail (LOD) for avatar meshes and configure distance-based render optimization. By enabling LOD, Unity displays the appropriate LOD level for the rendered avatar based on the avatar's distance from the camera.\nUsing the \n[Avatar API ](https://docs.readyplayer.me/ready-player-me/api-reference)\nand \n[Avatar Configurations](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n, this approach downloads multiple avatar LODs, extracts the avatar meshes, and configures the final avatar with LOD support enabled.\nThis example does not support Avatar Configurations with TextureAtlas=None.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/distance-based-lods",
            "title": "Distance-based LODs"
        }
    },
    {
        "page_content": "Loading 2D Avatars\nCode sample that demonstrates how to load 2D avatars at runtime.\nThis example demonstrates how to request an avatar render image via the Render API and apply the result to a UI sprite. This approach may be useful for showing a profile picture of an avatar in a heads-up display or use it as a button icon.\nThis example has been tested in Unity 2020.3LTS and newer versions.\nScene and Code\nAssets/Samples/Ready Player Me Avatar Loader/1.0.0/AvatarRender/AvatarRenderExample\n1.\nOpen and play the \nAvatarRender/AvatarRenderExample\n Scene.\n2.\nOpen the\n AvatarRenderExample.cs script\n.\nNotice that a 2D render uses the same avatar URL as the 3D render of the same avatar.\nCreates an instance of \nAvatarRenderLoader\n. \nDefines the \nOnCompleted()\n callback for the \nAvatarRenderLoader\n; this is called when loading has successfully completed and creates a sprite for the avatar.\nCalls \nLoadRender()\n with the URL for the avatar to load, the type of scene to render, the name of the target blend shape mesh, and the blend shapes. \nSee the \n[AvatarRenderLoader API](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarrenderloader)\n documentation for details on \nLoadRender()\n arguments.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/loading-2d-avatars",
            "title": "Loading 2D Avatars"
        }
    },
    {
        "page_content": "Loading 3D Avatars\nCode sample that demonstrates how to load an avatar at runtime.\nThese examples have been tested in Unity 2020.3LTS and newer versions.\nLoading one 3D avatar at runtime\n[](#loading-one-3d-avatar-at-runtime)\nThe \nAvatarLoadingExample.cs\n script demonstrates how to load \none avatar\n at runtime. \nScene and Code\n\nAssets/Samples/Ready Player Me Avatar Loader/1.0.0/AvatarLoading/AvatarLoadingExample\n1.\nOpen and play the AvatarLoadingExample Scene. The example loads an avatar (and includes a Debug Log panel described below). \n2.\nOpen the \nRuntimeExample.cs script\n, which loads the avatar as follows.\nCreates an instance of AvatarLoader: \nvar avatarLoader = new AvatarObjectLoader();\nDefines the \nOnCompleted()\n callback for the \nAvatarObjectLoader\n this is called when loading has successfully completed. \nAdds an Avatar Configuration to the \nAvatarObjectLoader\n from Assets > Plugins > ReadyPlayerMe > Resources > Data > AvatarConfigurations.\nCalls \nLoadAvatar()\n with the URL for the avatar to load. This operation will download, import, and load the avatar model into the Scene.\nLoading multiple 3D avatars at runtime\n[](#loading-multiple-3d-avatars-at-runtime)\nThis code sample demonstrates how to load \nmultiple avatars\n at runtime. \nScene and Code\n\nAssets/Samples/Ready Player Me Avatar Loader/1.0.0/MultipleAvatarLoading/MultipleAvatarLoadingExample\n1.\nOpen and play the \nMultipleAvatarLoadingExample\n Scene. The example loads several avatars (and includes a Debug Log panel described below). \n2.\nOpen the \nMultipleAvatarLoadingExample.cs script\n.\nNotice that there is only one avatar URL.\nLoading works in the same way as for one avatar and is repeated for every avatar to load.\nThe variations in the avatar are created by using a list of different configurations that are applied in \nOnCompleted() -> OnAvatarLoaded()\n after the avatar has been loaded.\nDebug panel\n[](#debug-panel)\nCode\n\n\nAssets/Plugins/Ready Player Me/Examples/Runtime Example/Runtime Debug Panel\nThe \nDebug Panel\n displays the avatar loader log output while the Scene is running in the Unity Editor or on a target device. \nYou can pause or hide the Debug Panel while playing, or select the Runtime Test game object and disable the DebugPanel(Script) component in the Inspector. \nThe Debug Panel is provided to assist in troubleshooting avatar loading issues on the device. Include the information contained in the log output with any support queries that you submit via our Technical Support channels.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/loading-3d-avatars",
            "title": "Loading 3D Avatars"
        }
    },
    {
        "page_content": "Avatar Caching\nStore avatar assets and date locally.\nThe SDK provides an experimental avatar caching functionality. If avatar caching is enabled, every time an avatar is loaded, its assets are stored locally. If you subsequently try to load the avatar again, the system checks if the avatar needs to be updated, and if so, downloads and saves the updated avatar locally. If the avatar does not need to be updated, the avatar is loaded from the locally stored file.\nAvatar caching is available at runtime and includes support for \n[Avatar Configurations](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n.\nIf a Ready Player Me user changes an existing avatar, for example, chooses a different hairstyle, then the avatar needs to be redownloaded even if it is cached locally. This ensures that the application loads the most up-to-date avatar.\nEnable Caching\n[](#enable-caching)\nAvatar caching is disabled by default. To enable avatar caching, do the following.\n1.\nOpen \nReady Player Me > Settings\n.\n2.\nCheck \nAvatar caching enabled\n.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nWe recommend deleting any previously created cache after updating to the latest version of the Ready Player Me Unity SDK. \nSee \n[Manage avatar cache data](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-caching#manage-avatar-cache-data)\n below for details.\nCustom Avatar Configuration parameters\n[](#custom-avatar-configuration-parameters)\nWhen Avatars are loaded via the Avatar API, you can include custom Avatar Configuration parameters to control the configuration of the downloaded avatar. Customizations include texture settings, mesh LODs, and included morph targets. \nSee \n[Load Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars)\n \nfor more information and links to example code.\nStored avatar data location\n[](#stored-avatar-data-location)\nDownloaded avatar data is stored based not only on the avatar GUID, but also the assigned Avatar Configuration parameters. This means that multiple instances of an avatar's data may exist in cache at any given time.\nAvatar data is stored at\n<Persistent Data Path>/Avatars/<avatar GUID>/<Avatar Config parameters hash>/\nPreviously, downloaded avatar data for a specific avatar GUID was stored at\n<Persistent Data Path>/Avatars/<avatar GUID>/\nCached avatar data use and updating\n[](#cached-avatar-data-use-and-updating)\nAt runtime, when caching is enabled via the Ready Player Me Settings window, the Avatar Loader checks the state of the avatar on the Ready Player Me server before downloading. If the avatar has not been modified since it was last stored in the client-side cache, the avatar data for the given avatar GUID and Avatar Configuration parameters are loaded from the cache.\nIf changes were made to the avatar on the Ready Player Me server, the client-side cache for the given avatar GUID is cleared and recreated when subsequent \nAvatarObjectLoader.LoadAvatar()\nrequests are made.\nIf the avatar download is interrupted or aborted during data transmission, any corrupt client-side cache data is deleted and recreated the next time the avatar is downloaded.\nDisable Caching \n[](#disable-caching)\n1.\nOpen \nReady Player Me > Settings\n.\n2.\nUncheck \nAvatar caching enabled\n.\nIf caching is disabled, the Avatar Loader always downloads the avatar data from the Ready Player Me server and overwrites data stored on the client. Only one copy of the avatar is stored on the client and replaced on each avatar load request. \nIf different Avatar Configuration parameters are used for multiple avatar load requests, the parameter hash subfolder name will be replaced in the client-side cache storage.\nManage avatar cache data\n[](#manage-avatar-cache-data)\nYou can use the following methods to clear the cache on-device for built applications.\n\u00e2\u20ac\u2039\n[AvatarCache.Clear()](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarcache)\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n[AvatarCache.ClearAvatar(string guid)](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarcache)\n\u00e2\u20ac\u2039\nTo clear cache data manually in the Unity Editor, do one of the following.\nCall \nAvatarCache.Clear()\nto clear all client-side cache or \nAvatarCache.ClearAvatar(string guid)\nto clear all client-side cache for a specific avatar GUID.\nOpen \nReady Player Me > Settings\n and click \nClear local avatar cache\n.\nOpen \nReady Player Me > Settings\n and click \nReveal in Finder\n (Mac) or \nShow in Explorer\n (Windows) to go to the \nAvatars \nfolder containing the data.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nUnity Editor Avatar Loader never caches\n[](#unity-editor-avatar-loader-never-caches)\nAvatar caching is not supported when avatars are loaded via the Ready Player Me Avatar Loader window inside the Unity Editor. \nWhen you download avatars using the Avatar Loader window, the avatar data is always downloaded from the server, and a single instance of the avatar data is stored in the project folder.\n<Project Folder>/Assets/Ready Player Me/Avatars/\nEach time a new avatar is requested, with or without new Avatar Configuration parameters, the stored avatar data is overwritten and the prefab is updated.\nExamples\n[](#examples)\nTo get started with Avatar Caching support, see the \n[Runtime Example](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples)\n Scenes included with the SDK at \nAssets/Samples/Ready Player Me Avatar Loader/1.0.0/AvatarLoading/AvatarLoadingExample\n\u00e2\u20ac\u2039",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-caching",
            "title": "Avatar Caching"
        }
    },
    {
        "page_content": "Avatar Configuration\nApply Avatar API parameters to avatar loading.\nThe Ready Player Me Avatar API allows partners to specify the Avatar Configuration parameters to apply when loading avatars. These configuration parameters can be applied in the Unity Editor Avatar Loader or at runtime.\nThe SDK provides functionality for loading avatars with specific configurations. For example, you may need a high-quality detailed avatar for showing the model at close range, and a low-quality avatar that will be rendered in a single draw call for other situations. You can set the configuration for each avatar with a custom Avatar Config data asset.\nSee the \n[API Reference](https://github.com/wolfprint3d/ReadyPlayerMe-Docs-v3/blob/master/integration-guides/unity/optimize/broken-reference/README.md)\n for details.\nAvatar Configs will only work with the new avatar API URLs. If you have a saved URL in your project, you may need to regenerate the avatar and update the URL in order to use the Avatar Config.\nAvatar Configuration templates\n[](#avatar-configuration-templates)\nSeveral Avatar Configuration templates are included in the SDK with recommended settings for high, medium, and low quality avatars. Find the templateas at\n/Packages/Ready Player Me Core/Configurations/\nYou can click and drag these into the Assets folder to duplicate an AvatarConfig that you can then edit.\nCreate an Avatar Configuration\n[](#create-an-avatar-configuration)\n1.\nSelect \nAssets > Create > Scriptable Objects > Ready Player Me > Avatar Configuration\n. This creates a new Avatar Configuration asset in the current folder.\n2.\nGive your Avatar Configuraton a name.\n3.\nSelect your Avatar Configuration to open it in the Inspector.\n4.\nChange the settings according to your requirements.\nAvatar Configuration Settings\n[](#avatar-configuration-settings)\nSee the Avatar API \n[3D Avatars](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-3d-avatars)\n page for details on these options.\nMesh LOD:\n Choose a level of detail (high, medium for 50%, or low for 25%). Run \nReady Player Me > Examples > Runtime Example > RuntimeExampleMultipleQuality\n to see how this looks.\nPose:\n Choose A Pose or T Pose.\nTexture Atlas:\n Turn on texture atlassing and choose the atlas size.\nTexture Size Limit:\n Set an upper limit on texture size.\nUse Hands:\n Check to include hands with half-body VR avatars.\nMorph Targets:\n List of individual morph targets or morph target standard groups to include on the avatar. Click \nAdd\n and then select your target from the menu.\nApply an Avatar Configuration\n[](#apply-an-avatar-configuration)\nAvatar Configurations can be applied in the Unity Editor Avatar Loader or at runtime.\nEditor Avatar Loader\n[](#editor-avatar-loader)\n1.\nOpen your scene.\n2.\nOpen \nReady Player Me > Settings\n.\n3.\nAssign an Avatar Configuration to the \nAvatar Configuration\n setting.\n4.\nOpen \nReady Player Me > Avatar Loader\n.\n5.\nAssign your avatar URL.\n6.\nClick \nLoad Avatar into the Current Sence\n. The specified avatar with the specified Avatar Configuration is loaded into the current scene.\nRuntime Avatar Object Loader\n[](#runtime-avatar-object-loader)\n1.\nIn your code, create an instance of \nAvatarObjectLoader\n.\n2.\n[Optional] Load a previously created Avatar Configuration asset or instantiate a new \nAvatar Configuration\n scriptable object and set its parameters.\n3.\n[Optional] Assign the Avatar Configuration to the \nAvatarConfig\n property of the \nAvatarObjectLoader\n instance.\n4.\nCall the \nLoadAvatar()\n method on the \nAvatarLoader\n instance, passing a valid avatar URL.\n5.\nThe Avatar Configuration assigned to the URL will be applied to the loaded avatar.\nIf no Avatar Configuration is assigned to an \nAvatarObjectLoader\n instance, the Avatar Configuration selected in the Ready Player Me Settings window is applied.\nExamples\n[](#examples)\nFind example usage of Avatar Configurations in the SDK Runtime Examples at\nAssets\\Samples\\Ready Player Me Avatar Loader\\1.0.0\\AvatarLoading\\\n.\nSee also \n[More Examples](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration",
            "title": "Avatar Configuration"
        }
    },
    {
        "page_content": "Defer Agents\nWhen loading glTFs, \nglTFast\n let's you optimize towards one of two diametrical goals\nA stable frame rate\nFastest loading time\nBy default each \nGltfAsset\n instance tries not to block the main thread for longer than a certain time budget and defer the remaining loading process to the next frame / game loop iteration.\nIf you load many glTF files at once, by default they won't be aware of each other and collectively might block the main game loop for too long.\nYou can solve this by using a \"defer agent\". It decides if work should continue right now or at the next game loop iteration. \nglTFast\n comes with two defer agents\nTimeBudgetPerFrameDeferAgent\n for stable frame rate\nUninterruptedDeferAgent\n for fastest, uninterrupted loading\nThis excerpt is taken from \n[glTFast documentation](https://github.com/atteneder/glTFast/blob/5c36f4405012b13ad14ec871b77ba063c53cbbc3/Documentation~/ImportRuntime.md#tune-loading-performance)\n.\nIf no defer agent is specified, default defer agent is set to \nUninterruptedDeferAgent\n.\nTo Set A Defer Agent\n[](#to-set-a-defer-agent)\n1.\nWe provide a prefab for setting the \nTimeBudgetPerFrameDeferAgent\n, you can find it in \nReady Player Me Avatar Loader/Resources\n.\n\u200b\n2.\nThis can than be referenced in GLTF defer agent field in settings.\nThe reason for creating our own wrapper around glTFast defer agent is to provide developers with option to create their own custom defer agent.\nCustom Defer Agent\n[](#custom-defer-agent)\nA custom defer agent can be created by implementing \nIDeferAgent\n provided by glTFast. To use it with Ready Player Me, attach a \nDeferAgent\n component to the gameObject and reference the gameObject in settings menu.\npublic\n \nclass\n \nCustomDeferAgent\n:\n \nMonoBehaviour\n,\n \nIDeferAgent\n \n{\n \npublic\n \nbool\n \nShouldDefer\n()\n \n \n{\n \nreturn\n \nfalse\n;\n \n \n}\n \n \npublic\n \nbool\n \nShouldDefer\n(\nfloat\n duration\n)\n \n{\n \nreturn\n \nfalse\n;\n \n}\n\u200b\n \npublic\n \nTask\n \nBreakPoint\n()\n \n{\n \nreturn\n \nnull\n;\n \n}\n \n \npublic\n \nTask\n \nBreakPoint\n(\nfloat\n duration\n)\n \n{\n \nreturn\n \nnull\n;\n \n}\n}\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/defer-agents",
            "title": "Defer Agents"
        }
    },
    {
        "page_content": "Avatar loading issues\nErrors and known issues.\nAvatar does not load on application build\n[](#avatar-does-not-load-on-application-build)\nIf avatar loading works in the Unity Editor but not in the built application, the glTFast shaders are likely missing. To fix this, add them to the \nPreloaded Shaders\n list in the \nGraphics Settings\n. \nIn the Unity Editor, go to \nEdit > Project Settings > Graphics\n and find the \nPreloaded Shaders \nlist. Add the \nglTFastShaderVariants\n collection as shown below.\nExample of adding shaders to the Preloaded shaders list in Project Settings.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/avatar-loading-issues",
            "title": "Avatar loading issues"
        }
    },
    {
        "page_content": "Firewall issues\nErrors and known issues.\nFirewall prevents access to Ready Player Me server\n[](#firewall-prevents-access-to-ready-player-me-server)\nIf your app is behind a (corporate) firewall or on a private network, the following domains need to be resolvable from your client in order to access the Ready Player Me avatar creation and customization web interface, and to be able to download the resulting avatars.\nreadyplayer.me\ncname.vercel-dns.com\navatars.readyplayer.me\nd1a370nemizbjq.cloudfront.net\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/firewall-issues",
            "title": "Firewall issues"
        }
    },
    {
        "page_content": "iOS issues\nErrors and known issues.\niOS WebView not loaded\n[](#ios-webview-not-loaded)\nWebView is supported by iOS 14.3 and newer. \nIf you are using any version before 14.3, then it may not work.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/ios-issues",
            "title": "iOS issues"
        }
    },
    {
        "page_content": "Package installation issues\nErrors and known issues\nUnity editor is stuck endlessly importing assets\n[](#unity-editor-is-stuck-endlessly-importing-assets)\nIf Unity gets stuck importing assets after you add our core package via the package manager, it is likely caused by a compilation error or a module failing to import. \nA common cause is when our core packages module installer fails to install the glTFast plugin. One of the reasons might be that your machine does not have Git LFS installed, which is required because the glTFast repo uses LFS. \nIn any case, if Unity gets stuck during this step, you can do the following to complete the installation of our Unity packages. \n1.\nManually close and restart the Unity project.\n2.\nReopen the project (there will be compilation errors. You can ignore these for now).\n3.\nOpen the package manager and check which of these plugins are missing.\n\n\u200b\n4.\nAdd each missing package by clicking the + icon in the Unity package manager and the appropriate URLs below.\n// glTFast\nhttps://github.com/atteneder/glTFast.git#v5.0.0\n\u200b\n//Ready Player Me Avatar Loader\nhttps://github.com/readyplayerme/rpm-unity-sdk-avatar-loader.git\n\u200b\n//Ready Player Me WebView\nhttps://github.com/readyplayerme/rpm-unity-sdk-webview.git\nUnable to import any of the Ready Player Me Unity packages\n[](#unable-to-import-any-of-the-ready-player-me-unity-packages)\nIf you are having problems importing any RPM unity packages from the git URL, here are some things to check. \nEnsure the git URL is valid.\n[](#ensure-the-git-url-is-valid.)\nUnfortunately, Unity doesn't trim the URL's you paste into the package manager. As such, you need to make sure that the URL you are copying and pasting doesn't have any extra characters, like a space at the start or the end.  \nFor example:\n// invalid as it has a space before https\n\" https://github.com/readyplayerme/rpm-unity-sdk-core.git\" \n// invalid as it has a space after .git\n\"https://github.com/readyplayerme/rpm-unity-sdk-core.git \" \n// valid\n\"https://github.com/readyplayerme/rpm-unity-sdk-core.git\" \nEnsure you have Git and Git LFS installed\n[](#ensure-you-have-git-and-git-lfs-installed)\nTo add packages from the Unity package manager via Git URL, you must have Git installed on your machine. \nIn addition, the glTFast packages repository uses Git LFS, and as such, it requires Git LFS to be installed on your machine for it to work correctly. So to prevent errors, make sure this is also installed. \nHere are links to download \n[Git](https://git-scm.com/downloads)\n and \n[Git LFS](https://git-lfs.com/)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/package-installation-issues",
            "title": "Package installation issues"
        }
    },
    {
        "page_content": "Unity SDK 2.0 Migration guide\nOur Unity SDK has undergone a major transition to a modular architecture in order to ensure its maintainability and extendability. As part of this transition, several breaking changes have been introduced from the previous Unity SDK 1.x.\nThis guide outlines these changes and provides instructions on how to migrate from the old Unity SDK 1.x to the new one.\nThe new Unity SDK\n[](#the-new-unity-sdk)\nWe reorganized the modules into Unity Packages, made a few necessary changes to the API, and the samples now can be imported on demand.\nModules\n[](#modules)\nThe Ready Player Me Unity SDK 2.0 has been split into separate modules to improve development processes and to better enable development on different parts of the SDK simultaneously. As such, the Unity SDK consists of two main modules.\n\u00e2\u20ac\u2039\n[Unity SDK Core](https://github.com/readyplayerme/rpm-unity-sdk-core)\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n[Unity SDK Avatar Loader](https://github.com/readyplayerme/rpm-unity-sdk-avatar-loader)\n\u00e2\u20ac\u2039\nUnity-SDK-Core\n[](#unity-sdk-core)\nUnity-SDK-Core contains all the core functionality of the Ready Player Me Unity SDK, plus all the classes and structures that are commonly used in other modules. The following components are included in the Unity-SDK-Core module.\nModule update and install manager\nCustom editor window base class\nOptional editor analytics\nCore RPM Avatar classes and data structures\nAvatar config and RPM settings classes\nUnity-SDK-\nAvatar-Loader\n[](#unity-sdk-avatar-loader)\nThis module contains all the classes and structures related to loading avatar models and avatar renders.\nReady Player Me plugins moved to Packages\n[](#ready-player-me-plugins-moved-to-packages)\nThe new SDK modules are \nno longer installed in the Assets folder\n but are\n in the Packages folder\n with all the other Unity plugins.\nAlso because of this, all Scriptable Objects and other assets inside the modules are immutable, meaning that they can not be edited. If you would like to create your own version of a Scriptable Object or Animator from one of our modules, you can create a duplicate of the asset and place it in the Assets folder so that you can customize it as you wish. For example, drag and drop \nAvatar Animator.asset\n from \nPackages/Ready Player Me Avatar Loader/Resources\n to \nAssets/Ready Player Me/Resources\n.\nAPI changes\n[](#api-changes)\nNew GLTF/GLB loader plugin\n[](#new-gltf-glb-loader-plugin)\nWe have deprecated the support and use of GLTFUtility in favour of a new plugin GLTFast. The default avatar loader will be using glTFast APIs to load avatar models from .glb files.\nYou can find the glTFast plugin on GitHub.\n\u00e2\u20ac\u2039\n[https://github.com/atteneder/glTFast](https://github.com/atteneder/glTFast)\n\u00e2\u20ac\u2039\nAvatarLoader class is now AvatarObjectLoader\n[](#avatarloader-class-is-now-avatarobjectloader)\nDue to the new Unity SDK\u00e2\u20ac\u2122s modular structure, we used namespaces to separate the code between packages. For the \nAvatarLoader\n we used the \nReadyPlayerMe.AvatarLoader\n namespace and renamed \nthe \nAvatarLoader.cs\n class to \nAvatarObjectLoader.cs\n. This fixes any namespace clash and is more appropriate to the script's function. \nIf you have any custom scripts that use Avatar loader it is likely that you will need to update the code.\nFor example:\n// Old API\nvar avatarLoader = new AvatarLoader();\n// New API\nvar avatarLoader = new AvatarObjectLoader();\nWebView class is now WebViewPanel\nThe WebView modules WebView.cs class has been changed to a WebViewPanel.cs class and the API to initialize the WebView has changed.\nFor Example:\n// Old API\nWebView.CreateWebView()\n// New API\nWebViewPanel.LoadWebView()\nUrlConfig class added for WebView\nThe WebView module has a UrlConfig.cs class that can be used to configure features of the Avatar Creator website by adding query parameters to the URL. \nFor more information on the configuration or query parameters refer to our \n[documentation](https://docs.readyplayer.me/ready-player-me/api-reference/avatar-creator#configuration)\n.\nSample Scenes\n[](#sample-scenes)\nBecause the plugin is installed via the Package Manager the packages will now show up in the Package Manager window as shown below.\nYou can find also and import the sample Scenes from here as they are no longer imported by default.\nFor example, to import the AvatarLoader example Scene (previously called RuntimerLoaderExample), do the following.\n1.\nOpen the \nPackage Manager\n window.\n2.\nExpand the \nPackages - Ready Player Me\n section.\n3.\nSelect the \nReady Player Me Avatar Loader\n package.\n4.\nExpand the Samples section.\n5.\nClick the \nImport \nbutton next to AvatarLoading.\nThe sample Scene will now import into the folder as shown below.\nAssets/Samples/Ready Player Me Avatar Loader/PACKAGE_VERSION_NUMBER/SAMPLE_NAME\nMigration Guide\n[](#migration-guide)\nFollow the steps below to import the Unity SDK into a fresh project or an existing project that already has the old SDK in it.\nFor this, to work you need to have Git installed on your machine. After installation, you will also need to restart Unity. Git can be downloaded from \n[here](https://git-scm.com/downloads)\n.\n1. Backup\n[](#1.-backup)\nIt is \nrecommended\n that you back up your project before updating to the new Unity SDK if you are not using source control as there are a lot of big changes both in architecture and with the APIs.\n2. Import the Ready Player Me Unity SDK\n[](#2.-import-the-ready-player-me-unity-sdk)\nYou must import the new Ready Player Me Unity SDK via the Unity Packager Manager. If you have a project that does not have the previous Unity SDK, this process is easy and automated. Follow the steps in 2.a).\nIf you want to upgrade the RPM Unity SDK in an existing project, you have to follow a more manual approach in 2.b).\n2.a) Import the Unity SDK 2.0 into a new project\n[](#2.a-import-the-unity-sdk-2.0-into-a-new-project)\nThe new Ready Player Me Unity SDK must be imported via the Unity Packager Manager by importing via the Git URL of our core module. The Unity-Core package automatically imports all dependencies (glTFast, WebView, Avatar-Loader).\nDependencies will only be installed if you do not have any compile errors.\n1.\nWith Unity Editor open go to \nWindow>Package Manager\n.\n\n\n\n2.\nClick the \n+\n icon in the top left corner of the Package Manager window.\n\n\n3.\nClick \nAdd package from git URL\n.\n4.\nPaste this URL to our Core module: \nhttps://github.com/readyplayerme/rpm-unity-sdk-core.git\n.\n\n\n5.\nClick \nAdd \nand wait for the plugins and all required dependencies to be installed.\n6.\nOnce the import process is complete, you will notice that it automatically created two assets.\nAvatarLoaderSettings (scriptable object)\nCoreSettings (scriptable object)\n\n\u00e2\u20ac\u2039\n2.b) Import the Unity SDK 2.0 into a Project with the old Unity SDK\n[](#2.b-import-the-unity-sdk-2.0-into-a-project-with-the-old-unity-sdk)\nI\nf you have customized \navatar configurations\n or made changes to the animator that\u00e2\u20ac\u2122s delivered with the SDK, you should back them up so that you can refer to them after you have updated to the new SDK.\nRemove old Unity SDK\nTo remove the old SDK, delete the following folders from inside the Assets/Plugins folder, if they are present.\nAssets/Plugins/Ready Player Me\nAssets/Plugins/GLTFUtility\nAssets/Plugins/Newtonsoft Json\nAssets/Plugins/WebView\nImport the new Unity SDK and its dependencies\nIf you have any compile errors as a result of removing the old Ready Player Me Unity SDK, the auto module installer included in the Core package will fail to import the other package and dependencies. You will need to manually import the other 3 dependencies via the Unity Package Manager by importing via the Git URL.\n1.\nWith Unity Editor open, go to \nWindow > Package Manager\n.\n2.\nClick the \n+\n icon in the top left corner of the Package Manager window.\n3.\nClick \nAdd package from git URL\n.\n4.\nPaste this the URL to our Core module: \nhttps://github.com/readyplayerme/rpm-unity-sdk-core.git\n5.\nClick \nAdd \nand wait for the plugins to be installed.\n6.\nRepeat this for the following three packages (the order is important):\n1.\nhttps://github.com/atteneder/glTFast.git#v5.0.0\n2.\nhttps://github.com/readyplayerme/rpm-unity-sdk-avatar-loader.git\n3.\nhttps://github.com/readyplayerme/rpm-unity-sdk-webview.git\n7.\nOnce the import process is complete, you will need to manually create two assets in the \nReady Player Me \u00e2\u2020\u2019 Resources \u00e2\u2020\u2019 Settings\n Folder. You can do this by \nright-click \u00e2\u2020\u2019 Create \u00e2\u2020\u2019 Scriptable Objects \u00e2\u2020\u2019 Ready Player Me \u00e2\u2020\u2019\nAvatarLoaderSettings (scriptable object)\nCoreSettings (scriptable object)\nThe name and location of those files are important. \nPlease do not change\n.\n8.\nFix compile errors due to API changes and namespaces. See \n[API Changes Section](https://www.notion.so/Unity-SDK-2-0-Migration-Guide-32ca364853f44b35ac527bf61fa100ed)\n\u00e2\u20ac\u2039\n[ ](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/unity-sdk-2.0-migration-guide#api-changes)\nabove.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/unity-sdk-2.0-migration-guide",
            "title": "Unity SDK 2.0 Migration guide"
        }
    },
    {
        "page_content": "Updating to the new SDK\nUpdate to the latest version of the Ready Player Me Unity SDK.\nIf you are not using version control on your project, we recommend that you back it up before updating the Unity SDK.\nIf you have an earlier version of the SDK installed, follow the \n[Unity SDK 2.0 Migration Guide](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/unity-sdk-2.0-migration-guide)\n.\n1.\nCheck for updates from the Unity toolbar by selecting \nReady Player Me > Check for updates.\n\n\n2.\nIf an update is available for one of the SDK modules, you will see a popup window with the option to update or skip.\n\n\n3.\nClick the \nUpdate \nbutton to automatically remove the old module and install the latest version.\n\n\n4.\nBuild and run your project, and everything should work as expected.\nIf you need additional support, contact our support team at \n[[email\u00a0protected]](https://docs.readyplayer.me/cdn-cgi/l/email-protection#cfbcbabfbfa0bdbb8fbdaaaeabb6bfa3aeb6aabde1a2aa)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/updating-from-earlier-versions",
            "title": "Updating to the new SDK"
        }
    },
    {
        "page_content": "WebGL issues\nErrors and known issues.\nCannot build for WebGL on Unity 2021\n[](#cannot-build-for-webgl-on-unity-2021)\nIn Unity 2021, WebGL builds that include Newtonsoft JSON may encounter build issues. \nOne suggested solution is to change the \"Regional format\" in your build device's OS to English.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/webgl-issues",
            "title": "WebGL issues"
        }
    },
    {
        "page_content": "Integration guide[Deprecated]\nIntegrate Ready Player Me with your Unity Project\nGuides\n[](#guides)\n[1. QuickstartLoad your first personal avatar into Unity in less than 10 minutes.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n[2. Load AvatarsLearn how to load 2D and 3D avatars in your game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars)\n[3. Avatar CreatorIntegrate and customize the ready-to-use Avatar Creator into your game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator)\n[4. AnimationsLearn, how to add animations and facial expressions to your avatars.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/loading-mixamo-animations)\n[5. OptimizeOptimize avatars depending on your available computing and graphics power.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize)\nMore on the Unity SDK\n[](#more-on-the-unity-sdk)\n[API ReferenceExplore the API of the SDK in detail.](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk)\n[ChangelogTrack all changes to the Unity SDK.](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/changelog)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity",
            "title": "Integration guide[Deprecated]"
        }
    },
    {
        "page_content": "Reference [Deprecated]\nReference for the Ready Player Me Unity SDK.\nDependencies\n[](#dependencies)\nDependencies are already included in the \n.unitypackage\n Unity package.\nGLTFUtility - \n[https://github.com/wolfprint3d/GLTFUtility](https://github.com/wolfprint3d/GLTFUtility)\n\u200b\nUnity Webview - \n[https://github.com/wolfprint3d/Unity-WebView-for-Mobile](https://github.com/wolfprint3d/Unity-WebView-for-Mobile)\n\u200b\nNewtonsoft JSON - 12.0.1.22727 (Do not import, if you already have a version of Newtonsoft JSON in your project)\nClass Reference\n[](#class-reference)\n\u200b\n[Avatar Loader](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarloader)\n\u200b\n\u200b\n[AvatarConfig](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarconfig)\n\u200b\n\u200b\n[AvatarRenderLoader](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarrenderloader)\n\u200b\n\u200b\n[WebView](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/webview)\n\u200b\n\u200b\n[Avatar Cache](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarcache)\n\u200b\n\u200b\n[SDK Logger](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/sdklogger)\n\u200b\n\u200b\n[Extras](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras)\n (\n[EyeAnimationHandler](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/eyeanimationhandler)\n, \n[VoiceHandler](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/voicehandler)\n)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk",
            "title": "Reference [Deprecated]"
        }
    },
    {
        "page_content": "Blender FBX export to UE\nExport Ready Player Me avatars from Blender as FBX for use in UE.\n1. Export FBX from Blender\n[](#1.-export-fbx-from-blender)\n1.\nDownload the avatar .glb file you want to use.\n2.\nOpen Blender on an empty scene.\n3.\nSelect\n File>Import>GLTF 2.0\n  and then select the .glb file you downloaded. \n4.\nWait for the import to complete and the model to appear in your Blender scene.\n5.\nSelect \nFile/Export/FBX\n. The \nBlender File View\n window opens.\n6.\nNotice the \nOperator Presets\n on the right.  \n7.\nAdjust them as shown in the \nFBX Export Settings\n below.\nOperator Presets for FBX export settings.\nFBX Export Settings \n[](#fbx-export-settings)\nThe following instructions assume that your current FBX export settings are the Blender Operator Defaults. \nSetting\nDescription\nOperator Presets > Path Mode\nSet \nPath Mode\n to \nCOPY\n.\nClick the icon next to the \nPath Mode\n dropdown so that it changes and is highlighted blue. This enables texture embedding.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nTransform Tab\n[](#transform-tab)\nSet \nApply Scalings\n to \nFBX Units Scale\n.\nUncheck \nApply Units\n.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nGeometry Tab (Optional)\n[](#geometry-tab-optional)\nThese settings prevent import error warnings about smoothing. Nothing actually breaks!\nSet \nSmoothing \nto \nEdge\n.\nCheck \nTangent Space\n.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nArmature Tab\n[](#armature-tab)\nUncheck \nAdd Leaf Bones\n.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nSummary of export settings.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n2. Convert to Mixamo compatible skeleton\n[](#2.-convert-to-mixamo-compatible-skeleton)\nImporting the exported FBX straight from Blender into Unreal Engine and trying to use the\n RP_Mixamo_Skeleton\n will cause an error labeled \"FAILED TO MERGE BONES\".\nBefore you import your FBX file into Unreal Engine, you must upload the exported FBX to Mixamo and then download it again. This is because Mixamo applies modifications to the skeleton structure/transforms that make it compatible with the Mixamo animation library. \nWithout this step, there will be UE import errors that make the FBX file incompatible with the Ready Player Me reference skeleton and animation blueprint. \n1.\nOpen \n[mixamo.com](https://www.mixamo.com)\n and login as required.\n2.\nClick \nUpload Character \nand upload the avatar FBX you have exported from Blender.\n3.\nFollow the prompts until you see your model in the 3D preview.\n4.\nClick \nDownload\n.\nSee also \n[Loading Maximo Animations](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations/loading-mixamo-animations)\n.\n3. Import into Unreal Engine\n[](#3.-import-into-unreal-engine)\nDrag the FBX into your project, adjust \nFBX Import Options\n, then \nImport.\nSet the \nSkeleton \nto use \nRPM_Mixamo_Skeleton\n.\nUnder \nAdvanced\n, check \nImport Morph targets\n if you require them.\nUnder \nMiscellaneous\n, check \nConvert Scene Unit\n to ensure the mesh is imported at the correct scale.\nSee \n[Loading Maximo Animations](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations)\n for details.\nIf you don't see \nImport Morph Targets\n, click the small triangle \n below the skeleton to expand the \nMesh \nsection.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations/blender-to-unreal-export",
            "title": "Blender FBX export to UE"
        }
    },
    {
        "page_content": "Loading Mixamo animations\nHow to add Mixamo animations to Ready Player Me avatars.\nReady Player Me full-body avatars are compatible with \n[Mixamo](https://www.mixamo.com/)\n\u200b\n[ ](http://www.mixamo.com/)\nanimations. Ready Player Me \n[full-body avatars]()\n include a \n[Mixamo](http://mixamo.com)\n compatible full-body skeletal rig that makes it possible to use animations exported from Mixamo. \nTo download and use animations on full-body avatars do the following.\n1.\nFind in a file explorer: \n[PROJECT_NAME]/Plugins/ReadyPlayerMe/Resources/RPM_Animation_Reference.zip\n. \n2.\nUnpack the Zip file to a folder. Notice the \nRPM_Avatar_Reference.fbx\n file. This FBX is delivered inside a Zip file because otherwise it would be imported into Unreal Engine and converted into a Mixamo incompatible .uasset file.\n3.\nGo to \n[www.mixamo.com](http://www.mixamo.com/)\n and log in with your Adobe credentials or create an account.\n4.\nClick \nUpload Character\n.\n \n\u200b\n5.\nUpload the\nRPM_Avatar_Reference.fbx\n file.\n6.\nAfter Mixamo completes processing the animation target, click \nNext\n. \n7.\nPick an animation of your choice.\n8.\n Click \nDownload\n.\n\n\u200b\n9.\nIn the \nDownload Settings\n dialog, select \nFormat \nas \nFBX binary\n and \nSkin \nas \nWithout Skin\n. Leave \nFrames per Second\n as 30 and \nKeyframe Reduction\n as none.\n\u200b\n10.\nClick \nDownload\n. The file will download to your default download folder.\n11.\nDrag and drop the FBX file into your project's Content Browser. \n12.\nIn the \nFBX Import Options\n popup, in the \nMesh\n section, uncheck the \nImport Mesh\n checkbox.\n13.\nFind \nMesh > Skeleton\n. In the dropdown, choose the preconfigured \nRPM_Mixamo_Skeleton.\n\n \n\u200b\n14.\nIn the \nTransform\n section find the \nImport Rotation\n and change the X rotation to 90. This will prevent the animation from being imported with the wrong rotation.\n\n\u200b\n15.\nClick \nImport\n.\n16.\nOnce imported, you can add the animation to an animation blueprint of your own, or add it to the example Blueprint \nBP_RPM_Animation\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations/loading-mixamo-animations",
            "title": "Loading Mixamo animations"
        }
    },
    {
        "page_content": "Oculus Lipsync integration\nApply Oculus Lip Sync facial animations to the Ready Player Me avatars\nOculus Lipsync is a plugin provided by Meta that can be used to sync avatar lip movements to speech sounds and laughter. Meta provides public \n[documentation](https://developer.oculus.com/documentation/unreal/audio-ovrlipsync-unreal/)\n and an example project for the OVRLipSync integration. \nImportant:\n To integrate OVRLipSync you first need to read and agree to \nMeta's\n terms and conditions of using the plugin.\nReady Player Me avatars come with \nOculus Viseme\n morph targets needed for the OVRLipSync plugin.\nPlugin setup\n[](#plugin-setup)\nYou need to follow the steps described in the \n[OVRLipSync setup documentation](https://developer.oculus.com/documentation/unreal/audio-ovrlipsync-unreal/#download-and-setup)\n. When you finish with the described steps, you would have the \nOVRLipSync\n plugin successfully added to your project. You can also check the public example provided by Meta to better understand how it works.\nNote: While in UE4 everything will work out of the box, for UE5 you would need to do manual fixes inside of the ovrLipSync plugin, the project wasn't updated for a while. Open the \nOVRLipSyncEditorModule.cpp\n file and add the following line in line \n90\n. \nSoundWave->LoadingBehavior = ESoundWaveLoadingBehavior::ForceInline;\n . Open the \nOVRLipSync.Build.cs\n file and add \nAndroidPermission\n dependency to the PublicDependencyModuleNames dependencies.\nFollow the steps for setting Up \nReady Player Me Unreal SDK\n for the created project.\nNow that all of the plugins are added to the project and the project is compilable we can start with adding Blueprint files.\nThere are two ways you can integrate the OVRLipSync:\n1.\nBy live capturing the sound from an external audio source and applying it to OVRLipSync.\n2.\nBy playing an already existing soundtrack track and applying it to OVRLipSync.\nThe plugin provides two actor components \nOVRLipSync\n used for live capturing and \nOVRLipSyncPayback\n used for playing the existing sound. In this example, for simplicity, we will use \nOVRLipSyncPayback\n with an already-existing soundtrack.\nFrame sequence for the sound\n[](#frame-sequence-for-the-sound)\nIn the first step, we import the speech audio file to the project. Right-click on the imported audio file and from the dropdown select \nGenerate LipSyncSequence\n. A new FrameSequence blueprint file will be created next to the audio file. This file will be used by the \nOVRLipSyncPayback\n component.\n\u200b\n\u200b\nAvatar config\n[](#avatar-config)\nTo load avatars that contain \nOculus Viseme\n morph targets, we need to create An avatar config and a standard morph target group. We simply duplicate \nDA_RPM_AvatarConfig\n and \nDA_RPM_StandardMorphTargetGroup\n from the ReadyPlayerMe plugin into our project and change them. We add the \nOculus Viseme\n morph target group to the duplicated data asset.\n\u200b\n\u200b\n\u200b\n\u200b\n\u200b\nThe next step is to create a \nBP_RPM_Actor\n actor blueprint that will represent the talking model. We will add 4 components to it. SkeletalMesh, Audio, ReadyPlayerMe, and OVRLipSyncPlayback.\n\u200b\n\u200b\nComponent setup\n[](#component-setup)\nIn the SkeletalMesh component, we set the skeletal mesh to \nRPM_Mixamo_SkeletalMesh\n.\nIn the Audio component, we set the sound to the speech sound we want to play and disable the \nAuto Activate\n flag to play the sound after the avatar is loaded. We can also position it close to the mouth of the avatar in the viewport and make it a child of the SkeletalMesh component so that the sound will be attached to the mesh.\nIn the ReadyPlayerMe component, we set the avatar URL to the avatar that we want to load. Target Skeleton to \nRPM_Mixamo_Skeleton\n. Avatar config to the newly created \nDA_VisemeAvatarConfig\n.\nIn the OVRLipSyncPlayback component, we set the sequence property to the generated FrameSequence blueprint file.\nBlueprint logic\n[](#blueprint-logic)\nIn the \nBegin Play\n event, we hide the skeletal mesh and load the avatar. When the new avatar is loaded we show the skeletal mesh and call the Start function of the OVRLipSyncPayback component, to start paying the animation.\nThe morph target names of the Ready Player Me avatars are slightly different from the hardcoded names that are added in the OVRLipSync plugin, they have a `\nviseme_\n` prefix. For applying the correct names for the morph targets, select the \nOVRLipSyncPayback\n component, open the properties tab, and click on the \n+\n button next to the \nOn Visemes Ready\n. This will create an event in the event graph. In this event, we call the \nAssign Visemes to Morph Targets\n function of the OVRLipSyncPayback component and set the list of morph target names. Below is the list of morph target names in the order that is required.\nviseme_sil, viseme_PP, viseme_FF, viseme_TH, viseme_DD, viseme_kk, viseme_CH, viseme_SS, viseme_nn, viseme_RR, viseme_aa, viseme_E, viseme_I, viseme_O, viseme_U\nWe are done with the integration, we place the actor on the map and press the play button, and we will get the following result.\nOculusLipSyncDemo.mp4\n7MB\nBinary\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/animations/oculus-lipsync-integration",
            "title": "Oculus Lipsync integration"
        }
    },
    {
        "page_content": "Custom Avatar Creator\nIntegrate and customize the Ready Player Me Avatar Creator with your Unreal Engine application.\nYou can integrate the Ready Player Me Custom Avatar Creator using AvatarCreator open-source plugin. The plugin is an in-engine implementation of the web avatar creator.\nNote that same as the SDK the Custom Avatar Creator in Unreal Engine works from UE 4.27 and higher and works on all the supported platforms. It also requires projects with the SDK already integrated into them.\nDownload the plugin\n[](#download-the-plugin)\nYou can Add the latest released version of the \n[AvatarCreator](https://github.com/readyplayerme/rpm-unreal-avatar-creator/releases/latest)\n open-source plugin to your project and see it working in the AvatarCreatorDemo map.\n[GitHub - readyplayerme/rpm-unreal-avatar-creator: Ready Player Me Avatar Creator for Unreal EngineGitHub](https://github.com/readyplayerme/rpm-unreal-avatar-creator)\nFollow the steps in the \n[ReadMe](https://github.com/readyplayerme/rpm-unreal-avatar-creator#readme)\n and learn how it works and how it is set up.\nQuick Start\n[](#quick-start)\nA demo map is included in the plugin for demonstrating how the \nSample Avatar Creator\n opens at runtime. It is located in the \nRpmAvatarCreator\\Content\\Maps\n folder. To add the AvatarCreator widget to your project simply copy the existing blueprint logic from the demo map into your project.\nAvatarCreator is a widget that can be added to a map or another widget. Inside the DemoMap we create and add the widget to the viewport. \nAvatarCreator\n can be customized by providing default values when the widget is created. We need to subscribe to the \nAvatar Saved\n event to get the URL when the avatar is saved. We need to subscribe to the \nAvatar Selected\n event as well to get the URL when the avatar is selected from the list of user avatars. Additionally, we can load an avatar with this URL afterward.\nCustomization Options\n[](#customization-options)\nUse the Sample project\n[](#use-the-sample-project)\nWhen spawning the \nAvatar Creator\n widget, it's possible to configure it with the specified parameters.\nCustomization options:\nPartner Domain\n Specify your partner domain\nSelect Body Type\n Allows skipping the body type selection screen\nSelect Gender\n Allows skipping the gender selection screen\nAllow Close Button\n Hides the close button\nAllow Webcam\n Enables the selfie selection screen if the webcam is available\nDefault Avatar Ids\n Specify the avatars that will be shown on the \nPick An Avatar\n page. Default avatars are the template avatars that will be used for creating new avatars. \nImportant\n this field needs to be filled with the avatar ids from the demo map.\nDuplicate The Sample\n[](#duplicate-the-sample)\nThe plugin \nContent\n represents a sample project, if you want to have a completely different UI, you can duplicate the sample project and change the UI. If you duplicated the sample and customized the UI in an older version of the plugin, you can check the change log and update manually your custom UI according to the changes.\nUI From Scratch\n[](#ui-from-scratch)\nAvatarCreator\n sample uses \nAvatarCreatorApi\n C++ class for communicating with the \nReady Player Me\n Backend. The plugin \nContent\n can be completely rewritten to suit your project needs while using the \nAvatarCreatorApi\n for communication with the Backend.\n\u00e2\u20ac\u2039",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/avatar-creator-integration/custom-avatar-creator",
            "title": "Custom Avatar Creator"
        }
    },
    {
        "page_content": "Lyra project integration example\nDemo of Ready Player Me Avatars integrated with the UE5 Lyra project.\nThe Lyra example is Unreal Engine only content and may not be used outside of its ecosystem. Ready Player Me is not affiliated with Epic Games.\nThe Lyra Project\n[](#the-lyra-project)\nLyra is a full-fledged project demonstrating many of Unreal Engine's features and capabilities. Familiarize yourself with an overview of the project in the\n \n[Unreal Engine Lyra Sample Game](https://docs.unrealengine.com/5.0/en-US/lyra-sample-game-in-unreal-engine/)\n \ndocumentation.\nLyra\n is a learning resource designed as a sample game project to help you understand the frameworks of \nUnreal Engine 5\n (\nUE5\n). Learn more about the Lyra project in the \n[Unreal Engine Lyra Sample Game](https://docs.unrealengine.com/5.0/en-US/lyra-sample-game-in-unreal-engine/)\n documentation.\nLyra and Ready Player Me avatars\n[](#lyra-and-ready-player-me-avatars)\nThe original Lyra Project uses the UE5 skeleton for gameplay. It contains complex animations, and it uses IK and control rigs that heavily depend on the UE5 skeleton. \nBy default, the Ready Player Me skeleton is not compatible with UE4 and UE5 skeletons as it contains different bone names and a different hierarchy. \nHowever, it is possible to retarget all the animations and change the control rigs so that the Ready Player Me characters work correctly. This is time-consuming.\nInstead, this example demonstrates the following strategy.\nAnimations via \n[runtime IK retargeting](https://docs.unrealengine.com/5.1/en-US/runtime-ik-retargeting-in-unreal-engine/)\n. \nUse an invisible actor to control the character\nRetarget the animations from this actor to the ReadyPlayerMe avatar.\nDownload the Ready Player Me sample project\n[](#project)\n\u00e2\u20ac\u2039\n[Download the project](https://drive.google.com/file/d/1_xginlvp1FjLqQwxqHYEy8rimCiPIn9F/view?usp=share_link)\n, unzip it (this takes some time), and open the project Unreal Engine 5 (this also takes some time). \n\u00e2\u20ac\u2039\n[\u00e2\u20ac\u2039Download the Windows build](https://drive.google.com/file/d/15x7Q6BG247AMaRz1llnoXa1BxfncQK9_/view?usp=share_link)\n of the finished Ready Player Me demo, unzip it, and run Windows/LyraGame.exe.\nCharacter\n[](#character)\n1.\nUnzip and open the LyraRpmExample project in Unreal Engine 5.\n2.\nYou may not have the exact same version of UE5. If prompted, rebuild the project. This may take some time.\n3.\nInside the \nContent > Characters\n folder, if it doesn't exist, create a new folder and call it \nReadyPlayerMe\n.\n4.\nInside the \nContent > Character > Cosmetics\n folder, find the \nB_Manny \nactor blueprint. Along with \nB_Quinn\n, these are the characters spawned at runtime in the actual game.\n5.\nDuplicate \nB_Manny\n, rename it to \nB_RPM\n, and move it to the new \nReadyPlayerMe \nfolder.\n6.\nEdit \nB_RPM\n. In the Event Graph, there is a notice. The important part is that \nCopyPose\n is used for B_Manny.\n \n\u00e2\u20ac\u2039\n7.\nIn the \nB_RPM\n actors Details panel, add the \nReadyPlayerMe\n component to load the avatars at runtime. \n8.\nSelect the \nReadyPlayerMe \ncomponent and in the \nDetails \npanel: \n1.\nSet the \nUrl shortcode\n of the avatar \n2.\nSet the target skeleton to \nRPM_Mixamo_Skeleton\n.\n3.\n[Optional] Add an avatar config. You can use \nCharacters > ReadyPlayerMe > Data > DA_AvatarConfig\n (Optionally edit the avatar config and set the Texture Atlas to High for fewer draw calls.)\n\u00e2\u20ac\u2039\nAnimation Retargeter\n[](#animation-retargeter)\nNext, you need an\n IK Retargeter\n that will retarget the animations from UE5 Manny to the RPM avatar. For this example, it is provided for you. To learn more about how to create\n \nIK Rig and\n \nIK Retargeter, check the following \n[example](https://github.com/readyplayerme/UE5-ThirdPerson-Example#how-to-retarget-animations)\n to see how this was done.\n1.\nOpen \nCharacters > ReadyPlayerMe > Rigs > IK_RPM_FullBody\n.\n2.\nIn the details, notice that it's using the RPM_Mixamo_SkeletalMesh. \n3.\nOpen the \nCharacters > ReadyPlayerMe > Rigs > RTG_UE5Manny_RPM_FullBody\n IK Retargeter. Notice that its \nTarget IKRig Asset\n is set to \nIK_RPM_FullBody\n. \nLyra's character holds a weapon with both hands. The hands of the Ready Player Me avatar must be in exactly the same position as that driving mannequin's hands. To achieve this, we adjust some settings in the IK Retargeter.\n1.\nIn the Retargeter Details panel, find \nBlend to Source\n property and set it to 1.0 if not already set.\nAnimation Blueprint\n[](#animation-blueprint)\nNext, we need an animation blueprint for the Ready Player Me avatar. This example provides you with one. \n1.\nOpen the \nReadyPlayerMe > Animations > ABP_RPM_Mannequin_Retarget\n Animation Blueprint.\n2.\nIn the AnimGraph, create a \nRetarget Pose From Mesh\n node and connect it with the \nOutput Pose\n node. In the example, this is already done for you.\n3.\nClick on \nRetargetPoseFromMesh \nnode, and in the Details panel, verify that \nUse Attached Parent\n is checked. \n4.\nAlso, set the \nIKRetargeterAsset\n to the RPM_IK_Retargeter that we created: \nRTG_UE5Manny_RPM_FullBody\n. In the example, this is already done for you.\nConfigure Character\n[](#configure-character)\n1.\nSave your work so far if you haven't already. \n2.\nOpen the \nB_RPM\n actor again and select its \nMeshComponent\n. \n3.\nIn Details, under Animation, set the animation class to the \nABP_RPM_Mannequin_Retarget\n animation blueprint. \n4.\nRight-click the \nSkeletal Mesh\n icon and select \nClear\n. \nSetting the Skeletal Mesh to None is important\n, as runtime changing of the mesh breaks the skeletal mesh component.\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nHelper Functions\n[](#helper-functions)\nTo implement avatar preloading and saving avatars in the local storage, we need to create a blueprint function library, we'll call it BL_RpmLibrary.\nFor saving the avatar URL in the local storage we'll create a SaveGame blueprint and call it B_AvatarSaveGame, it will have a single field AvatarUrl. Next, we'll make a function and call it \nSaveAvatarUrl\n, it will remove existing AvatarSaveGame files, create an instance of the \nB_AvatarSaveGame\n object, and save it in the local storage.\nFor loading the saved avatar URL from the local storage, we'll add another function and call it \nLoadSavedAvatarUrl\n. It will check if there is an existing AvatarSaveGame in the local storage, and return its avatar URL.\nFor preloading avatars, we'll need to create a function and call it \nPreloadAvatars.\n It will preload the avatars before starting a session. This function will add the current player avatar URL to the list of the bot URLs, create preload data, clear the memory cache, and preload the avatars using the preload data.\nCharacter Selection\n[](#character-selection)\nInside the \nW_LyraFrontend\n widget, we will add a new button and set the button text to \nSelect Character\n. Inside the button click event, we will add a logic that will open a new character selection screen.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nTo make an avatar selection screen we duplicate the already existing \nW_ExperienceSelection\n screen and name the new widget \nW_CharacterSelectionScreen\n.\nWe change the UI of the character selection widget according to our needs. For the existing buttons, we change the implementation of the \nOnButtonClick\n event in a way so it would select the avatar URL that we hardcode in this UI. To have multiplayer support, we will create two events, one will be executed on the server, the other one on the owning client. We call the \nSR_CharacterSelected\n event, which will call the \nCL_CharacterSelected\n event. Inside the \nCL_CharacterSelected\n event, we will save the avatar URL in the local storage. We will set the replicates property of the \nSR_CharacterSelected\n events to \nReplicated\n and \nRun On Server\n. We will set the replicates property of the \nCL_CharacterSelected\n event to \nReplicated\n and \nRun On Owning Client\n.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nFor the button images, we will use the RPM render API to download the rendered avatar images and display them on the buttons. We'll create a blueprint class B_AvatarImageApplier that will load the rendered image and apply it to the button.\nFor the already existing hardcoded avatars we will apply images on view creation. For the custom player avatar that will be created by the avatar creator, we will apply the image on activation, this will keep the player image up-to-date.\nWe'll add another button next to the existing selection buttons that will open the avatar creator scene.\nAvatar Creator\n[](#avatar-creator)\nTo be able to create an avatar that would be playable in the Lyra game we need to add the custom avatar creator open-source experimental plugin to the project. Check the setup steps in the \n[documentation](https://github.com/readyplayerme/rpm-unreal-avatar-creator#add-rpmavatarcreator-plugin)\n.\nTo create the avatar creator scene, we will duplicate the \nW_ExperienceSelection\n screen again and name the new widget \nW_AvatarCreatorScreen\n. We will adjust the UI of the new scene and add the custom avatar creator widget in the center of the UI. We will wrap the avatar creator widget with the ScaleBox and set the scale to a value between [1-0], this will prevent layout issues and display the avatar creator with the designed layout.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nIn the properties section of the avatar creator, we need to configure the avatar creator. Find more about the parameters from the \n[documentation](https://github.com/readyplayerme/rpm-unreal-avatar-creator#customization-options)\n.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nIn the blueprint of the \nW_AvatarCreatorScreen\n in the construction event, we need to bind two events to the \nAvatarCreator\n widget. We bind \nAvatar Saved\n and \nAvatar Selected\n events. In both cases, we get the avatar URL and save it in the local storage. In order for this functionality to work in a multiplayer environment we will do the same thing that we've done for the \nW_CharacterSelectionScreen\n, we'll add and call \nSR_AvatarSet\n and \nCL_AvatarSet\n events.\nSpawn Character\n[](#spawn-character)\nNow that we saved the avatar URL in the local storage, we can load an avatar with this URL for our player. In the \nB_PickRandomCharacter\n blueprint, we check if the owner is of a type \nLyraPlayerController\n, if it is we use the avatar url that we have saved. If the owner is not \nLyraPlayerController\n, then the character is controlled by a bot. For the bots we randomly choose predefined avatar URLs.\nWe need to spawn the Ready Player Me characters instead of the \nB_Manny\n versions. For that in the \nAddCharacterPart\n function call we need to change the \nNewPartPartClass\n input to \nB_RPM\n.\nB_PickRandomCharacter\n blueprint uses \nFLyraCharacterPart\n struct to set cosmetic properties of the character part that would be spawned runtime and added to the character. We need to expand it to be able to load an avatar with the URL that we want to use.\nTo set the avatar URL to the character part that would be added to the player character we need to change the \nFLyraCharacterPart\n struct from the C++ code. We need to add a field \nAvatarUrl\n to it.\nUPROPERTY(EditAnywhere, BlueprintReadWrite)\nFString AvatarUrl;\n\u00e2\u20ac\u2039\n// Compares against another part, ignoring the collision mode\nstatic bool AreEquivalentParts(const FLyraCharacterPart& A, const FLyraCharacterPart& B)\n{\n\treturn (A.PartClass == B.PartClass) && (A.SocketName == B.SocketName) && (A.AvatarUrl == B.AvatarUrl);\n}\nFor the next step we will we will add an \nAvatarUrl\n field to the \nALyraTaggedActor\n. \nALyraTaggedActor\n is the parent class of the character part(\nB_RPM\n) that we will be using to load the avatar. We will add another field, an event \nOnLoadAvatarPart\n to this actor, this event will be fired when the \nAvatarUrl\n is set, to load the avatar.\nDECLARE_DYNAMIC_MULTICAST_DELEGATE(FLoadAvatarPart);\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Actor)\nFString AvatarUrl;\n\u00e2\u20ac\u2039\nUPROPERTY(BlueprintAssignable, Category=Actor)\nFLoadAvatarPart OnLoadAvatarPart;\nTo set the \nAvatarUrl\n of the \nLyraTaggedActor\n, inside the \nLyraPawnComponent_CharacterParts.cpp\n file, in \nFLyraCharacterPartList::SpawnActorForEntry\n function when the \nLyraTaggedActor\n is created we set the \nAvatarUrl\n and broadcast the \nOnLoadAvatarPart\n event.\nALyraTaggedActor* LyraTaggedActor = Cast<ALyraTaggedActor>(SpawnedActor);\nLyraTaggedActor->AvatarUrl = Entry.Part.AvatarUrl;\n(void)LyraTaggedActor->OnLoadAvatarPart.Broadcast();\nLoading Avatar\n[](#loading-avatar)\nOur \nB_RPM\n blueprint inherits the \nALyraTaggedActor\n class that we modified. It should have access to the newly added \nAvatarUrl\n and \nOnLoadAvatarPart\n properties. In the BeginPlay event, we need to bind an event to the \nOnLoadAvatarPart\n event. When the event is fired we check if the UrlShortcode parameter of the ReadyPlayerMe component is empty, we load a new avatar using the \nAvatarUrl\n property. We need to also check and load a new avatar when the BeginPlay is called, this is needed for supporting a multiplayer environment.\nAvatar Preloading\n[](#avatar-preloading)\nTo avoid the situation where the game starts with an empty player mesh while the avatar is loading in the background, we should use avatar preloading. We should preload the avatar of our player as well as the avatars of the bots.\nThere are two places that we need to preload the avatars. \nW_HostSessionScreen\n used for hosting a multiplayer or single-player session and \nW_SessionBrowserEntry\n used for joining existing multiplayer sessions. In both of the widgets, we will call our \nPreloadAvatars\n function after the \nPush Content To Layer For Player\n node. This will allow us to have a loading screen while the avatars are loading.\nEnable Avatar Caching\n[](#enable-avatar-caching)\nEnable \nAvatar caching\n from the project settings to get better performance and load avatars faster without the need to download them every time.\nTo enable this setting go to \nEdit > Project Settings > Game > ReadyPlayerMe > Avatar Caching > Enable Avatar Caching\n.\nDisable Niagara Effects\n[](#disable-niagara-effects)\nAlthough the Niagara effects look great in the editor, they cause a crash on the built applications. This is a limitation connected with the \nglTFRuntime\n external library. You must disable the Niagara effects that are applied to the character by disabling the \nSpawn\n, \nTeleport\n, and \nDeath\n \nGameplayCues\n.\nUse Search in Content to find these quickly as they are all over the place. \nOpen the \nGE_SpawnIn\n Blueprint and remove \nGameplay Cues > Character > Spawn\n --> This is already done.\nOpen the \nB_Teleport\n Blueprint and remove \nGameplayCue > World > Teleporter > Activate\n -> This is already done.\nOpen the \nGA_Hero_Death\n Blueprint and remove \nGameplayCue > Character > Death\n -> This is already done.\nPackaging\n[](#packaging)\nIn Project Settings, \nAdditional Asset Directories to Cook, \nadd the \n/glTFRuntime\n folder.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nIf you do not add glTFRuntime into the Additional Asset Directories to Cook setting you will likely have issues with missing materials when loading avatars on built applications.\n\u00e2\u20ac\u2039",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/code-samples/lyra-project-integration-example",
            "title": "Lyra project integration example"
        }
    },
    {
        "page_content": "Unreal Engine 4 (Legacy)\nThe following examples are for Unreal Engine 4 only.\nThird Person Template integration\n[](#third-person-template-integration)\nThe integration for UE4 third person differs from the UE5 version, because the animation retargeting system is different in UE4.\nThis example project on GitHub demonstrates the steps for integrating the avatar with a UE4 project.  You can integrate Ready Player Me avatars into the UE4 Third Person template project as demonstrated in the following GitHub example project. \nProject: \n[https://github.com/readyplayerme/UE4-ThirdPerson-Example](https://github.com/readyplayerme/UE4-ThirdPerson-Example)\n\u200b\n\u200b\n\u200b\n[GitHub - readyplayerme/UE4-ThirdPerson-ExampleGitHub](https://github.com/readyplayerme/UE4-ThirdPerson-Example)\nAnimation retargeting\n[](#animation-retargeting)\nAnimation retargeting system in UE5 is not compatible with UE4. For UE4 animation retargeting, use the example above.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/code-samples/unreal-engine-4-legacy",
            "title": "Unreal Engine 4 (Legacy)"
        }
    },
    {
        "page_content": "Unreal Engine 5 samples\nCollection of code samples.\nIn the following GitHub repositiory, you can find examples of Ready Player Me integrations into Unreal Engine 5 projects. Use this code as a reference for integrating Ready Player Me 3D avatars into your own Unreal Engine projects. \nProject: \n[https://github.com/readyplayerme/UnrealExamples](https://github.com/readyplayerme/UnrealExamples)\n\u200b\nDownload and open the project in Unreal Engine.\nInside the project (\nContent > ReadyPlayerMe\n folder) you can find examples for:\n[](#inside-the-project-content-greater-than-readyplayerme-folder-you-can-find-examples-for)\nAnimation retargeting\nAvatar Creator integration\nMultiplayer\nFacial tracking with Live Link\nIn-engine Rendering\n[GitHub - readyplayerme/UnrealExamples: ReadyPlayerMe integration into UE5 examplesGitHub](https://github.com/readyplayerme/UnrealExamples)\nReady Player Me avatars in an Unreal Engine projecy.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/code-samples/unreal-engine-5-samples",
            "title": "Unreal Engine 5 samples"
        }
    },
    {
        "page_content": "Avatar caching\nStore avatar assets and data locally.\nAvatar Caching\n[](#avatar-caching)\nThe Ready Player Me SDK provides an avatar caching functionality. If avatar caching is enabled, every time an avatar is loaded, the assets are stored locally. If you subsequently try to load the avatar again, the system checks if the avatar needs to be updated, and if so, downloads and saves the updated avatar locally. If the avatar does not need to be updated, the avatar is loaded from the locally stored file.\nIf a Ready Player Me user makes a change to an existing avatar, such as altering the hairstyle, then the avatar needs to be redownloaded even if it is cached locally. This ensures that the application loads the most up-to-date avatar.\nAvatar caching is available at runtime and includes support for \n[Avatar Configurations](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-configuration)\n.\nEnable caching\n[](#enable-caching)\nAvatar caching is disabled by default. To enable avatar caching, do the following:\n1.\nOpen \nEdit > Project Settings\n.\n2.\nIn the Game section, select \nReady Player Me\n.\n3.\nCheck \nEnable Avatar Caching\n.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nStored avatar data location\n[](#stored-avatar-data-location)\nDownloaded avatar data is stored based not only on the avatar GUID, but also the assigned Avatar Configuration parameters. This means that multiple instances of an avatar's data may exist in cache at any given time.\nAvatar data is stored at\n<Persistent Data Path>/Avatars/<avatar GUID>/<Avatar Config parameters hash>/\nCached avatar data use and updating\n[](#cached-avatar-data-use-and-updating)\nAt runtime, when caching is enabled, the avatar loader checks the state of the avatar on the Ready Player Me server before downloading. If the avatar has not been modified since it was last stored in the client-side cache, the avatar data for the given avatar GUID and Avatar Config parameters are loaded from the cache.\nIf changes were made to the avatar on the Ready Player Me server, the client-side cache for the given avatar GUID is cleared and recreated when subsequent load requests are made.\nIf the avatar download is interrupted or aborted during data transmission, any corrupt client-side cache data is deleted and recreated the next time the avatar is downloaded.\nDisable caching\n[](#disable-caching)\n1.\nOpen \nEdit > Project Settings\n.\n2.\n In the Game section, select \nReady Player Me\n.\n3.\nUncheck \nEnable Avatar Caching\n.\n\u00e2\u20ac\u2039",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-caching",
            "title": "Avatar caching"
        }
    },
    {
        "page_content": "Avatar configuration\nApply Avatar API parameters to avatar loading.\nThe Ready Player Me \n[Avatar API](https://docs.readyplayer.me/ready-player-me/api-reference/avatars)\n allows you to specify the Avatar Configuration parameters to apply when loading avatars.\nThe SDK provides functionality for loading avatars with specific configurations. For example, you may need a high-quality detailed avatar for showing the model at close range, and a low-quality avatar that will be rendered in a single draw call for other situations. You can set the configuration for each avatar with a custom Avatar Config data asset.\nSee the \n[API Reference](https://github.com/wolfprint3d/ReadyPlayerMe-Docs-v3/blob/master/integration-guides/unreal-engine/optimize/broken-reference/README.md)\n for details.\nAvatar Configurations will only work with the new avatar API URLs. If you have a saved URL in your project, you may need to regenerate the avatar and update the URL in order to use Avatar Configurations.\nCreate an Avatar Configuration\n[](#create-an-avatar-configuration)\nThe SDK contains a template Avatar Config file in the \nData\n directory. Duplicate and modify this file according to your project needs.\n1.\nGo to \nPlugins >\n \nReady Player Me Content > Data\n. Notice the templates for Avatar Config, Standard Morph Target Group, and Custom Morph Target Group.\n2.\nDouble-click \nDA_R\nPM\nAvatarConfig\n to inspect and update it, or make and open a copy to change its settings in the Details panel as shown below.\nMesh LOD:\n Choose a level of detail (high, medium for 50%, or low for 25%).\nPose:\n Choose A Pose or T Pose.\nTexture Atlas:\n Choose the atlas size. If set to none, texture atlasing will be disabled\nTexture Size Limit:\n Set an upper limit on texture size.\nUse Hands:\n Check to include hands with half-body VR avatars.\nMorph Target Group:\nTo set standard morph targets for the avatar, duplicate the \nDA_StandardMorphTargetGroup\n and modify it according to your project needs.\nTo set custom morph targets for the avatar, duplicate the \nDA_CustomMorphTargetGroup\n and modify the Morph Targets according to your project needs.\nTo not include any morph targets, set Morph Target Group to None; in the Morph Target Groups drop-down, click in the empty space below the other options.\nSee Avatar API \n[3D Avatars](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-3d-avatars)\n for details\nIf you select \nNone\n, no morph targets will be included in the model. Since morph targets come with a high cost and may freeze your application, only include them if you are using facial animations.\nApply an Avatar Configuration\n[](#apply-an-avatar-configuration)\nApply your newly created Avatar Config to the \nAvatar Config\n field in the ReadyPlayerMeComponent.\nYou can have different Avatar Configs for different avatars.\nIf avatar caching is enabled, and the same avatar is loaded with different configs, multiple models will be saved locally.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-configuration",
            "title": "Avatar configuration"
        }
    },
    {
        "page_content": "Avatar preloading\nLoad an avatar in runtime memory.\nAvatar Preloading\n[](#avatar-preloading)\nThe Ready Player Me SDK provides an experimental avatar preloading functionality. Preloading functionality allows the loading of the avatars in the background. The main use case for it is to load the avatars while in the main menu or loading screen and instantiate them immediately when entering the game.\nAvatar preloading functionality can also be used along with the \nAvatar Caching\nAvatar preloading is available at runtime and includes support for \n[Avatar Configurations](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-configuration)\n.\nPreload Avatar\n[](#preload-avatar)\nFor preloading, the avatars, use the \nPreload\n function \nMemory Cache\n. Memory Cache is accessible through the \nReadyPlayerMeGameSubsystem\n. Provide a list of the avatar configuration parameters to the Preload function. It is possible to preload multiple versions of the same avatar to be able to use multiple avatar configs.\nThe avatars will not be loaded from the memory cache automatically\nTo be able to use the memory cache through the \nReadyPlayerMeComponent\n component, in \nReadyPlayerMeComponent\n enable the \nUse Memory Cache\n property. \n\u200b\n\u200b\nClear Memory Cache\n[](#clear-memory-cache)\nIf the preloaded avatars are not needed anymore, it's possible to clear the memory cache.\n\u200b\n\u200b\nIt's also possible to remove a specific avatar from the memory cache.\n\n\u200b\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/optimize/avatar-preloading",
            "title": "Avatar preloading"
        }
    },
    {
        "page_content": "Run the Demo\nImport your ReadyPlayerMe avatar into Unreal Engine with the Demo map.\nOnce you have set up your C++ or Blueprint Only project with the Ready Player Me SDK, you can run the provided demo.\n1.\nIn the \nContent Browser\n, go to \nReadyPlayerMe Content > Maps\n and open \nRPM_Demo\n. \n\n\u200b\n2.\nIn the \nOutliner\n, select \nBP_RPM_Actor\n.\n3.\nIn \nDetails\n, select \nReady Player Me Component (Ready Player Me)\n.\n4.\nLook for the property named \nUrl Shortcode\n.\n5.\nPaste your avatar URL (full or shortcode) into the field. (Or keep the provided demo avatar.)\n6.\nPress \nPlay\n,\n \nand after a moment, you should see the avatar in your scene. \n\u200b\n\u200b\nIf you have trouble creating your project, see \n[Troubleshooting](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting)\n for straightforward solutions.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/exploring-the-demo",
            "title": "Run the Demo"
        }
    },
    {
        "page_content": "Setup for Blueprint Projects\nInstall the Unreal Engine SDK with your Blueprint project.\nFor Unreal Engine Blueprint projects, you have two options:\nConvert your project to a C++ project, then use the C++ plugin\n. \nStart with \n[this documentation](https://dev.epicgames.com/community/learning/courses/KJ/converting-blueprint-to-c/kjB/introduction-to-blueprint-vs-c)\n for making the conversion.\nUse the Blueprint Only version of the plugin\n. \nIf you are using the Blueprint Only version of the plugin, you \nmust \ndo an \n[Engine Install](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/setup-blueprint-projects#engine-install)\n \nas described below. Be aware that the Blueprint Only version of the plugin is \nvery large\n as it includes all the generated binaries and other files. \nEngine Install\n[](#engine-install)\nOnly use engine installation for Blueprint projects!\nThe Blueprint Only version of the plugin is very large as it includes all the generated binaries and other files.\n \nDownload the SDK for Blueprint Projects\n[](#download-the-sdk-for-blueprint-projects)\nFrom the open source GitHub repository in the latest release, \n[Download for Blueprint projects](https://github.com/readyplayerme/rpm-unreal-sdk/releases/latest)\n. \nChoose the matching file for Unreal Engine version 5 or 4.27 as a Zip file. \nYou can find a separate version for each Blueprint Only version of the plugin of Unreal Engine. If you are upgrading from a previous version, see \n[Updating from earlier versions](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/unreal-plugin-download)\n.\nFor a Blueprint Only project, you must add the Ready Player Me plugin to a particular Unreal Engine version installed on your computer. This means that the plugin will be available to any Unreal project you open using that Unreal Engine version. \nSet up your project\n[](#set-up-your-project)\n1.\nIf you haven't done so already, \n[download the SDK for Blueprint projects](https://github.com/readyplayerme/rpm-unreal-sdk/releases/latest)\n.\n2.\nExtract the contents of the downloaded Zip file (\nBlueprint-\n prefixed). \n3.\nIn a file explorer, navigate to your Unreal Engine installation. \nPC default: \nProgram Files/Epic Games/[ENGINE_NUMBER]\n.\nmacOS default: \n/Users/Shared/Epic Games/[ENGINE_NUMBER]\n.\n4.\nCopy the plugin folders \nReadyPlayerMe\n and \nglTFRuntime\n into the \nENGINE_VERSION/Engine/Plugins\n folder.\n5.\nStart or restart UE and open your Blueprint Project. There should be no errors. \n6.\nFrom the top toolbar, go to \nEdit > Plugins\n. \n7.\nFind the \nReadyPlayerMe\n and \nglTFRuntime\n plugins.\n8.\nClick the checkbox to enable each plugin.\n\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n9.\nRestart Unreal Engine. \n10.\nOpen the Content Browser and click \nSettings \n(View Options in UE4). Make sure \nShow Plugin Content\n and \nShow Engine Content\n are both checked.\n11.\nIn the Content Browser expand \nEngine > Plugins\n and scroll or use search until you find the \ngITFRuntime, glTFRuntime C++ Classes, ReadyPlayerMe Content\n, and \nReadyPlayerMe C++ Classes\n folders. \n\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nIf you have trouble creating your project, see \n[Troubleshooting](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting)\n for straightforward solutions.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/setup-blueprint-projects",
            "title": "Setup for Blueprint Projects"
        }
    },
    {
        "page_content": "Setup for C++ Projects\nInstall the Unreal SDK with your C++ project.\nYou need the Windows SDK installed to make C++ projects with Unreal Engine. See\n\n[https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/)\n\u200b\nYou also need the Microsoft .NET Core 3.1 Runtime.\nMake sure your graphics drivers are the latest for your card.\nVerify that you have the required version and packages of Visual Studio for your version of Unreal Engine.\nReady Player Me Unreal SDK for C++ Projects\n[](#ready-player-me-unreal-sdk-for-c++-projects)\n\u200b\n[Ready Player Me Unreal SDK](https://github.com/readyplayerme/rpm-unreal-sdk)\n is a free, open-source plugin that is open for contribution.\nSet up your project\n[](#set-up-your-project)\n1.\nIf you don't have a C++ project:\n1.\nStart Unreal Engine.\n2.\nCreate a C++ project.\n3.\nExit Unreal Engine.\n2.\nFollow the instructions below for \n[adding the ReadyPlayerMe and glTFRuntime plugins](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/setup-c++-projects#add-readyplayerme-and-gltfruntime-plugins)\n to the project.\n3.\nIn your project directory, you should see two new folders.\nPlugins/ReadyPlayerMe\nPlugins/glTFRuntime.\n4.\nStart Unreal Engine and open your project.\n5.\nYou should receive the \nMissing Modules\n popup, or a \nNew plugins are available\n notification.\n\n\u200b\n\u200b\n6.\nIf you get the Missing Modules popup,\n click \nYes\n and wait for the Editor to open with your project. THIS CAN TAKE SEVERAL MINUTES. If you get an error and your project didn't build, see \n[Troubleshooting](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting)\n. From the top toolbar, select \nEdit > Plugins\n.\n-OR-\n\nIf you get the New plugins are available notification\n, click \nManage plugins...\n7.\nFind the \nReadyPlayerMe\n and \nglTFRuntime\n plugins.\n8.\nCheck the \nEnabled\n option for each plugin.\n\n\u200b\n\u200b\n9.\nRestart Unreal Engine.\n10.\nIn the Content Browser and click \nSettings\n (cogwheel icon on the far right)(View Options in UE4). Make sure \nShow Plugin Content\n and \nShow Engine Content\n are both checked.\n11.\nIn the Content Browser, expand \nPlugins\n and scroll or use search until you find the \ngITFRuntime, glTFRuntime C++ Classes, ReadyPlayerMe Content\n, and \nReadyPlayerMe C++ Classes\n folders.\n\n\u200b\n\u200b\n12.\nGo to \nPlugins > Ready Player Me Content > Maps\n where you can run the \nRPM_Demo\n to verify your installation. See also \n[Run the Demo](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/exploring-the-demo)\n.\nAdd ReadyPlayerMe and glTFRuntime plugins\n[](#add-readyplayerme-and-gltfruntime-plugins)\nYou can add the ReadyPlayerMe and the glTFRuntime plugins to your project in three ways.\nOption 1: Add as submodules to a Git-managed project (recommended)\n[](#option-1-add-as-submodules-to-a-git-managed-project-recommended)\nTo add the plugins to your Git-managed project as \n[submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules)\n, cd into your project folder and run the following git command.\ngit submodule add --name glTFRuntime -- https://github.com/rdeioris/glTFRuntime.git Plugins/glTFRuntime ; cd Plugins/glTFRuntime ; git checkout $(git describe --tags $(git rev-list --tags --max-count=1)) ; cd ../.. ; git submodule add --name ReadyPlayerMe -- https://github.com/readyplayerme/rpm-unreal-sdk.git Plugins/ReadyPlayerMe ; cd Plugins/ReadyPlayerMe ; git checkout $(git describe --tags $(git rev-list --tags --max-count=1)) ; cd ../..\nOption 2: Clone the plugin repositories into your Git managed project\nTo clone the plugins into your project, cd into your project folder and run the following git command.\ngit clone https://github.com/rdeioris/glTFRuntime.git Plugins/glTFRuntime ; cd Plugins/glTFRuntime ; git checkout $(git describe --tags $(git rev-list --tags --max-count=1)) ; cd ../.. ; git clone https://github.com/readyplayerme/rpm-unreal-sdk.git Plugins/ReadyPlayerMe ; cd Plugins/ReadyPlayerMe ; git checkout $(git describe --tags $(git rev-list --tags --max-count=1)) ; cd ../..\nOption 3: Dowload the plugins as Zip files and paste them into your project\n[](#option-3-dowload-the-plugins-as-zip-files-and-paste-them-into-your-project)\nThis method does not require Git.\n1.\nChange directory into your project folder.\n2.\nCreate a \nPlugins\n folder.\n3.\nDownload the plugin code as Zip files and unpack them into the Plugins folder.\n\u200b\n[glTFRuntime](https://github.com/rdeioris/glTFRuntime/releases/latest)\n\u200b\n\u200b\n[ReadyPlayerMe](https://github.com/readyplayerme/rpm-unreal-sdk/releases/latest)\n\u200b\n4.\nRename the extracted folders to \nReadyPlayerMe\n and \nglTFRuntime\n, respectively\nUpdating ReadyPlayerMe and glTFRuntime plugins\n[](#updating-readyplayerme-and-gltfruntime-plugins)\nProjects using Git\nTo update the plugins, paste the following command from your project folder in the terminal. This will fetch and switch the plugin repositories to the latest stable release.\ncd Plugins/glTFRuntime ; git fetch --tags ; git checkout $(git describe --tags $(git rev-list --tags --max-count=1)) ; cd ../..\nIf you project does not use Git\nFollow the steps in Option 3 above to get the latest versions of the plugins.\nLegacy Plugins\n[](#legacy-plugins)\nThe previous versions of the ReadyPlayerMe plugin are still available at \n[Old Unreal Engine SDK versions](https://bit.ly/RPM-UE4-SDK-Latest)\n.\nIf you have trouble creating your project, see \n[Troubleshooting](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting)\n for straightforward solutions.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/setup-c++-projects",
            "title": "Setup for C++ Projects"
        }
    },
    {
        "page_content": "Animation issues\nErrors and known issues.\nAnimation is not playing on character in packaged builds\n[](#animation-is-not-playing-on-character-in-packaged-builds)\nIf animations are not playing after you load a packaged build, this is likely because the character Blueprint is not set up correctly. \n1.\nCheck the \nAnimClass \nproperty on your Blueprint's \nSkeletalMeshComponent\n. \n2.\nSet your \nAnimClass \nto the animation blueprint you want to use. You must set this in the editor before running the application.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/animation-issues",
            "title": "Animation issues"
        }
    },
    {
        "page_content": "Avatar lighting issues\nFix avatar lighting issue\n\u200b\n\u200b\n\u200b\nDescription\n[](#description)\nAn issue has been identified with certain avatars in the \nglTFRuntime\n plugin, wherein the head of the avatar appears dark. This issue is prevalent in the \n[20230225](https://github.com/rdeioris/glTFRuntime/releases/tag/20230225)\n and earlier versions of the plugin.\r\nResolution\n[](#resolution)\nThe issue has been addressed in the latest master version of the \n[glTFRuntime](https://github.com/rdeioris/glTFRuntime)\n plugin. It is recommended that users encountering this issue upgrade to the latest master version of the plugin for a permanent resolution.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/avatar-lighting-issues",
            "title": "Avatar lighting issues"
        }
    },
    {
        "page_content": "Avatar loading issues\nErrors and known issues.\nSignificant lag when loading avatars at runtime\n[](#significant-lag-when-loading-avatars-at-runtime)\nThis is currently a known limitation of the free 3rd party glTFRuntime plugin used for handling the import of gltf/glb files both in the editor and at runtime. They are actively working on improvements. Feel free to \n[contact their amazing developers on the discord server](https://discord.gg/DzS7MHy)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/avatar-loading-issues",
            "title": "Avatar loading issues"
        }
    },
    {
        "page_content": "Blueprint project issues\nErrors and known issues.\nErrors on Blueprint projects\n[](#errors-on-blueprint-projects)\nWhile we recommend using a C++ project (or converting your Blueprint project to a C++ project), it is possible to work with the plugin in a Blueprint Only project. If you are having issues integrating the SDK into your Unreal Blueprint project, here are some things to note. \nThere are separate versions of the plugin for Blueprint projects. Check in the \n[Blueprint Only downloads folder](https://drive.google.com/drive/u/1/folders/1fMlFq7ISBG4lz7z__7HyhpKIPbYnxC0p)\n and select the version that matches your Unreal Engine version.\nFor Blueprint Only projects, the plugin needs to be installed into the specific engine.\nSee \n[Setup a Blueprint project](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/quickstart/setup-blueprint-projects)\n for instructions.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/blueprint-project-issues",
            "title": "Blueprint project issues"
        }
    },
    {
        "page_content": "C++ project compilation issues\nErrors and known issues.\nUnable to compile or open a C++ project\n[](#unable-to-compile-or-open-a-c++-project)\nWhen importing the plugin into your Unreal C++ project, you should extract the plugin Zip file into the \nPROJECT_NAME/Plugins\n directory. If the directory doesn't exist, create it.\nIf you encounter errors that prevent you from compiling, the most common fix is to remove all generated files and folders and perform a clean build.\n1.\nExit Unreal Engine.\n2.\nOpen a file explorer on your project.\n3.\nInside your project, delete the folders \nBinaries\n, \nIntermediate\n, and \nSaved\n.\n4.\nDelete the \n[PROJECT_NAME].sln\n file (if using Visual Studio) .\n5.\nDelete the \nBinaries \nand \nIntermediate \nfolders inside \nPlugins/glTFRuntime\n and \nPlugins/ReadyPlayerMe\n.\n6.\nNavigate back to the project root folder.\n7.\nRight-click the \n[PROJECT_NAME].uproject\n file and select \nGenerate Visual Studio Project Files\n.\n8.\nReopen your project.\nIf this does not fix your issues, you can open the .sln file and try debugging the issue, or contact us at \n[[email\u00a0protected]](https://docs.readyplayer.me/cdn-cgi/l/email-protection#becdcbceced1cccafeccdbdfdac7ced2dfc7dbcc90d3db)\n with an email explaining your issue.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/c++-project-compilation-issues",
            "title": "C++ project compilation issues"
        }
    },
    {
        "page_content": "Crashes on built applications\nErrors and known issues.\nCrashes on built applications - \nMissing materials error\n[](#crashes-on-built-applications-missing-materials-error)\nA common cause of crashes on built applications using the Ready Player Me SDK is missing files or folders, such as the glTFRuntime materials. \nTo fix this, adjust the packaging settings.\n1.\n Go to \nEdit > Project Settings > Packaging\n.\n2.\nExpand the \nPackaging\n section and look for \nAdditional Asset Directories to Cook\n. Alternatively, you can search for this setting from the top of the Project Settings window. \n3.\nAdd the \n/glTFRuntime\n folder as shown below. \n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/crashes-on-built-applications",
            "title": "Crashes on built applications"
        }
    },
    {
        "page_content": "Updating from earlier versions\nUpdating the Unreal Engine SDK\nIf you are not using a version control system like Git on your project, we recommend backing up your whole project before updating the Unreal Engine SDK.\nWhen you update the Unreal Engine SDK, we recommend that you delete the plugin completely and then re-add it to the project as follows.\n1.\nClose the Unreal project if it is currently open.\n2.\nDelete the \nReadyPlayerMe\n and \nglTFRuntime\n folders located in the \nPROJECT/Plugins/\n folder.\n3.\nDownload the latest version of the Unreal SDK.\n4.\nExtract the contents of downloaded ZIP file (\nReadyPlayerMe \nand \nglTFRuntime \nfolders) into your \nPROJECT/Plugins/\n folder. \n5.\nReopen to project and when the popup opens, click \nYes \nrebuild the modules.\n\u200b\nIf you are unable to compile or open the project after upgrading the plugins, or get a message to manually rebuild, delete the following generated files and reopen the project. You need to close the IDE and stop the Engine and all associated processes in order to be able to remove these files and folders.\nBinaries folder\nIntermediate folder\nSaved folder\nIf present, the Visual Studio file ending in \".sln\"\nEarlier releases\n[](#earlier-releases)\n\u200b\n[Download an earlier version of the Unreal Engine SDK.](https://bit.ly/RPM-UE4-SDK-Earlier)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/unreal-plugin-download",
            "title": "Updating from earlier versions"
        }
    },
    {
        "page_content": "Unreal SDK breaking changes\nUnreal SDK 1.0.0 breaking changes\n[](#unreal-sdk-1.0.0-breaking-changes)\nFAvatarDownloadCompleted\n delegate now uses USkeletalMesh instead of UglTFRuntimeAsset.\nReadyPlayerMeComponent::LoadRender\n function is removed because it is not needed anymore. Use \nReadyPlayerMeRenderLoader::Load\n function instead.\nFDownloadImageCompleted\n delegate now uses UTexture2D instead of UTexture.\nUnreal SDK 0.18.0 breaking changes\n[](#unreal-sdk-0.18.0-breaking-changes)\nLoadAvatar\n and \nLoadNewAvatar\n parameters added.\n The \nOnLoadCompleted\n callback parameter has been added to the \nLoadAvatar\n and \nLoadNewAvatar\n functions in the \nReadyPlayerMeComponent\n.\nThe avatar caching logic has changed. \nIf you enabled avatar caching, this change will affect you. The directory where the avatar model is cached will contain a subdirectory where the model is saved. This change supports caching the same avatar with different Avatar Configurations. You might need to delete the generated \nPersistentDownloadDir\n directory.\nReadyPlayerMeAvatarLoader AvatarConfig parameter added. \nIn \nReadyPlayerMeAvatarLoader\n an \nAvatarConfig\n parameter has been added to the \nLoadAvatar\n function. This change will not affect you if you use the \nReadyPlayerMeComponent\n.\n\u200b\nUnreal SDK 0.17.0 breaking changes\n[](#unreal-sdk-0.17.0-breaking-changes)\nDue to major changes to the architecture and classes in the 0.17.0 update, you may see errors after updating the plugin. Possible errors and suggested solutions are shown below. \nSeveral helper functions have been removed\nFor the helper functions that validated the URL, make sure the URL string is not empty.\nFor the functions that created glTFRuntime configs, you need to create the configs manually. However, you shouldn't be using glTFRuntimr configs manually as the ReadyPlayerMeComponent provides most of the functionality you will need.\nFor the helper functions that changed the morph targets, use the \nSkeletalMeshComponent->SetMorphTarget\n function directly.\nThe ReadyPlayerMeActorComponent has been renamed to ReadyPlayerMeComponent\nThis might introduce issues in existing projects, where the component may be broken and not show any details. The safest way of fixing this issue is to recreate the Actor Blueprint where the component was included. Just renamaing the component in the code might not work. \nIf the comonent was included in the code, you might need to do the following.\n1.\nRemove the component from the code.\n2.\nCompile the project.\n3.\nSave the Blueprint of the Actor that contained the component.\n4.\nRe-add the component in the code.\n5.\nCompile the project again.\nThe RunAvatarSetup function has been renamed to LoadAvatar. \nTo fix the broken blueprint, replace the \nRunAvatarSetup\n blueprint function with \nLoadAvatar\n.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting/unreal-sdk-breaking-changes",
            "title": "Unreal SDK breaking changes"
        }
    },
    {
        "page_content": "Android Native\nHow to integrate Ready Player Me into Android native applications.\nYou can use Ready Player Me to add avatars to your native Android application.\nThis example showcases running the Avatar Creator in a native Android WebView and retrieving the avatar URL.\nFind the integration example built for Android Kotlin on GitHub.\n\u200b\n[https://github.com/readyplayerme/Example-Android-Kotlin](https://github.com/readyplayerme/Example-Android-Kotlin)\n\u200b\nDownload the example code (or look at it in GitHub).\nFolder: /app/src/main/java/com/kotlin/readyplayerme/\nThere are 4 files:\nMainActivity.kt\n - Launches a WebViewActivity for the user to create or update an avatar. \nWebViewActivity.kt\n - Creates a WebView, gets camera and storage permissions, launches the Ready Player Me website, and waits for data to be returned.\nWebViewInterface.kt\n - Receives the event data, handles extracting the avatar url, copies it to the clipboard, and displays it in an alert dialog. Once you received the avatar URL, you can use a 3D renderer of your preference to display it.\nCookieHelper.kt\nIf you are already a Ready Player Me partner, you can go to \nres/values/strings.xml\n and change the \npartner_subdomain \nstring value to use your subdomain name instead of \ndemo\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/android-native",
            "title": "Android Native"
        }
    },
    {
        "page_content": "iOS Native\nHow to integrate Ready Player Me into iOS native applications.\nYou can use the Ready Player Me web platform to add avatars to your native iOS application. This general integration guide gives an overview of the main methods of adding avatars to your app.\nFor integrating the Ready Player Me web platform directly into your native application and retrieving the avatar URL, the general process is as follows.\n1.\nSpawn a web browser or switch to a view with an embedded web browser (for example, using \nWKWebView\n as in the \n[Swift Example Project](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/native-ios/swift-example)\n).\n2.\nNavigate to the desired Ready Player Me URL, e.g https://demo.readyplayer.me/avatar.\n3.\nInject Javascript code with an \neventListener \nlinking a callback to a native function (see \n[Swift Example Project](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/native-ios/swift-example)\n to see an example of this).\n4.\nRetrieve the event data (a URL as a string).\nOn the Ready Player Me web platform, the avatar creation process is complete once users tap the \nNext\n button on the avatar customization screen. You can find the URL with the GLB file in the next step. It is at this time that an event with the id \nmessage\nis triggered. This is the event you will be listening for with the \neventListener\n. \nOnce you have retrieved the generated Avatar URL, you can make a web request to download the avatar .glb file. To load this into a 3D scene, you need to use a third-party framework that supports the loading of .gltf or .glb files as Xcode does not natively support .glb as a 3D file format.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/native-ios",
            "title": "iOS Native"
        }
    },
    {
        "page_content": "React Native\nHow to integrate Ready Player Me into React Native applications.\nYou can use Ready Player Me to add avatars to your React Native application.\nThe general process is as follows.\n1.\nLoad Ready Player Me as a WebView on your partner domain or https://demo.readyplayer.me/avatar.\n2.\nRetrieve the avatar 3D model via an \neventListener\n.\n3.\nImport the avatar model into a 3D renderer of your choice.\nIntegration example built for React Native can be seen on GitHub.\n\u200b\n[https://github.com/readyplayerme/Example-React-Native](https://github.com/readyplayerme/Example-React-Native)\n\u200b\nYou can also try the example \n[live on Snack](https://snack.expo.io/@rainerwolf3d/readyplayerme-with-react-native-expo)\n.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/react-native",
            "title": "React Native"
        }
    },
    {
        "page_content": "Web\nLoad and show your Ready Player Me avatars on the web.\nIn the \n[Quickstart](https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/quickstart)\n \nyou learned how to open the Avatar Creator in an iframe and get a valid Avatar URL.\nThis guide will teach you how to display the avatar in your website or app. Loading and displaying the avatars in your web app or page requires a webGL-based rendering tool and the Canvas. \nThere are many different open source options. We recommend \nmodel-viewer\n, as it is straightforwad to get started. \n\u200b\nModel Viewer\n[](#model-viewer)\nThe easiest way to load and display avatars on a web-page is to use the open-source package \n[model-viewer](https://modelviewer.dev/)\n (\n[https://modelviewer.dev/](https://modelviewer.dev/)\n). The following example shows how to import and use the model-viewer for loading a Ready Player Me avatar. \n-> \n[Read the full Model Viewer Documentation](https://modelviewer.dev/)\n \n(third-party)\n1.\nCopy the code below into a file and open it in your browser. \n2.\nChange the avatar URL to display a different avatar. \n<!\nDOCTYPE\n \nhtml\n>\n<\nhtml\n \nlang\n=\n\"\nen\n\"\n>\n\u200b\n<\nhead\n>\n \n<\nmeta\n \ncharset\n=\n\"\nUTF-8\n\"\n \n/>\n \n<\nmeta\n \nname\n=\n\"\nviewport\n\"\n \ncontent\n=\n\"\nwidth=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\n\"\n \n/>\n \n<\nmeta\n \nhttp-equiv\n=\n\"\nX-UA-Compatible\n\"\n \ncontent\n=\n\"\nie=edge\n\"\n \n/>\n \n<\ntitle\n>\nDocument\n</\ntitle\n>\n\u200b\n \n<\nscript\n \ntype\n=\n\"\nmodule\n\"\n \nsrc\n=\n\"\nhttps://unpkg.com/@google/model-viewer/dist/model-viewer.min.js\n\"\n>\n</\nscript\n>\n \n<\nstyle\n>\n \n#modelviewer\n \n{\n \nheight\n:\n 400px\n;\n \nwidth\n:\n 600px\n;\n \n}\n \n</\nstyle\n>\n</\nhead\n>\n\u200b\n<\nbody\n>\n \n<\nmodel-viewer\n \nid\n=\n\"\nmodelviewer\n\"\n \nalt\n=\n\"\nReady Player Me Avatar\n\"\n \nsrc\n=\n\"\nhttps://api.readyplayer.me/v1/avatars/6185a4acfb622cf1cdc49348.glb\n\"\n \nshadow-intensity\n=\n\"\n1\n\"\n \ncamera-controls\n \ntouch-action\n=\n\"\npan-y\n\"\n>\n \n</\nmodel-viewer\n>\n</\nbody\n>\n\u200b\n</\nhtml\n>",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/web",
            "title": "Web"
        }
    },
    {
        "page_content": "AvatarCache [Deprecated]\nRuntime avatar cache utilities for querying and clearing the current cache data.\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nIsCacheEmpty()\nbool \nReturns true if no avatars are stored in the persistent cache.\nClear()\nvoid \nClears all avatar data from the persistent cache.\nClearAvatar(string guid)\nvoid \nClears data for a specific avatar GUID from the persistent cache.\nGetAvatarCount()\nlong \nReturns number of avatars stored in the persistent cache.\nGetCacheSize()\nint \nReturns total size of all avatars stored in the persistent cache in bytes.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/avatarcache",
            "title": "AvatarCache [Deprecated]"
        }
    },
    {
        "page_content": "AvatarConfig [Deprecated]\nScriptable object for defining avatar parameters.\nProperties\n[](#properties)\nProperty\nType\nDescription\nMeshLod\nMeshLod\nChoose level of detail. High, Medium, or Low.\nPose\nPose\nChoose A Pose or T Pose.\nTextureAtlas\nTextureAtlas\nTurn on texture atlasing and choose the atlas size. None, Low (256), Medium (512), or High(1024).\nTextureSizeLimit\nint\nSet an upper limit on texture size from 256 to 1024.\nUseHands\nbool\nWhether to include hands with half-body avatars.\nMorphTargets\nList<string>\nList of individual morph targets or morph target standard groups to include on the avatar. \nAvatar Configuration templates are included in the SDK with recommended settings for High, Medium, and Low quality avatars at\n/Assets/Plugins/Ready Player Me/Resources/Data/Avatar Configurations/\nExample\n[](#example)\navatarLoader.AvatarConfig = \n    Resources.Load<AvatarConfig>(\"Data/AvatarConfigurations/AvatarConfigurationHigh\");",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/avatarconfig",
            "title": "AvatarConfig [Deprecated]"
        }
    },
    {
        "page_content": "AvatarLoader [Deprecated]\nThe AvatarLoader class is used for loading and downloading avatar models and configuring the output.\nProperties\n[](#properties)\nProperty\nType\nDescription\nAvatarConfig\nAvatarConfig\nAvatar Configuration instance used when downloading avatars.\nAvatarImporter\nIAvatarImporter\nAvatar Importer instance used for importing the GLB model.\n\u00e2\u20ac\u2039\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nLoadAvatar(string url)\nvoid\nInitiates avatar download and import operations. Takes an Avatar URL as a parameter.\nCancel()\nvoid\nCancels the current avatar loading process. Fires \nOnFailed\n  event with \nFailureEventArgs\n as \nOperationCancelled\n.\n\u00e2\u20ac\u2039\nEvents\n[](#events)\nEvent\nEventArgs\nDescription\nOnCompleted\nCompletionEventArgs\nCalled upon avatar loader success.\nOnFailed\nFailureEventArgs\nCalled upon avatar loading failure.\nOnProgressChanged\nProgressChangedEventArgs\nCalled upon avatar loader progress change.\nExample\n[](#example)\nusing\n \nUnityEngine\n;\n\u00e2\u20ac\u2039\nnamespace\n \nReadyPlayerMe\n{\n \npublic\n \nclass\n \nRuntimeExample\n \n:\n \nMonoBehaviour\n \n{\n \n[\nSerializeField\n]\n \nprivate\n \nstring\n avatarUrl \n=\n \n\"https://api.readyplayer.me/v1/avatars/632d65e99b4c6a4352a9b8db.glb\"\n;\n\u00e2\u20ac\u2039\n \nprivate\n \nGameObject\n avatar\n;\n\u00e2\u20ac\u2039\n \nprivate\n \nvoid\n \nStart\n()\n \n{\n            ApplicationData\n.\nLog\n();\n \nvar\n avatarLoader \n=\n \nnew\n \nAvatarLoader\n();\n            avatarLoader\n.\nOnCompleted \n+=\n \n(\n_\n,\n args\n)\n \n=>\n \n{\n                avatar \n=\n args\n.\nAvatar\n;\n                AvatarAnimatorHelper\n.\nSetupAnimator\n(\nargs\n.\nMetadata\n.\nBodyType\n,\n avatar\n);\n \n};\n            avatarLoader\n.\nLoadAvatar\n(\navatarUrl\n);\n \n}\n\u00e2\u20ac\u2039\n \nprivate\n \nvoid\n \nOnDestroy\n()\n \n{\n \nif\n \n(\navatar \n!=\n \nnull\n)\n \nDestroy\n(\navatar\n);\n \n}\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/avatarloader",
            "title": "AvatarLoader [Deprecated]"
        }
    },
    {
        "page_content": "AvatarRenderLoader [Deprecated]\nThe AvatarRenderLoader class is used for loading a 2D render of the avatar.\nYou can load a 2D render of your avatar using the Avatar Render Loader class which obtains a rendered image of your avatar via the Render API.\nProperties\n[](#properties)\nProperty\nType\nDescription\nTimout\nint\nSet or get the timout in seconds for the avatar render loader.\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nLoadRender(\n  string url,\n  AvatarRenderScene scene, \n  string blendShapeMesh,\n  Dictionary<string,float> blendShapes\n)\nvoid\nLoads a 2D render of the avatar at the supplied URL according to the supplied paramenters.\nLoadRender() Parameters\n[](#loadrender-parameters)\nurl\nstring\nURL of the avatar to render. This is the same URL as used to load the avatar model.\nscene\nAvatarRenderScene\nType of scene to render.  See below.\nblendShapeMesh (optional)\nstring\nTarget blend shape mesh name. Required to apply custom blend shape weights to the render.\nblendShapes (optional)\nDictionary<string, float>\nBlend shape name and weight to apply to the avatar render.\nValues for AvatarRenderScene\n[](#values-for-avatarrenderscene)\nProperty\nType\nDescription\nFullBodyPostureTransparent\nAvatarRenderScene\nCreates a portrait with a pose from a full-body avatar with transparent background.\nPortrait\nAvatarRenderScene\nCreates a portrait from a half-body avatar.\nPortraitTransparent\nAvatarRenderScene\nCreates a portrait from a half-body avatar with transparent background.\nActions\n[](#actions)\nEvent\nEventArgs\nDescription\nOnFailed\n<FailureType, string>\nCalled upon failure.\nOnCompleted\n<Texture2D>\nCalled upon success.\nProgressChanged\n<float, string>\nCalled upon download progress.\nExample\n[](#example)\npublic\n \nclass\n \nAvatarRenderExample\n \n:\n \nMonoBehaviour\n{\n \nprivate\n \nconst\n \nstring\n TAG \n=\n \nnameof\n(\nAvatarRenderExample\n);\n\u200b\n \nprivate\n \nstring\n url \n=\n \n\"https://api.readyplayer.me/v1/avatars/6185a4acfb622cf1cdc49348.glb\"\n;\n \nprivate\n \nAvatarRenderScene\n scene \n=\n AvatarRenderScene\n.\nFullBodyPostureTransparent\n;\n\u200b\n \nprivate\n \nstring\n blendShapeMesh \n=\n \n\"Wolf3D_Avatar\"\n;\n \n//Main-Node for blendshapes\n \nprivate\n \nDictionary\n<\nstring\n,\n \nfloat\n>\n blendShapes \n=\n \nnew\n \nDictionary\n<\nstring\n,\n \nfloat\n>\n \n{\n \n{\n \n\"mouthSmile\"\n,\n \n0.7f\n \n},\n \n{\n \n\"viseme_aa\"\n,\n \n0.5f\n \n},\n \n{\n \n\"jawOpen\"\n,\n \n0.3f\n \n}\n \n};\n\u200b\n \nvoid\n \nStart\n()\n \n{\n \nvar\n avatarRenderer \n=\n \nnew\n \nAvatarRenderLoader\n();\n        avatarRenderer\n.\nOnCompleted \n=\n Completed\n;\n        avatarRenderer\n.\nOnFailed \n=\n Fail\n;\n        avatarRenderer\n.\nLoadRender\n(\nurl\n,\n scene\n,\n blendShapeMesh\n,\n blendShapes\n);\n        loadingPanel\n.\nSetActive\n(\ntrue\n);\n \n}\n\u200b\n \nprivate\n \nvoid\n \nCompleted\n(\nTexture2D\n render\n)\n \n{\n \n// Do something with the image\n \n}\n\u200b\n \nprivate\n \nvoid\n \nFail\n(\nFailureType\n type\n,\n \nstring\n message\n)\n \n{\n \n// Errorhandling\n \n}\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/avatarrenderloader",
            "title": "AvatarRenderLoader [Deprecated]"
        }
    },
    {
        "page_content": "Changelog [Deprecated]\nUnity SDK 1.13.2 - December 20, 2022\n[](#unity-sdk-1.13.2-december-20-2022)\nAdded\n[](#added)\nIsWebViewUpToDate method is added for making sure the target device can handle 3D rendering.\nWebView Example updated with IsWebViewUpToDate usage.\nWebView android library is updated.\nAdded\n[](#added-1)\nIsWebViewUpToDate method is added for making sure the target device can handle 3D rendering.\nWebView Example updated with IsWebViewUpToDate usage.\nWebView Android library is updated.\nUnity SDK 1.13.1 - November 16, 2022\n[](#unity-sdk-1.13.1-november-16-2022)\nFixed\nFixed a typo in the header attributes for the avatar request.\nURL processor handling for shortcodes to support URL redirects.\nFix for CORS-related issues with Cloudfront URLs in WebGL.\nFixed an issue on the LOD Example slider.\nUnity SDK 1.13.0 - October 26, 2022\n[](#unity-sdk-1.13.0-october-26-2022)\nAdded\n[](#added-2)\nLOD example scene and script added to Examples folder of Ready Player Me plugin.\nFixed\n[](#fixed)\nWebView Android Manifest will now have allowBackup:false to help fix WebGLES2 issues in older devices.\nUnity SDK 1.12.0 - October 11, 2022\n[](#unity-sdk-1.12.0-october-11-2022)\nAdded\n[](#added-3)\nAvatar API support in Avatar Loader, now users can create configurable avatars.\nAvatar Configuration Scriptable Object for requesting avatars with different configurations.\nAvatar Caching support for avatars created with different avatar configurations.\nEditor options and scripting API for Avatar Caching, Cache Cleaning, and Avatar Config. \nTimeout variable in AvatarLoader for setting timeout of all web requests.\nShifted to using async/await instead of coroutines.\nAvatar Loader design shifted from a chain of methods to array of executable operations.\nAvatar loading operations can now be cancelled.\nExample scene for Avatar Config usage for showing multiple quality avatar loading.\nUpdated\n[](#updated)\nShort code handling logic updated for Avatar API.\nVisual updates for Avatar Loader and Settings windows.\nAvatar caching turned off by default.\nAvatars are now loaded without a default Animation Controller.\nAvatar URLs in example scenes are updated.\nDocumentation updated.\nFixed\n[](#fixed-1)\nAvatar position flicker on load issue is fixed.\nWebView cache cleanup issue is fixed. KeepSessionAlive usage for restarting avatar loading.\nHalf-body avatar loading error due to no Animator component issue is fixed.\nWebView white background flicker issue is fixed.\nUnity SDK 1.11.0 - \nAugust 3, 2022\n[](#unity-sdk-1.11.0-august-3-2022)\nAdded\n[](#added-4)\nAvatars are now cached at runtime and therefore loading much faster. Cached avatars are stored at Application.persistentDataPath.\nThe SDKLogger that prints logs about the current operation and the status of the avatar loading process. Enabled by default.\nPlease help us to improve the SDK by enabling analytics.\nYou can now generate and render 2D images of avatars directly from the Unity SDK.\nYou can now remove the session info after the avatar creation by setting the \nKeepSessionAlive\n flag to false.\nLoaded avatars from the Avatar Loader Editor Window are now imported as prefabs.\nExample on how to load multiple avatars efficiently added to Runtime Examples folder.\nA new runtime debug panel has been added to the Runtime Example.\nUpdated\n[](#updated-1)\nThe UI of the Avatar Loader is now cleaner and provides you with the most important functionality.\nThe WebView Partner Editor has been renamed to a more general name Settings.\nFixed\nVoiceHandler blend shape weight fix.\nAvatar Loader and Settings Dialog style issues on the first launch, in Unity 2020 and 2021 are fixed.\nRender pipeline error in Unity 2022 is fixed.\nEditor Coroutine runner duplicated when switching from play mode to edit mode fixed.\n\u200b\nUnity SDK 1.10.0 - May 24, 2022\n[](#unity-sdk-1.10.0-may-24-2022)\nHighlights\nOnFailed, OnProgressChanged and OnCompleted events for AvatarLoader. AvatarLoader with callbacks is now obsolete.\nVuplex example package. If you own Vuplex, you can use this package to load avatars in VR or standalone builds.\nAbility to clean up the cache of the WebView, which helps you starts RPM from the beginning.\nStopCoroutine method added to CoroutineRunner.\n\u200b\nChanged\nGeneral refactoring of the package. Avatar creation operations separated into classes.\n\u200b\nUnity SDK 1.9.0 - April 6, 2022\n[](#unity-sdk-1.9.0-april-6-2022)\nAdded\n[](#added-5)\nContext menu for extracting animations from FBX files.\nChanged\n[](#changed)\nRemoved legacy post message event listener.\nFixed\n[](#fixed-2)\nAsync loading issue causing mesh explosion.\n\u200b\nUnity SDK 1.8.0 - March 21, 2022\n[](#unity-sdk-1.8.0-march-21-2022)\nAdded\n[](#added-6)\nEye Animation Handler play-mode update and blink rate field.\nChanged\n[](#changed-1)\nAnimation Target FBX files are removed, animations and animation avatars are moved into separate folders.\nMipMaps are disabled for avatar textures.\nRemoved \"Wolf3D\" from namespace and component names and filenames.\nRenamed \"Wolf3D Ready Player Me Avatar SDK\" folder to \"Ready Player Me\".\nFixed\n[](#fixed-3)\nPartner subdomain not saved issue.\nPartner subdomain forced to return \"demo\" if set blank.\n\u200b\nUnity SDK 1.7.3 - January 20, 2022\n[](#unity-sdk-1.7.3-january-20-2022)\nChanged\nEditor UI updates\nWebView IOS and Android platform dependent compilation blocks\nLoading avatars if short code URL is pasted\nWebView example close button behaviour update in UI\nFixed\nPartner subdomain save issue\nCode commenting and typo fixes\nRemoved\nFormer animation source FBX fields are removed.\n\u200b\nUnity SDK 1.7.0 - October 08, 2021\n[](#unity-sdk-1.7.0-october-08-2021)\nChanged\n[](#changed-2)\nLayout and styles for Ready Player Me custom editor windows.\nAdded\n[](#added-7)\nFAQ button to custom editor windows.\n\u200b\nUnity SDK 1.6.0 - September 3, 2021\n[](#unity-sdk-1.6.0-september-3-2021)\nUpdates\nMessageCanvas replaced with MessagePanel for flexible use.\nWebView is called on a prefab which can be added via Game Object/UI/WebView Canvas menu.\nWebView example scene updated.\nAdded\nAdded OnAvatarImported callback to avatar loader, to receive the GameObject before it is processed.\nFixed\nFile name and typo fixes.\nRemoved\nMessageCanvas removed. Unsupported cases are covered by a message panel.\nwebview.html is removed.\n\u200b\nUnity SDK 1.5.1 - June 29, 2021\n[](#unity-sdk-1.5.1-june-29-2021)\nAdded\n[](#added-8)\nAudio Clip support for Voice Handler.\nUpdates\n[](#updates)\nProject version is updated to 2019.4.11f1 LTS.\nRuntime Test scene has URL to an optimized avatar.\nAnimation Target files updated with models with basic mesh.\nAnimator is moved to root avatar object.\nAvatar Armature and HipBone scale are set to 1.\nFixed\n[](#fixed-4)\nTypo fixes and refactoring in general.\nUnity SDK 1.5.0 - June 16, 2021\n[](#unity-sdk-1.5.0-june-16-2021)\nAdded\n[](#added-9)\nSupport for loading avatars from short codes.\nWebView menu window for editing partner subdomain in webview.html.\nUpdates\n[](#updates-1)\nGeneral refactoring.\nRPM website updated to Unity SDK.\nVoiceHandler supports beard and teeth mesh.\nFixed\n[](#fixed-5)\nAnimations not exporting correctly in the second time.\nWebView IOS permissions issues.\nWebView SSL Issue on Android.\nWebView does not send URL after window is restarted.\n\u200b\nUnity SDK 1.4.3 - May 28, 2021\n[](#unity-sdk-1.4.3-may-28-2021)\nAdded \n[](#added-10)\nVariable caching for Avatar Loader window. \nReveal Animations Folder button to Avatar Loader window. \nSupport for auto assigning animation files avatars during import. \nWebView no internet connection case cover.\nUpdated \n[](#updated-2)\nAnimation target FBX files for V2 avatars are updated. \nWebView plugin is refactored and code is cleaned up.\nFixed \n[](#fixed-6)\nIOS WebView not receiving glb URL. \nAsset import order conflict between animation and animation target files fixed. \nAnimation Controllers losing animation references fixed.\nRemoved \n[](#removed)\nMacOS support for WebView due to working only partially.\n\u200b\nUnity SDK 1.4.1 - May 20, 2021\n[](#unity-sdk-1.4.1-may-20-2021)\nUpdated\n[](#updated-3)\nRefactored eye and mouth movement scripts.\nFixed\n[](#fixed-7)\nEye and animation handler now works for avatars with texture atlas.\n\u200b\nUnity SDK 1.4.0 - May 11, 2021\n[](#unity-sdk-1.4.0-may-11-2021)\nAdded\n\u200b\n[New Unity WebView plugin](http://url200.wolf3d.io/ls/click?upn=zO1XgcDKkDORM-2FWG6BxU5XKYNYqrQwpQBEsxRwi1kzK5yEXg7qPTu6FaELE7Qb5N-2FuG23-2BGqMA-2FCf1WnNdcXxqFLLUac7osgDyiTU5-2Bmyutw3djRV3GfYmsmeIZMJyXeSp6jYEICT4EokgtPg8bTdDI8cOdHDsRk0h5sns0l7TmnFJMGXih7H2-2FbXeqOgYU1YrxRYTFbrE7jW4CC-2B-2Bh8Hajh8jw5wK6Nhx2L4Z4OeZ5I3NBqSytWYiw3xRLisFfuAHPV_mPe56M9GBmSUs2G6ZB0A0PmpLEmyrgDxYo5oWFqVizORgprkWiFhCQ-2BJDFrzq0hRqqSBE-2B0i4ZFChGqxOnVUQs3-2BWGzz432VnSbhd7177C9AlSNOXn-2F11P6mtRxtr-2FHB0q8Op4-2FeZoavzrFhaPqxIfHn9s04HkgyN0J2YHLQwgKqFhVU4G5pUE0adEJaicouO830Wze2eTiZ7WDZqXIzd5YOQn-2Ff3SeRGNLWr7DybtvA7rx0Br0jDyW1S1x6E1aMxa8UlkpzFDQCjMcp5Q7v70BfBL8nPbjpNEShiKN3sYodA8KEToUr4HF40C0LwhQbXmbNH2OGd-2BXjIOwevzh3DrBW7a2ip9wxPO-2B4lqL6wBxZmWM0ARN5HooyCXBTkrpOo11syVgQahxpMT0hms006Xaz8L7iG5YfewcKl8ba836YLgEMMwTDvjQdtofIED1lcH2iXOlovVUL3JhBBEIQOjPANYbZlLdqi1-2FLuEObgiafWqW2dW-2FnE6svySwLjj7cWMN0cD-2Ff63F6eESZHfb-2BGFWkpJSXU5a7NkM4DMnFk63fNMTcnnZSN2HPOoc-2Bj69J7vdAag0agcyKSIJc-2BZypW24SqkpPRVxOw3CA9o2zVB49NA0nYos5fYy3VRc70ZNMvdTUGpKnYzdZkrIcUfkfzVHPk50ETHrSDEQnzM7TCOM-3D)\n, which lets your users create an avatar from readyplayer.me without leaving their mobile application. You can \n[see it in action on Android in a video here](http://url200.wolf3d.io/ls/click?upn=zO1XgcDKkDORM-2FWG6BxU5Vs4G1xKsbrd5gwCet9F3hB8yMdFai99ZKoCFcZ-2F-2BcS5E1KAnla4qse7cnIfZvUXoQ-3D-3DV8bq_mPe56M9GBmSUs2G6ZB0A0PmpLEmyrgDxYo5oWFqVizORgprkWiFhCQ-2BJDFrzq0hRqqSBE-2B0i4ZFChGqxOnVUQs3-2BWGzz432VnSbhd7177C9AlSNOXn-2F11P6mtRxtr-2FHB0q8Op4-2FeZoavzrFhaPqxIfHn9s04HkgyN0J2YHLQwgKqFhVU4G5pUE0adEJaicouO830Wze2eTiZ7WDZqXIzd5YOQn-2Ff3SeRGNLWr7DybtvA7rx0Br0jDyW1S1x6E1aMxa8UlkpzFDQCjMcp5Q7v70BfBL8nPbjpNEShiKN3sYodA8KEToUr4HF40C0LwhQbXmbNH2OGd-2BXjIOwevzh3DrBW7a2ip9wxPO-2B4lqL6wBxZmWM0ARN5HooyCXBTkrpOo11syVgQahxpMT0hms006Xaz8L7iG5YfewcKl8ba836YLgEMMwTDvjQdtofIED1lcH2iXOlovVUL3JhBBEIQOjPANYbZlLdqi1-2FLuEObgiafWqW2dW-2FnE6svySwLjj7ceA77JaZ-2B1EIz1AoIRwrONIeH-2BOtJOw9uXIheFaIJdKkLuhd1FKI9LFiF7yn9voi7G-2BBqtaMp8dA6qoeLRmziX7NGFrEyvXZ8aJf9OhoUQ093OoQ0rygkZjjLjldi9cIfZZdwGLQaK9lUbCJyCqq1m47y-2B5zp-2BRUzVSUAsBLHzFM-3D)\n.\nFixed\nMouth Open blendshape index detection issue in VoiceHandler component is fixed.\nAsset Post-processor animation target file folder name causing all animation folders to be processed as humanoid is fixed.\nDownload the latest version of Unity SDK from our \n[releases page](https://docs.readyplayer.me/integration-guides/unity/unity-sdk-download)\n.\n\u200b\nUnity SDK 1.3.1 - April 21st, 2021\n[](#unity-sdk-1.3.1-april-21st-2021)\nWe've updated full-body avatars rigs, removing issues with upside-down hip bones and improving skin weights. In order to take advantage of the improved full-body rigs, updating to the latest UnitySDK is advised.\nDownload the latest SDK from the \n[releases page](https://docs.readyplayer.me/integration-guides/unity/unity-sdk-download)\n.\nAdded\nAnimation Avatar Target files for V2 outfit rigs.\nFetching avatar metadata such as outfit version, outfit gender, and body type.\nFixed\nGLTFUtility Experimental Asset Importer namespace fix for 2020.1 or newer versions.\n\n\nUnitySDK 1.3.0 - April 12th, 2021\n[](#unitysdk-1.3.0-april-12th-2021)\nDownload the latest SDK from the \n[releases page](https://docs.readyplayer.me/integration-guides/unity/unity-sdk-download)\n.\nAdded\n[](#added-11)\nRuntime loading of avatars.\nGLTFUtility optimizations for faster avatar loading.\nFixed\n[](#fixed-8)\nFixes avatar loading for Android builds for Oculus Quest/Quest 2.\nDocs\n[](#docs)\nAdded the \n[General Integration Guide]()\n on how to integrate avatars into a web or Unity/Unreal app.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/changelog",
            "title": "Changelog [Deprecated]"
        }
    },
    {
        "page_content": "Extras [Deprecated]\nThe SDK comes with extra components to help you set up your avatar.\n[EyeAnimationHandlerRotates and blinks the eyes of the avatar randomly. \u200b](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/eyeanimationhandler)\n[VoiceHandlerUses microphone feedback to animate the mouthOpen blend shape based on the amplitude of the voice.\u200b](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/extras/voicehandler)\n\u200b\n\u200b\n[](#undefined)\n\u200b\n[](#undefined-1)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/extras",
            "title": "Extras [Deprecated]"
        }
    },
    {
        "page_content": "SDKLogger [Deprecated]\nLog handler for the avatar loading process.\nThe SDKLogger prints logs about the current operation and the status of the avatar loading process.\nProperties\n[](#properties)\nProperty\nType\nDescription\nlogEnabled\nbool\nEnables (true) or disables (false) logging. \nTrue by default.\nExample\n[](#example)\nSDKLogger\n.\nAvatarLoaderLogger\n.\nlogEnabled \n=\n \nfalse\n;\n\u200b\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/sdklogger",
            "title": "SDKLogger [Deprecated]"
        }
    },
    {
        "page_content": "WebView [Deprecated]\nWebView \nis a component of the \nWebViewCanvas \nprefab that is part of the Ready Player Me SDK. To use a WebView, create a WebViewCanvas game object by selecting \n\nGameObject > UI > WebView Canvas\n.\npublic async Task IsWebViewUpToDate()\nCheck if the WebView that will be used for displaying the RPM website is up to date for handling 3D graphics. If it returns false, it is not advised to load WebView since the browser performance will be poor. Instead, you can warn the user for them to update their system WebView applications.\nReady Player Me website will work on Android devices with System WebView with a rendering engine equal to or newer than Chrome v70 or Firefox v64, and IOS devices with Webkit WebView equal to or newer than v600. This info is checked using the userAgent string of the WebView.\npublic void CreateWebview()\nThe Ready Player Me website will work on Android devices with System WebView with a rendering engine equal to or newer than Chrome v70 or Firefox v64, and IOS devices with Webkit WebView equal to or newer than v600. \nThis info is checked using the userAgent string of the WebView.\nProperties\n[](#properties)\nProperty\nType\nDescription\nKeepSessionAlive\nbool\nIf set to false, clears stored avatar data after the avatar creation is finished or when the WebView is destroyed. \nBy default, this is set to true.\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nCreateWebview()\nvoid\nCreates the WebView window and loads the Ready Player Me website.\nSetScreenPadding(\n  int left, int top,\n  int right,\n  int bottom)\nvoid\nSets the screen padding of the WebView window. \nDefault is 0 for all sides.\nSetVisible(bool visible)\nvoid\nSets the visibility of the WebView. \nClearAvatarData()**\nvoid\nClears avatar data from the WebView local storage and reloads the Ready Player Me page for new avatar creation.\nasync Task IsWebViewUpToDate()\nbool\nChecks if the WebView that will be used for displaying the RPM website is up to date for handling 3D graphics. If it returns false, it is not advised to load WebView since the browser performance will be poor. Instead, you can warn the user for them to update their system WebView applications.\nIf the cache is cleared, then the next time you open Ready Player Me in the WebView, your previous avatar will not be there, and you will start from the beginning of the avatar creation process.\nAction\n[](#action)\nEvent\nEventArgs\nDescription\nOnAvatarCreated\n<string>\nEvent to call when an avatar is created. Receives GLB URL.\nExample\n[](#example)\nOnce you have imported the Ready Player Me SDK, find an example at \n\nPlugins > Ready Player Me > Examples > Webview Example\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/webview",
            "title": "WebView [Deprecated]"
        }
    },
    {
        "page_content": "Avatar Creator Integration [Deprecated]\nIntegrate the Ready Player Me Avatar Creator in your Unity application.\nThe Avatar Creator is a web-based, device-agnostic. and ready-to-use way of integrating the avatar creation and editing process into your game. In this guide you will learn how to integrate it for different deployment targets.\nYou have various customization options for the Avatar Creator. \nSee the \n[Avatar creator customization guide](https://docs.readyplayer.me/ready-player-me/customizing-guides/avatar-creator)\n\u200b\nReady Player Me Avatar Creator\nAvatar Creator integration\n[](#avatar-creator-integration)\nDepending on your deployment platform there are different approaches to integrating the Avatar Creator directly with your Unity application.\nFollow the steps in the integration guide for your platform.\n[Avatar Creator for\nAndroid and iOSUse the WebView component to include the Avatar Creator in your Android or iOS game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-android-and-ios)\n[Avatar Creator for \nVR and PCUse Vuplex Web Component to include the Avatar Creator in your VR or PC game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-vr-and-pc)\n[Avatar Creator for \nWebGLUse a web overlay to integrate the avatar creator in your WebGL game.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-webgl)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/avatar-creator",
            "title": "Avatar Creator Integration [Deprecated]"
        }
    },
    {
        "page_content": "Code Samples [Deprecated]\nHow to use avatars and integrat the Avatar Creator.\nThe following sample projects demonstrate the use of Ready Player Me avatars as well as Avatar Creator integration for different platforms.\n\u200b\n[Loading 3D Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/loading-3d-avatars)\n\u200b\n\u200b\n[Loading 2D Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/loading-2d-avatars)\n\u200b\n\u200b\n[Avatar Creator (WebGL)](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/avatar-creator-webgl)\n\u200b\n\u200b\n[Avatar Creator (Desktop, VR)](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/avatar-creator-desktop)\n\u200b\n\u200b\n[Avatar Creator (Mobile)](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/avatar-creator-mobile)\n\u200b\n\u200b\n[Distance based LODs](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples/distance-based-lods)\n\u200b\nThe examples have been tested in Unity 2019LTS and newer versions of the Unity3D game engine.\nThe default domain for code samples is always \ndemo \nand it provides both full-body and half-body avatars.\nIf you have a subdomain, you can replace the target URL with your own.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/code-samples",
            "title": "Code Samples [Deprecated]"
        }
    },
    {
        "page_content": "FAQ for Unity [Deprecated]\nFrequently asked questions by Unity developers.\nIs there a way to cache (store) avatars locally to reuse them without downloading each time?\n[](#is-there-a-way-to-cache-store-avatars-locally-to-reuse-them-without-downloading-each-time)\nYes. Starting with SDK 1.12.0, avatars are cached at runtime and therefore loading much faster. See \n[Avatar Caching](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-caching)\n.\nCan I create an avatar directly in-engine? \n[](#can-i-create-an-avatar-directly-in-engine)\nNo. It is not currently possible to directly create an avatar inside the engine. You need to use a WebView. See \n[Avatar Creator Integration](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator)\n.\nHow do I customize a GLB model in Unity?\n[](#how-do-i-customize-a-glb-model-in-unity)\nImportant: This question is about getting and customizing the actual model, not about using the avatar in your app\n.\nYou need to download your avatar, import it into Blender, make the changes, then save, export, and re-import into Unity.\n1.\nCreate and download the avatar.\n2.\nImport the downloaded GLB file into Blender by selecting \nFile > Import > gITF 2.0 (.glb/gltf)\n. \n3.\nEdit the model as desired. \n4.\nGo to the \nTexture Paint\n tab. \n5.\nIn the \nImage Editor\n panel, select \nView\n. \n6.\nSelect each texture from the drop-down at the top. \n7.\nWhen done, select \nImage/Save As\u2026\n (or Shift + Alt + S) to save. \n8.\nExport your model as an FBX selecting \nFile > Export > FBX (.fbx)\n.\n9.\nImport your model and textures into Unity. \n10.\nClick the FBX avatar in the \nAssets \npane. \n11.\nIn the \nInspector\n, change the \nLocation \nto \nUse External Materials (Legacy)\n and apply. \n12.\nIf some base textures don\u2019t appear, click on the body part and manually assign the texture to the correct map (Albedo).\nHow do I change the Render Pipeline of my Unity Project with avatars to URP?\n[](#how-do-i-change-the-render-pipeline-of-my-unity-project-with-avatars-to-urp)\nThere are no specifics when it comes to changing the render pipeline with Ready Player Me avatars. Depending on the Unity version you use, you need to follow the general guide for changing the Render Pipeline.\n\u200b\n[See the Unity Documentation](https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@12.0/manual/features/rp-converter.html)\n\u200b\nWhy is my avatar not decomposed?\n[](#why-is-my-avatar-not-decomposed)\nFor most use cases it is best to have a single mesh and a minimum number of texture atlases to minimize draw calls per avatar and maximize performance in your application. However, if you need to have your avatar decomposed into multiple pieces, you can do so by turning off the atlasing on the Avatar Configuration. See \n[Avatar Configuration](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n.\nHow can I integrate the Avatar Creator into my VR application?\n[](#how-can-i-integrate-the-avatar-creator-into-my-vr-application)\nYou can do so by using a 3rd party library called Vuplex WebView. See \n[Avatar Creator for VR and PC](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator/avatar-creator-for-vr-and-pc)\n and the \n[Unity/Vuplex example on GitHub](https://github.com/readyplayerme/Unity-Vuplex-Example)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/faq-for-unity",
            "title": "FAQ for Unity [Deprecated]"
        }
    },
    {
        "page_content": "Help us improve the Unity SDK [Deprecated]\nEnable analytics and help us improve.\nWe are constantly adding new features and improvements to the Ready Player Me SDK. Enable analytics and help us build even better free tools for more developers. \nThe collected analytics data is used for internal purposes only and not shared with third parties. See \n[Licensing & Privacy](https://docs.readyplayer.me/ready-player-me/support/terms-of-use)\n.\nWhat we track\n[](#what-we-track)\nWe believe in transparency, so here is a list of the events that we track.\nGeneral Data\n[](#general-data)\nSDK version\nUnity version and render pipeline \nOperating system and version \nYour partner subdomain and application name \nYour device ID (we use this to group events by developer) \nEvents (Unity Editor only) \n[](#events-unity-editor-only)\nActivity on the Ready Player Me editor dialogs (clicked buttons and checkboxes) \nBuild application for a specific target\nAvatar loaded (target-platform, url, success, error)\nHow to enable SDK Analytics \n[](#how-to-enable-sdk-analytics)\nYou will be asked to enable SDK Analytics when you import the SDK into Unity. \nClick \nEnable Analytics\n to opt in and allows us to track the events listed above.\n\u200b\n\u200b\nEnabling Analytics after choosing Never Ask Again\n[](#enabling-analytics-after-choosing-never-ask-again)\nIf you previously checked Never Ask Again and want to allow tracking now, do the following.\n1.\nFrom the menu bar, select \nReady Player Me > Settings\n.\n2.\nIn the \nReady Player Me\n dialog, check \nYes, enable analytics\n.\n\u200b\n\u200b\nHow to disable SDK Analytics\n[](#how-to-disable-sdk-analytics)\nYou can disable analytics at any time.\n1.\nFrom the menu bar, select \nReady Player Me > Settings\n.\n2.\nIn the \nReady Player Me\n dialog, uncheck \nAnalytics enabled\n.\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/help-us-improve-the-unity-sdk",
            "title": "Help us improve the Unity SDK [Deprecated]"
        }
    },
    {
        "page_content": "Load Avatars [Deprecated]\nLoad 3D and 2D avatars into your Unity Scene.\nIn this guide, you learn how to load avatars into your Unity Scenes.\n\u200b\n[Load 3D Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/load-avatars#load-3d-avatars)\n\u200b\n\u200b\n[Load 2D Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/load-avatars#load-2d-avatars)\n\u200b\n\u200b\n[Save Avatars in your Unity Project](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/load-avatars#save-avatars-as-npcs-in-your-project)\n\u200b\nLoad 3D Avatars\n[](#load-3d-avatars)\nYou can load \nfull-body\n and \nhalf-body\n avatars into your Unity game. For both types of avatars you can follow the same procedure.\n1.\nCreate an instance of the \nAvatarLoader\n. \n2.\nCall the \nLoadAvatar()\n method with an avatar URL. The example uses a URL from the demo Avatar Creator \n[https://demo.readyplayer.me](https://demo.readyplayer.me/avatar)\n. You will later learn how to retrieve an Avatar URL directly in your game.\nvar\n avatarUrl \n=\n \n\"https://api.readyplayer.me/v1/avatars/632d65e99b4c6a4352a9b8db.glb\"\n;\nAvatarLoader\n avatarLoader \n=\n \nnew\n \nAvatarLoader\n();\navatarLoader\n.\nLoadAvatar\n(\nAvatarURL\n);\n \n3. Receive the GameObject of the avatar in \nCompletionEventArgs\n of the \nOnCompleted\n callback.\nSee the code below for the completed example. \nSee the \n[API Reference]()\n for a complete list of callbacks of the \nAvatarLoader\n. \nYou can also find the code below in the \nAssets\\Plugins\\Ready Player Me\\Examples\\Runtime Example\\RuntimeExample\nScene and script.\nusing\n \nUnityEngine\n;\n\u200b\nnamespace\n \nReadyPlayerMe\n{\n \npublic\n \nclass\n \nRuntimeExample\n \n:\n \nMonoBehaviour\n \n{\n \n//Demo Avatar URL\n \n[\nSerializeField\n]\n \nprivate\n \nstring\n avatarUrl \n=\n \n\"https://api.readyplayer.me/v1/avatars/632d65e99b4c6a4352a9b8db.glb\"\n;\n\u200b\n \nprivate\n \nGameObject\n avatar\n;\n\u200b\n \nprivate\n \nvoid\n \nStart\n()\n \n{\n            ApplicationData\n.\nLog\n();\n \nvar\n avatarLoader \n=\n \nnew\n \nAvatarLoader\n();\n            avatarLoader\n.\nOnCompleted \n+=\n \n(\n_\n,\n args\n)\n \n=>\n \n{\n                avatar \n=\n args\n.\nAvatar\n;\n                AvatarAnimatorHelper\n.\nSetupAnimator\n(\nargs\n.\nMetadata\n.\nBodyType\n,\n avatar\n);\n \n};\n            avatarLoader\n.\nLoadAvatar\n(\navatarUrl\n);\n \n}\n\u200b\n \nprivate\n \nvoid\n \nOnDestroy\n()\n \n{\n \nif\n \n(\navatar \n!=\n \nnull\n)\n \nDestroy\n(\navatar\n);\n \n}\n \n}\n}\n\u200b\nLoad 2D Avatars\n[](#load-2d-avatars)\nYou can load a 2D render of your avatar using the \n[AvatarRenderLoader](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarrenderloader)\n class which obtains a rendered image of your avatar via the Render API.\n1.\nCreate an instance of \nAvatarRenderLoader\n.\n2.\nCall the \nLoadRender()\n method, passing the required arguments.\nAvatarRenderLoader\n avatarRenderLoader \n=\n \nnew\n \nAvatarRenderLoader\n();\navatarRenderLoader\n.\nLoadRender\n(\nurl\n,\n scene\n,\n blendShapeMesh\n,\n blendShapes\n);\nSee the code below for a complete example. \nSee the \n[AvatarRenderLoader API Reference](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarrenderloader)\n to learn more about \nAvatarRenderLoader\n and the function arguments.\nYou can find a complete example usage of this code in the \nAssets\\Plugins\\Ready Player Me\\Examples\\AvatarRender Example\\AvatarRenderExample\n scene and script.\nSave avatars as NPCs in your project\n[](#save-avatars-as-npcs-in-your-project)\nThe easiest way to save avatars in your project and package them with your build is using the Avatar Loader.\nThe Avatar Loader lets you download and save an avatar in your project in the Unity Editor.\n1.\nLaunch the Avatar Loader window by choosing \nReady Player Me > Avatar Loader\n. \n\u200b\n2.\nPaste your avatar URL (or shortcode) into the \nAvatar URL or Shortcode\n field.\n3.\nOptionally, check \nUse Eye Animations\n. This will add a component to the avatar GameObject.\n4.\nOptionally, check \nVoice To Animation\n. This will add a component to the avatar GameObject.\n5.\nClick \nLoad Avatar into the Current Scene\n. \n6.\nYour avatar loads into the current Scene at position (0,0,0). \n7.\nThe avatar prefab is stored in a new folder (name = avatar ID) in \nAssets > Avatars\n.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/load-avatars",
            "title": "Load Avatars [Deprecated]"
        }
    },
    {
        "page_content": "Mixamo Animations [Deprecated]\nHow to add animations to Ready Player Me avatars.\nReady Player Me full-body avatars are compatible with \n[Mixamo](https://www.mixamo.com/)\n\u200b\n[ ](http://www.mixamo.com/)\nanimations and include a Mixamo-compatible full-body skeletal rig that makes it possible to use animations exported from Mixamo. To download and use Mixamo animations on full-body avatars do the following.\n1.\nGo to \n[www.mixamo.com](http://www.mixamo.com/)\n and log in with your Adobe credentials or create an account.\n2.\nSelect any animation. \n3.\nClick \nDownload\n.\n4.\nIn the \nDownload Settings\n dialog, select the \nFormat\n as \nFBX for Unity\n and the \nSkin\n as \nWith Skin\n. Leave \nFrames per Second\n as 30 and \nKeyframe Reduction\n as none.\n5.\nClick \nDownload\n.\n6.\nMove the downloaded FBX file into the \nAssets/Plugins/Ready Player Me\n/Resources\n/Animations\n folder.\n\u200b\n\u200b\nFor use with the Ready Player Me avatar in your project, you need to separate the animation from the FBX file and add it to the Avatar Animator.\n1.\nRight-click on the FBX file and choose \nExtract Animation\n. This creates a new file with your animation. \n2.\nDouble-click \nAssets > Plugins > Ready Player Me > Resources > Avatar Animator\n.\n3.\nDrag your animation into the editor and add it to the state machine. (See \n[https://docs.unity3d.com/Manual/class-AnimatorController.html](https://docs.unity3d.com/Manual/class-AnimatorController.html)\n)\n4.\nRun your Game and you should see the animation. \nIf you are using an SDK version before 1.8.0, you will need to upload animation target files to get an animation based on your avatar's body type.\nUpload either \nFemaleAnimationTargetV2\n or \nMaleAnimationTargetV2\n from \nAssets/Plugins/Wolf3D Ready Player Me SDK/Resources/AnimationTargets\n to Mixamo. Then follow the same steps.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/loading-mixamo-animations",
            "title": "Mixamo Animations [Deprecated]"
        }
    },
    {
        "page_content": "Optimize [Deprecated]\nTune visual quality and performance.\nYou can optimize Ready Player Me avatars to match with your available compute and graphics power. Choose maximum details or fine-tune visual quality to meet your performance goals.\n\u200b\n\u200b\n[Avatar ConfigurationSet the specs of the avatars loaded into the Scene (e.g. LODs, texture size).](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n[Avatar CachingLearn how to turn on and manage the client-side avatar cache.](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-caching)",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/optimize",
            "title": "Optimize [Deprecated]"
        }
    },
    {
        "page_content": "Quickstart [Deprecated]\nLoad your personal Ready Player Me avatar in Unity in less than 10 minutes.\n1. Download and open Unity\n[](#1.-download-and-open-unity)\nThe Ready Player Me SDK requires \nUnity 2019.4.11f1 LTS or later.\n\u200b\n[Get Unity](https://unity3d.com/get-unity/download)\n\u200b\nYou need an avatar URL. If you don't have an avatar and an avatar URL, create one now at \n[demo.readyplayer.me](https://demo.readyplayer.me/avatar)\n, a demo property for creating avatars, or at your own subdomain. Copy the URL.\n2. Download and import the Unity SDK\n[](#2.-download-and-import-the-unity-sdk)\n\u200b\n[Download the latest Ready Player Me Unity SDK.](https://bit.ly/RPM-Unity-SDK-Latest)\n\u200b\nExtract the downloaded content, then drag and drop the Unity Package into your project, or import the package via \nAssets -> Import Package -> Custom Package\n.\n \nIf the Newtonsoft Json package is already installed in your project, uncheck it in the package import dialog.  \n\u200b\n\u200b\nWhen you import the package for the first time, you will be asked to allow analytics. By doing so, you can help us improve the Unity SDK.\n3. Open the runtime example scene\n[](#3.-open-the-runtime-example-scene)\nGo to  \nAssets -> Plugins -> Ready Player Me -> Examples -> Runtime Example\n and open the Runtime Example Scene. \n\u200b\n\u200b\n4. Load your own personal avatar\n[](#4.-load-your-own-personal-avatar)\nIf you haven't done so already, create your personal avatar with the demo web Avatar Creator at  \n[https://demo.readyplayer.me/avatar](https://demo.readyplayer.me/avatar)\n. \nCopy the Avatar URL.\n\u200b\n\u200b\nReturn to the \nUnity Runtime Example Scene\n. \nIn the Hierarchy, find the \nRuntime Example\n component. \nPaste the Avatar URL into the \nAvatar Url\n Property.\n\u200b\n\u200b\n5. Run your project\n[](#5.-run-your-project)\nClick \nPlay\n and wait a moment for your avatar to load and animate.\n\u200b\n\u200b\n6. Next steps\n[](#6.-next-steps)\nNext you will learn in more detail how to\nload \n[3D avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars#load-3d-avatars)\n,\nload \n[2D avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars#load-2d-avatars)\n (e.g. for profile pictures),\nintegrate and customize the \n[Avatar Creator](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/avatar-creator)\n in your game or app,\nand how to \n[animate](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/loading-mixamo-animations)\n your avatars.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/quickstart",
            "title": "Quickstart [Deprecated]"
        }
    },
    {
        "page_content": "Troubleshooting [Deprecated]\nCommon errors, known issues, and updating from earlier SDK versions.\nCommon errors\n[](#common-errors)\n\u200b\n[Avatar loading issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/avatar-loading-issues)\n\u200b\nKnown issues\n[](#known-issues)\n\u200b\n[Newtonsoft JSON issues]()\n\u200b\n\u200b\n[iOS issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/ios-issues)\n\u200b\n\u200b\n[WebGL issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/webgl-issues)\n\u200b\n\u200b\n[Firewall issues](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/firewall-issues)\n\u200b\nEarlier SDK versions\n[](#earlier-sdk-versions)\n\u200b\n[Updating from earlier versions](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/troubleshooting/updating-from-earlier-versions)\n\u200b\nIf you need additiona support, contact us at \n[[email\u00a0protected]](https://docs.readyplayer.me/cdn-cgi/l/email-protection#691a1c1919061b1d291b0c080d10190508100c1b47040c)\n.\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/troubleshooting",
            "title": "Troubleshooting [Deprecated]"
        }
    },
    {
        "page_content": "Swift example project\nIntegrate the Ready Player Me Avatar Creator into a native iOS application using WKWebview.\nThe following example Swift project shows how the Ready Player Me Avatar Creator can be integrated into a native iOS application using \nWKWebview\n.\nGet the code\n[](#get-the-code)\nThis example project uses \nUIKit\nand \nWKWebview\nand is only supported on iOS.\nDownload the \n[Swift example code from GitHub](https://github.com/readyplayerme/Example-iOS-Swift)\n.\nRun the example project\n[](#run-the-example-project)\n1.\nOn your computer, open the Xcode project provided in the link above.\n2.\nUnder \nSigning and Capabilities, \nset \nProvisioning profile\n and \nSigning Certificate\n as shown below.\n3.\nBuild and run the project on your target iOS device. You should be able to see and use the Avatar Creator from your app.\nHow it works\n[](#how-it-works)\nThe code for integrating the Avatar Creator is in three .swift files that need to be part of your own project as well.\n\u00e2\u20ac\u2039\n[WebViewController.swift](https://github.com/readyplayerme/Example-iOS-Swift/blob/master/Example-iOS-Swift/WebViewController.swift)\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n[ViewController.swift](https://github.com/readyplayerme/Example-iOS-Swift/blob/master/Example-iOS-Swift/ViewController.swift)\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n[WebCacheCleaner.swift](https://github.com/readyplayerme/Example-iOS-Swift/blob/master/Example-iOS-Swift/WebCacheCleaner.swift)\n\u00e2\u20ac\u2039\nWebViewController.swift\n[](#webviewcontroller.swift)\nWebViewController\n is a custom \nUIViewController\n for handling displaying the WebView browser. It uses \nWebKit \n(\nWKWebView\n) and \nUIKit\n. \nThis section looks at Ready Player Me specific code in this file.\nReady Player Me website Url\n[](#ready-player-me-website-url)\nIf you have a Ready Player Me subdomain, you can edit the URL for the Avatar Creator to point to your own subdomain by setting the \nsubdomain\n  at the top of the file to your own. \n \nlet\n subdomain \n=\n \n\"demo\"\n \n==>\n \nlet\n subdomain \n=\n \n\"yoursubdomain\"\nJavascript injection\n[](#javascript-injection)\nWhen the user clicks the \nNext \nbutton in the Avatar Creator, their avatar asset is baked and a URL for the resulting .glb file is displayed. \nThis triggers a Javascript event with a message string that contains this generated avatar URL. \nYou can retrieve this URL with an \neventlistener\n. \nInside the \nWebViewController\n, find the variable \nsource\n. It holds the code to \nadd an event listener listening for a \nmessage\n, \nsubscribes to events from Ready Player Me, \nand handles the messages with a callback to native Swift using \nwebkit.messageHandlers\n. This callback passes the \nevent.data\n (which contains the Ready Player Me avatar's .glb file URL).\nlet\n source \n=\n \n\"\"\n\"\n            window\n.\naddEventListener\n(\n'message'\n,\n \nfunction\n(\nevent\n){\n \nconst\n json \n=\n \nparse\n(\nevent\n)\n \nif\n \n(\njson\n?.\nsource \n!==\n \n'readyplayerme'\n)\n \n{\n \nreturn\n;\n \n}\n \n// Susbcribe to all events sent from Ready Player Me once frame is ready\n \nif\n \n(\njson\n.\neventName \n===\n \n'v1.frame.ready'\n)\n \n{\n                  window\n.\npostMessage\n(\n \nJSON\n.\nstringify\n({\n \ntarget\n:\n \n'readyplayerme'\n,\n \ntype\n:\n \n'subscribe'\n,\n \neventName\n:\n \n'v1.**'\n \n}),\n \n'*'\n \n);\n \n}\n                window\n.\nwebkit\n.\nmessageHandlers\n.\niosListener\n.\npostMessage\n(\nevent\n.\ndata\n);\n \nfunction\n \nparse\n(\nevent\n)\n \n{\n \ntry\n \n{\n \nreturn\n \nJSON\n.\nparse\n(\nevent\n.\ndata\n)\n \n}\n \ncatch\n \n(\nerror\n)\n \n{\n \nreturn\n \nnull\n \n}\n \n};\n \n});\n \n\"\"\n\"\nSetting up the WebView \n[](#setting-up-the-webview)\nThe \nloadView()\n function is responsible for initializing the WebView, injecting the Javascript snippet, and linking the callback function mentioned above. \nFirst, create a \nWKWebViewConfiguration\n object and a \nWKUserScript\n, which are used to create a bridge between the WKWebView's browser, Javascript, and the Native code. The \nsource:\n parameter is set to the \nsource\n variable defined above that contains the JavaScript snippet.\nlet\n config \n=\n \nWKWebViewConfiguration\n()\nlet\n script \n=\n \nWKUserScript\n(\nsource\n:\n source\n,\n injectionTime\n:\n \n.\natDocumentEnd\n,\n forMainFrameOnly\n:\n \nfalse\n)\nNext, add the  \nWKUserScript \nto the \nconfig \nobject.  \nconfig\n.\nuserContentController\n.\naddUserScript\n(\nscript\n)\nSet the delegate function by passing a \nWKScriptMessageHandler \nof \nself \nand the name to use for the callback function.\nconfig\n.\nuserContentController\n.\nadd\n(\nself\n,\n name\n:\n \n\"iosListener\"\n)\nBecause the \nWebViewController\n inherits from \nWKScriptMessageHandler\n, you can pass \nself\n as the first parameter. The name passed for the callback function is \niosListener\n, which is the same as the function called in the above  Javascript snippet. These must match for the bridge to work.\nFinally, initialize the \nWKWebView\n, passing the frame bounds and the \nconfig \nobject, and assign this view as the \nWebView\n to ensure it is then displayed.\nwebView \n=\n \nWKWebView\n(\nframe\n:\n \n.\nzero\n,\n \nconfiguration\n:\n config\n)\nview \n=\n webView\nThe next important function is \nuserContentController()\n. This function is called as the callback function in response to the Javascript event. Here, you have access to the data from the Javascript event using \nmessage.body\n. In this example, you pass this to a \navatarurlDelegate.avatarUrlCallback\n function that passes the data to the main ViewController which is then displayed in a native popup.  \nfunc\n \nuserContentController\n(\n_\n userContentController\n:\n \nWKUserContentController\n,\n didReceive message\n:\n \nWKScriptMessage\n)\n \n{\n    avatarUrlDelegate\n?\n.\navatarUrlCallback\n(\nurl \n:\n \n\"\n\\(\nmessage\n.\nbody\n)\n\"\n)\n}\nViewController.swift\n[](#viewcontroller.swift)\nThe \nViewController.swift\n file implements the main view controller. \nIn this example, it contains functionality for spawning, displaying, and retrieving the information (Ready Player Me avatar URL) from the \nWebViewController\n.\nThe \nviewDidLoad()\n function calls the \ncreateWebView()\n function, sets the visibility of the buttons to \ntrue\n, and hides the \nwebViewController\n. \nThe result of the \nhasCookies()\n function determines whether to hide the \neditAvatarButton\n. It is only possible to edit an existing avatar if one has been created, and the avatar data is stored in the browser's cookies. \n \noverride\n \nfunc\n \nviewDidLoad\n()\n \n{\n \nsuper\n.\nviewDidLoad\n()\n \ncreateWebView\n()\n        editAvatarButton\n.\nisHidden \n=\n \ntrue\n        webViewController\n.\nview\n.\nisHidden \n=\n \ntrue\n        editAvatarButton\n.\nisHidden \n=\n \n!\nwebViewController\n.\nhasCookies\n()\n \n}\nCreating the WebViewController\n[](#creating-the-webviewcontroller)\nThe \ncreateWebView()\n function creates and configures the \nWebViewController\n. \nWith \nwebViewController.avatarUrlDelegate = self\n, it assigns itself as an \navatarUrlDelegate\n. This is important for receiving the data from the Javascript event in the \nWebViewController\n. \nThis function also sets the size of the window and the \ntag\n used as an identifier inside the \ndestroyWebView()\n function.\n \nfunc\n \ncreateWebView\n(){\n \nlet\n storyboard \n=\n \nUIStoryboard\n(\nname\n:\n \n\"Main\"\n,\n bundle\n:\n \nnil\n)\n \nlet\n controller \n=\n storyboard\n.\ninstantiateViewController\n(\nwithIdentifier\n:\n webViewIdentifier\n)\n \nas\n \nUIViewController\n\u00e2\u20ac\u2039\n \nguard\n \nlet\n viewController \n=\n controller \nas\n?\n \nWebViewController\n \nelse\n \n{\n \nreturn\n \n}\n        webViewController \n=\n viewController\n        webViewController\n.\navatarUrlDelegate \n=\n \nself\n \n \naddChild\n(\ncontroller\n)\n\u00e2\u20ac\u2039\n \nself\n.\nview\n.\naddSubview\n(\ncontroller\n.\nview\n)\n        controller\n.\nview\n.\nframe \n=\n view\n.\nsafeAreaLayoutGuide\n.\nlayoutFrame\n        controller\n.\nview\n.\ntag \n=\n webViewControllerTag\n        controller\n.\nview\n.\nautoresizingMask \n=\n \n[.\nflexibleWidth\n,\n \n.\nflexibleHeight\n]\n        controller\n.\ndidMove\n(\ntoParent\n:\n \nself\n)\n \n}\nReceiving the avatar URL\n[](#receiving-the-avatar-url)\nThe \navatarUrlCallback(url: string)\n function is called by the \nwebViewController\n when the avatar creation process has completed. It displays an alert with the URL and hides the \nwebViewController\n and \neditAvatarButton\n.\nfunc\n \navatarUrlCallback\n(\nurl\n:\n \nString\n){\n \nshowAlert\n(\nmessage\n:\n url\n)\n    webViewController\n.\nview\n.\nisHidden \n=\n \ntrue\n    editAvatarButton\n?\n.\nisHidden \n=\n \nfalse\n}\nButton action functions\n[](#button-action-functions)\nBoth button functions are similar, control the visibility of the \nWebViewController,\n and force a page reload. \nHowever, the \nonCreateNewAvatarAction \nfunction must remove all previous avatar data. It destroys and recreates the web view, reloads the page, and clears the history with \nwebViewController.reloadPage(clearHistory: true)\n.  \n \n@IBAction\n \nfunc\n \nonCreateNewAvatarAction\n(\n_\n sender\n:\n \nAny\n)\n \n{\n \ndestroyWebView\n()\n \ncreateWebView\n()\n        webViewController\n.\nreloadPage\n(\nclearHistory\n:\n \ntrue\n)\n        webViewController\n.\nview\n.\nisHidden \n=\n \nfalse\n \n}\n \n@IBAction\n \nfunc\n \nonEditAvatarAction\n(\n_\n sender\n:\n \nAny\n)\n \n{\n        webViewController\n.\nview\n.\nisHidden \n=\n \nfalse\n        webViewController\n.\nreloadPage\n(\nclearHistory\n:\n \nfalse\n)\n \n}\nFinally, the \ndestroyWebView()\n function uses the \nview.tag\n identifier set in the \nCreateWebView()\n function to determine which view to remove.\nfunc\n \ndestroyWebView\n(){\n \nif\n \nlet\n viewWithTag \n=\n \nself\n.\nview\n.\nviewWithTag\n(\nwebViewControllerTag\n)\n \n{\n    webViewController\n.\ndismiss\n(\nanimated\n:\n \ntrue\n,\n completion\n:\n \nnil\n)\n    viewWithTag\n.\nremoveFromSuperview\n()\n}\nelse\n{\n \nprint\n(\n\"No WebView to destroy!\"\n)\n}\nWebCacheCleaner.swift\n[](#webcachecleaner.swift)\nThis is a static utility class \nwebCacheCleaner.swift\n with a single function \nclean()\n for clearing the web view browser's cookies and cache.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/web-and-native-integration/integration-examples/native-ios/swift-example",
            "title": "Swift example project"
        }
    },
    {
        "page_content": "EyeAnimationHandler [Deprecated]\nAnimate avatar eye blinking.\nRotates and blinks the eyes of the avatar randomly. \nTo add eye blinking to your avatar, do one of the following.\nSelect \nComponent > Ready Player Me >EyeAnimationHandler.\nAt runtime, use Unity's \nAddComponent()\n method.\nProperties\n[](#properties)\nProperty\nType\nDescription\nBlinkSpeed\nfloat\nHow fast the eyes blink in seconds.\nBlinkInterval\nfloat\nFrequency of eye blinking in seconds.\nExample\n[](#example)\nprivate\n \nvoid\n \nAvatarLoadedCallback\n(\nGameObject\n avatar\n)\n{\n \n    avatar\n.\nAddComponent\n<\nEyeRotationHandler\n>\n();\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/extras/eyeanimationhandler",
            "title": "EyeAnimationHandler [Deprecated]"
        }
    },
    {
        "page_content": "VoiceHandler [Deprecated]\nMouth animation using microphone feedback.\nUses microphone feedback to animate the \nmouthOpen\n \nblend shape based on the amplitude of the voice. The animation will have a 1-second delay due to the minimum recording length.\nTo add mouth animations to your avatar, do one of the following.\nSelect \nComponent > Ready Player Me >VoiceHandler.\nAt runtime, use Unity's \nAddComponent()\n method.\nProperties\n[](#properties)\nProperty\nType\nDescription\nAudioClip\nAudioClip\nAudio clip to play.\nAudioSource\nAudioSource\nAudio Source that will play the provided audio. If not assigned in the Inspector, it will be created on the same object as the VoiceHandler component.\nAudioProviderType\nAudioProvider\nEnum type of audio provider. \nMicrophone or Audio Clip.\nPublic Methods\n[](#public-methods)\nMethod\nReturns\nDescription\nPlayCurrentAudioClip()\nvoid\nPlays the current Audio Clip.\nPlayAudioClip(\n    AudioClip audioClip)\nvoid\nSets the current Audio Clip with the given parameter and plays it.\nExamples\n[](#examples)\nprivate\n \nvoid\n \nAvatarLoadedCallback\n(\nGameObject\n avatar\n)\n{\n \n    avatar\n.\nAddComponent\n<\nVoiceHandler\n>\n();\n}",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity-sdk/extras/voicehandler",
            "title": "VoiceHandler [Deprecated]"
        }
    },
    {
        "page_content": "Avatar Creator for Android & iOS [Deprecated]\nLet users create avatars on their Android and iOS devices.\nUsers can create Ready Player Me avatars seamlessly in a WebView displayed within a Unity application.\nPrerequisites\n[](#prerequisites)\nReady Player Me SDK. \nYou need the Ready Player Me SDK for Unity installed in your project to retrieve avatars. See the \n[Quickstart guide](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n for instructions.\nDeploying the app.\n In order to test your WebView app, you have to deploy it to a physical or virtual device. See the Unity documentation on how to do that.\n\u200b\n[Android](https://docs.unity3d.com/Manual/android.html)\n development with Unity documentation.\n\u200b\n[iOS ](https://docs.unity3d.com/Manual/iphone.html)\ndevelopment with Unity documentation.\nProject setup (Android and iOS)\n[](#project-setup-android-and-ios)\nCreating a Scene with a WebView in your Unity project is the same for Android and iOS.\n1.\nCreate or open your Unity project. \n2.\nImport the Ready Player Me SDK into your project, if you haven't done so already.\n3.\nNavigate to \nAssets > Plugins > Ready Player Me > Examples > Webview Examples\n.\n4.\nOpen the \nWebviewExample\n Scene. \n5.\nIn the \nHierarchy\n, notice the \nWebviewTest \ngame object. It has a \nWebViewExample\n script component, as well as a Canvas with some buttons.\n6.\nOpen and examine the \nWebviewExample\n \nscript\n. Notice the following.\nVariables for a \nGameObject avatar\n, as well as fields for the UI elements. \nStart()\n adds Listeners to the buttons.\nDisplayWebView()\n creates a Webview for the Avatar Creator if there isn't one. \nOnAvatarCreated()\n. Once the avatar has been created by the user, this callback destroys any existing avatar, instantiates an \nAvatarLoader\n, sets callbacks for success and failure, and then loads the current avatar. \nHideWebView()\n hides the WebView.\nDestroy()\n cleans up the listeners. \n7.\nOpen the \nBuild Settings\n to set up deployment for your chosen platform.\nDeploy on Android\n[](#deploy-on-android)\n1.\nIn \nBuild Settings\n, set the \nPlatform \nto Android. \n2.\nCheck \nDevelopment Build\n.\n \n3.\nClick \nPlayer Settings...\n.\n4.\nFind \nPlayer > Other Settings > Identification\n.\nCheck \nOverride Default Package Name\n.\nSet a unique \nPackage Name\n in the format \ncom.YourCompanyName.YourProductName\n.\n5.\nFind \nPlayer > Other Settings > Under Configuration > Camera Usage Description\n and put some descriptive text in this mandatory field. \n6.\nFind \nPlayer > Other Settings > Under Configuration > Microphone Usage Description\n and put some descriptive text in this mandatory field.\n7.\nClose the \nProject Settings\n. \n8.\nOn your device, turn on \nUSB debugging\n in your Developer Options settings.\n9.\nConnect your device to your computer. \n10.\nClick \nBuild and Run\n.  \n11.\nOnce the app opens on your device, click the button. Give permissions, and off you go. \nAlternatively, you can build the APK and deploy it on your own.\nFor release builds, see the Unity and Android documentation.\nTroubleshooting\n[](#troubleshooting)\nIf you don't have a subdomain, this warning will pop up, and you can click \nContinue with 'demo' subdomain\n.\n\n\u200b\nIf your package name does not comply with the required format, you will get this warning and can't continue until you fix it. \n\n\u200b\nDeploy on iOS\n[](#deploy-on-ios)\n1.\nIn \nBuild Settings\n, set the \nPlatform \nto iOS\n.\n2.\nSelect \nDebug \nand check \nDevelopment build\n.\n3.\nFind \nPlayer > Other Settings > Identification\n.\nCheck \nOverride Default Package Name\n.\nBefore you build your Project for iOS, make sure that you set the \nBundle Identifier\n.\nSet a \nPackage Name\n in the format \ncom.YourCompanyName.YourProductName\n.\nFill in the \nSigning Team ID\n (not required for Debug builds to complete).\nYou can also choose whether your app targets the simulator or an actual device. To do this, change the\n SDK version** >> Target SDK\n to Simulate SDK or Device SDK.\n4.\nFind \nPlayer > Other Settings > Under Configuration > Camera Usage Description\n and put some descriptive text in this mandatory field. \n5.\nFind \nPlayer > Other Settings > Under Configuration > Microphone Usage Description\n and put some descriptive text in this mandatory field.\n6.\nClose \nProject Settings\n. \n7.\nClick \nBuild\n. \n8.\nIn the file explorer, find your \nBuilds \nfolder and in it the \nUnity-iPhone.xcodeproj\n.\nPublication follows the the standard procedure for publishing Unity projects to iOS. \nPublishing for iOS is different from publishing for platforms such as Windows or macOS. Due to restrictions in access to development tools, Unity can only create an Xcode project for an iOS game or app and not build the binary directly. \nSee these resources:\nIn this tutorial, you will learn to publish applications to iOS. \n[https://learn.unity.com/tutorial/how-to-publish-to-ios-2019-3#5e340ca6edbc2a05676e5676](https://learn.unity.com/tutorial/how-to-publish-to-ios-2019-3#5e340ca6edbc2a05676e5676)\n \n\u200b\n[https://docs.unity3d.com/Manual/StructureOfXcodeProject.html](https://docs.unity3d.com/Manual/StructureOfXcodeProject.html)\n\u200b\n\u200b\n[https://docs.unity3d.com/Manual/iphone-GettingStarted.htm](https://docs.unity3d.com/Manual/iphone-GettingStarted.html)\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/avatar-creator/avatar-creator-for-android-and-ios",
            "title": "Avatar Creator for Android & iOS [Deprecated]"
        }
    },
    {
        "page_content": "Avatar Creator for VR and PC [Deprecated]\nUse the Vuplex plugin to embed the Avatar Creator in your Unity project.\nUsers can create Ready Player Me avatars seamlessly in a Vuplex WebView displayed within a Unity application. Note that this is a paid plugin.\nPrerequisites\n[](#prerequisites)\nReady Player Me SDK. \nYou need the Ready Player Me SDK for Unity imported into your Unity project to retrieve avatars. See the \n[Quickstart guide](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n for download and setup instructions.\nReady Player Me Vuplex Example Project\n[](#ready-player-me-vuplex-example-project)\n\u200b\n[-> Checkout the Vuplex example project on GitHub](https://github.com/readyplayerme/Unity-Vuplex-Example)\n\u200b\nThis repository contains a Unity project that uses the Vuplex Web Browser plugin to run the Ready Player Me Avatar Creator and load the Ready Player Me Avatar into the application at runtime. \nFollow the steps in the \n[Readme](https://github.com/readyplayerme/Unity-Vuplex-Example)\n to learn how it works and how to set it up.\nKnown Issues\n \n[](#known-issues)\nWith the older versions of Vuplex, you might experience issues with scrolling in the website. Make sure you are using \nversion 4.1\n or later.\nAlthough the non-Gecko Engine based version of Vuplex Android WebView has a smaller package size, you might experience intermittent 3D canvas freezing on the Ready Player Me website with \nQuest 2 \nbuilds. We recommend using the Gecko Engine based version for a more reliable experience.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/avatar-creator/avatar-creator-for-vr-and-pc",
            "title": "Avatar Creator for VR and PC [Deprecated]"
        }
    },
    {
        "page_content": "Avatar Creator for WebGL [Deprecated]\nLet users create avatar in your Unity WebGL applications.\nUsers can create Ready Player Me avatars seamlessly within a Unity WebGL application.\nPrerequisites\n[](#prerequisites)\nReady Player Me SDK. \nYou need the Ready Player Me SDK for Unity installed with your project to retrieve avatars. See the \n[Quickstart guide](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/quickstart)\n for download and setup instructions.\nReady Player Me WebGL Example project\n[](#ready-player-me-webgl-example-project)\n\u200b\n[-> Checkout the WebGL example on GitHub.](https://github.com/readyplayerme/Unity-WebGL-Example)\n\u200b\nDownload and open the sample Unity Project from GitHub.\nFollow the steps in the \n[Readme](https://github.com/readyplayerme/Unity-WebGL-Example/blob/main/README.md)\n to learn how it works and how to set it setup.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/avatar-creator/avatar-creator-for-webgl",
            "title": "Avatar Creator for WebGL [Deprecated]"
        }
    },
    {
        "page_content": "Avatar Creator (Desktop) [Deprecated]\nIntegrate the Avatar Creator with your Unity desktop project.\nThis sample project uses the \n[paid Vuplex Web Browser plugin](https://developer.vuplex.com/webview/overview)\n to run the Ready Player Me Avatar Creator and load the Ready Player Me avatar into the application at runtime. Use this as a reference for adding Ready Player Me avatars and embed the Ready Player Me Avatar Creator directly into your Unity application.\nDownload and open the sample Unity Project from GitHub.\n\n[https://github.com/readyplayerme/Unity-Vuplex-Example](https://github.com/readyplayerme/Unity-Vuplex-Example)\n\u200b\nFollow the steps in the \n[Readme](https://github.com/readyplayerme/Unity-Vuplex-Example#readme)\n for setup and to learn how it works.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/code-samples/avatar-creator-desktop",
            "title": "Avatar Creator (Desktop) [Deprecated]"
        }
    },
    {
        "page_content": "Avatar Creator (Mobile) [Deprecated]\nIntegrate the Avatar Creator with a mobile app.\nThis example demonstrates how to integrate a Ready Player Me WebView into a Unity Scene. This feature lets users create Ready Player Me avatars directly in a WebView browser displayed in Unity at runtime on mobile devices. \nWith the Ready Player Me SDK installed, find the sample code in\n\nReady Player Me/ Examples/WebView Example/WebViewExample.cs\nRunning the project\n[](#running-the-project)\n1.\nInclude the \nWebView Example/WebViewExample\n Scene in a mobile platform build.\n2.\nOpen the Scene on the device and click \nDisplay WebView\n.\n3.\nA WebView loads, and you can create a Ready Player Me avatar.\n4.\nOnce avatar creation is complete, the WebView closes and the avatar is loaded into the Scene.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/code-samples/avatar-creator-mobile",
            "title": "Avatar Creator (Mobile) [Deprecated]"
        }
    },
    {
        "page_content": "Avatar Creator (WebGL) [Deprecated]\nIntegrate the Avatar Creator with you Unity WebGL project.\nThe Avatar Creator can be integrated into your WebGL Unity Project. This requires setting up the communication between the Avatar Creator and your Unity application.\nDownload and open the sample Unity Project from GitHub.\n\n[https://github.com/readyplayerme/Unity-WebGL-Example](https://github.com/readyplayerme/Unity-WebGL-Example)\n\u200b\nThis sample project uses a custom WebGL template to embed the Ready Player Me character creator inside an application to seamlessly add avatars. Use this as a reference for adding Ready Player Me avatars to your Unity WebGL application.\nThis example has been tested in Unity 2019LTS and newer versions.\nSee \n[Troubleshooting ](https://docs.readyplayer.me/ready-player-me/integration-guides/unreal-engine/troubleshooting)\nif you encounter build errors. \nRunning the project\n[](#running-the-project)\n1.\nMake sure you are building for WebGL and \nScenes/WegGLExample\n is incluided in the Build Settings.\n2.\nOpen Project \nSettings > Player > Settings for WebGL > Resolution and Presentation\n and select the template for your version of Unity.\n3.\nBuild and run the project. You should see the Avatar Creator, be able to create an avatar, close the Avatar Creator, and see the avatar in the scene. \nUsing the template\n[](#using-the-template)\nFor more details, see the \n[Readme](https://github.com/readyplayerme/Unity-WebGL-Example/blob/main/README.md)\n on GitHub or in your project folder. \nFor Unity 2019 use the RPM_2019 Template. For later versions, use the RPMTemplate.\n\u200b\n\u200b\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/code-samples/avatar-creator-webgl",
            "title": "Avatar Creator (WebGL) [Deprecated]"
        }
    },
    {
        "page_content": "Distance-based LODs [Deprecated]\nConfigure distance-based rendering.\nWith the Ready Player Me SDK installed, find the code sample in\n\nAssets/Plugins/Ready Player Me/Examples/AvatarLod Example/AvatarLodExample.cs\nThis example demonstrates how to load multiple levels of detail (LOD) for avatar meshes and configure distance-based render optimization. By enabling LOD, Unity displays the appropriate LOD level for the rendered avatar based on the avatar's distance from the camera.\nUsing the \n[Avatar API ](https://docs.readyplayer.me/ready-player-me/api-reference)\nand \n[Avatar Configurations](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n, this approach downloads multiple avatar LODs, extracts the avatar meshes, and configures the final avatar with LOD support enabled.\nThis example does not support Avatar Configurations with TextureAtlas=None.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/code-samples/distance-based-lods",
            "title": "Distance-based LODs [Deprecated]"
        }
    },
    {
        "page_content": "Loading 2D Avatars [Deprecated]\nCode sample that demonstrates how to load 2D avatars at runtime.\nThis example demonstrates how to request an avatar render image via the Render API and apply the result to a UI sprite. This approach may be useful for showing a profile picture of an avatar in a heads-up display or use it as a button icon.\nThis example has been tested in Unity 2019LTS and newer versions.\nScene and Code\nAssets/Plugins/Ready Player Me/Examples/AvatarRender Example/Avatar Render Example\n1.\nOpen and play the \nAvatarRender Example/AvatarRenderExample\n Scene.\n2.\nOpen the\n AvatarRenderExample.cs script\n.\nNotice that a 2D render uses the same avatar URL as the 3D render of the same avatar.\nCreates an instance of \nAvatarRenderLoader\n. \nDefines the \nOnCompleted()\n callback for the \nAvatarRenderLoader\n; this is called when loading has successfully completed and creates a sprite for the avatar.\nCalls \nLoadRender()\n with the URL for the avatar to load, the type of scene to render, the name of the target blend shape mesh, and the blend shapes. \nSee the \n[AvatarRenderLoader API](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarrenderloader)\n documentation for details on \nLoadRender()\n arguments.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/code-samples/loading-2d-avatars",
            "title": "Loading 2D Avatars [Deprecated]"
        }
    },
    {
        "page_content": "Loading 3D Avatars [Deprecated]\nCode sample that demonstrates how to load an avatar at runtime.\nThese examples have been tested in Unity 2019LTS and newer versions.\nLoading one 3D avatar at runtime\n[](#loading-one-3d-avatar-at-runtime)\nThe \nRuntimeExample.cs\n script demonstrates how to load \none avatar\n at runtime. \nScene and Code\n\nAssets/Plugins/Ready Player Me/Examples/Runtime Example/Runtime Example\n1.\nOpen and play the \nRuntime Example/RuntimeExample\n Scene. The example loads an avatar (and includes a Debug Log panel described below). \n2.\nOpen the \nRuntimeExample.cs script\n, which loads the avatar as follows.\nCreates an instance of AvatarLoader: \nvar avatarLoader = new AvatarLoader();\nDefines the \nOnCompleted()\n callback for the \nAvatarLoader\n; this is called when loading has successfully completed. \nAdds an Avatar Configuration to the \nAvatarLoader\n from Assets > Plugins > ReadyPlayerMe > Resources > Data > AvatarConfigurations.\nCalls \nLoadAvatar()\n with the URL for the avatar to load. This operation will download, import, and load the avatar model into the Scene.\nLoading multiple 3D avatars at runtime\n[](#loading-multiple-3d-avatars-at-runtime)\nThis code sample demonstrates how to load \nmultiple avatars\n at runtime. \nScene and Code\n\nAssets/Plugins/Ready Player Me/Examples/Runtime Example/Runtime Example Multiple\n1.\nOpen and play the \nRuntime Example/RuntimeExampleMultiple\n Scene. The example loads several avatars (and includes a Debug Log panel described below). \n2.\nOpen the Open the \nRuntimeExampleMultiple.cs script\n.\nNotice that there is only one avatar URL.\nLoading works in the same way as for one avatar and is repeated for every avatar to load.\nThe variations in the avatar are created by using a list of different configurations that are applied in \nOnCompleted() -> OnAvatarLoaded()\n after the avatar has been loaded.\nDebug panel\n[](#debug-panel)\nCode\n\n\nAssets/Plugins/Ready Player Me/Examples/Runtime Example/Runtime Debug Panel\nThe \nDebug Panel\n displays the avatar loader log output while the Scene is running in the Unity Editor or on a target device. \nYou can pause or hide the the Debug Panel while playing, or select the Runtime Test game object and disable the DebugPanel(Script) component in the Inspector. \nThe Debug Panel is provided to assist troubleshooting avatar loading issues on device. Include the information contained in the log output with any support queries that you submit via our Technical Support channels.\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/code-samples/loading-3d-avatars",
            "title": "Loading 3D Avatars [Deprecated]"
        }
    },
    {
        "page_content": "Avatar Caching [Deprecated]\nStore avatar assets and date locally.\nThe SDK provides an experimental avatar caching functionality. If avatar caching is enabled, every time an avatar is loaded, its assets are stored locally. If you subsequently try to load the avatar again, the system checks if the avatar needs to be updated, and if so, downloads and saves the updated avatar locally. If the avatar does not need to be updated, the avatar is loaded from the locally stored file.\nAvatar caching is available at runtime and includes support for \n[Avatar Configurations](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/optimize/avatar-configuration)\n.\nIf a Ready Player Me user changes an existing avatar, for example, chooses a different hairstyle, then the avatar needs to be redownloaded even if it is cached locally. This ensures that the application loads the most up-to-date avatar.\nEnable Caching\n[](#enable-caching)\nAvatar caching is disabled by default. To enable avatar caching, do the following.\n1.\nOpen \nReady Player Me > Settings\n.\n2.\nCheck \nAvatar caching enabled\n.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nWe recommend deleting any previously created cache after updating to the latest version of the Ready Player Me Unity SDK. \nSee \n[Manage avatar cache data](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/optimize/avatar-caching#manage-avatar-cache-data)\n below for details.\nCustom Avatar Configuration parameters\n[](#custom-avatar-configuration-parameters)\nWhen Avatars are loaded via the Avatar API, you can include custom Avatar Configuration parameters to control the configuration of the downloaded avatar. Customizations include texture settings, mesh LODs, and included morph targets. \nSee \n[Load Avatars](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/load-avatars)\n \nfor more information and links to example code.\nStored avatar data location\n[](#stored-avatar-data-location)\nDownloaded avatar data is stored based not only on the avatar GUID, but also the assigned Avatar Configuration parameters. This means that multiple instances of an avatar's data may exist in cache at any given time.\nAvatar data is stored at\n<Persistent Data Path>/Avatars/<avatar GUID>/<Avatar Config parameters hash>/\nPreviously, downloaded avatar data for a specific avatar GUID was stored at\n<Persistent Data Path>/Avatars/<avatar GUID>/\nCached avatar data use and updating\n[](#cached-avatar-data-use-and-updating)\nAt runtime, when caching is enabled via the Ready Player Me Settings window, the Avatar Loader checks the state of the avatar on the Ready Player Me server before downloading. If the avatar has not been modified since it was last stored in the client-side cache, the avatar data for the given avatar GUID and Avatar Configuration parameters are loaded from the cache.\nIf changes were made to the avatar on the Ready Player Me server, the client-side cache for the given avatar GUID is cleared and recreated when subsequent \nAvatarLoader.LoadAvatar()\nrequests are made.\nIf the avatar download is interrupted or aborted during data transmission, any corrupt client-side cache data is deleted and recreated the next time the avatar is downloaded.\nDisable Caching \n[](#disable-caching)\n1.\nOpen \nReady Player Me > Settings\n.\n2.\nUncheck \nAvatar caching enabled\n.\nIf caching is disabled, the Avatar Loader always downloads the avatar data from the Ready Player Me server and overwrites data stored on the client. Only one copy of the avatar is stored on the client and replaced on each avatar load request. \nIf different Avatar Configuration parameters are used for multiple avatar load requests, the parameter hash subfolder name will be replaced in the client side cache storage.\nManage avatar cache data\n[](#manage-avatar-cache-data)\nYou can use the following methods to clear the cache on-device for built applications.\n\u00e2\u20ac\u2039\n[AvatarCache.Clear()](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarcache)\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\n[AvatarCache.ClearAvatar(string guid)](https://docs.readyplayer.me/ready-player-me/api-reference/unity-sdk/avatarcache)\n\u00e2\u20ac\u2039\nTo clear cache data manually in the Unity Editor, do one of the following.\nCall \nAvatarCache.Clear()\nto clear all client-side cache or \nAvatarCache.ClearAvatar(string guid)\nto clear all client-side cache for a specific avatar GUID.\nOpen \nReady Player Me > Settings\n and click \nClear local avatar cache\n.\nOpen \nReady Player Me > Settings\n and click \nReveal in Finder\n (Mac) or \nShow in Explorer\n (Windows) to go to the \nAvatars \nfolder containing the data.\n\u00e2\u20ac\u2039\n\u00e2\u20ac\u2039\nUnity Editor Avatar Loader never caches\n[](#unity-editor-avatar-loader-never-caches)\nAvatar caching is not supported when avatars are loaded via the Ready Player Me Avatar Loader window inside the Unity Editor. \nWhen you download avatars using the Avatar Loader window, the avatar data is always downloaded from the server, and a single instance of the avatar data is stored in the project folder.\n<Project Folder>/Assets/Avatars/\nEach time a new avatar is requested, with or without new Avatar Configuration parameters, the stored avatar data is overwritten and the prefab updated.\nExamples\n[](#examples)\nTo get started with Avatar Caching support, see the \n[Runtime Example](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples)\n Scenes included with the SDK at \nAssets\\Plugins\\Ready Player Me\\Examples\\Runtime Example\\\n\u00e2\u20ac\u2039",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/optimize/avatar-caching",
            "title": "Avatar Caching [Deprecated]"
        }
    },
    {
        "page_content": "Avatar Configuration [Deprecated]\nApply Avatar API parameters to avatar loading.\nThe Ready Player Me Avatar API allows partners to specify the Avatar Configuration parameters to apply when loading avatars. These configuration parameters can be applied in the Unity Editor Avatar Loader or at runtime.\nThe SDK provides functionality for loading avatars with specific configurations. For example, you may need a high-quality detailed avatar for showing the model at close range, and a low-quality avatar that will be rendered in a single draw call for other situations. You can set the configuration for each avatar with a custom Avatar Config data asset.\nSee the \n[API Reference](https://github.com/wolfprint3d/ReadyPlayerMe-Docs-v3/blob/master/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/optimize/broken-reference/README.md)\n for details.\nAvatar Configs will only work with the new avatar API URLs. If you have a saved URL in your project, you may need to regenerate the avatar and update the URL in order to use the Avatar Config.\nAvatar Configuration templates\n[](#avatar-configuration-templates)\nSeveral Avatar Configuration templates are included in the SDK with recommended settings for high, medium, and low quality avatars. Find the templateas at\n/Assets/Plugins/Ready Player Me/Resources/Data/Avatar Configurations/\nCreate an Avatar Configuration\n[](#create-an-avatar-configuration)\n1.\nSelect \nAssets > Create > Scriptable Objects > Ready Player Me > Avatar Configuration\n. This creates a new Avatar Configuration asset in the current folder.\n2.\nGive your Avatar Configuraton a name.\n3.\nSelect your Avatar Configuration to open it in the Inspector.\n4.\nChange the settings according to your requirements.\nAvatar Configuration Settings\n[](#avatar-configuration-settings)\nSee the Avatar API \n[3D Avatars](https://docs.readyplayer.me/ready-player-me/api-reference/rest-api/avatars/get-3d-avatars)\n page for details on these options.\nMesh LOD:\n Choose a level of detail (high, medium for 50%, or low for 25%). Run \nReady Player Me > Examples > Runtime Example > RuntimeExampleMultipleQuality\n to see how this looks.\nPose:\n Choose A Pose or T Pose.\nTexture Atlas:\n Turn on texture atlassing and choose the atlas size.\nTexture Size Limit:\n Set an upper limit on texture size.\nUse Hands:\n Check to include hands with half-body VR avatars.\nMorph Targets:\n List of individual morph targets or morph target standard groups to include on the avatar. Click \nAdd\n and then select your target from the menu.\nApply an Avatar Configuration\n[](#apply-an-avatar-configuration)\nAvatar Configurations can be applied in the Unity Editor Avatar Loader or at runtime.\nEditor Avatar Loader\n[](#editor-avatar-loader)\n1.\nOpen your scene.\n2.\nOpen \nReady Player Me > Settings\n.\n3.\nAssign an Avatar Configuration to the \nAvatar Configuration\n setting.\n4.\nOpen \nReady Player Me > Avatar Loader\n.\n5.\nAssign your avatar URL.\n6.\nClick \nLoad Avatar into the Current Scence\n. The specified avatar with the specified Avatar Configuration is loaded into the current scene.\nRuntime Avatar Loader\n[](#runtime-avatar-loader)\n1.\nIn your code, create an instance of \nAvatarLoader\n.\n2.\n[Optional] Load a previously created Avatar Configuration asset or instantiate a new \nAvatar Configuration\n scriptable object and set its parameters.\n3.\n[Optional] Assign the Avatar Configuration to the \nAvatarConfig\n property of the \nAvatarLoader\n instance.\n4.\nCall the \nLoadAvatar()\n method on the \nAvatarLoader\n instance, passing a valid avatar URL.\n5.\nThe Avatar Configuration assigned to the URL will be applied to the loaded avatar.\nIf no Avatar Configuration is assigned to an \nAvatarLoader\n instance, the Avatar Configuration selected in the Ready Player Me Settings window is applied.\nExamples\n[](#examples)\nFind example usage of Avatar Configurations in the SDK Runtime Examples at\nAssets\\Plugins\\Ready Player Me\\Examples\\Runtime Example\\\n.\nSee also \n[More Examples](https://docs.readyplayer.me/ready-player-me/integration-guides/unity/code-samples)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/optimize/avatar-configuration",
            "title": "Avatar Configuration [Deprecated]"
        }
    },
    {
        "page_content": "Avatar loading issues [Deprecated]\nErrors and known issues.\nAvatar does not load on application build\n[](#avatar-does-not-load-on-application-build)\nIf avatar loading works in the Unity Editor but not a in the built application, the GLTFUtility shaders are likely missing. To fix this, add them to the \nAlways Include Shaders\n list in the graphics settings. \nIn the Unity Editor, go to \nEdit > Project Settings > Graphics\n and find the \nAlways Include Shaders\n list. Add the 4 GLTFUtlility shaders as shown below.\nExample of adding shaders to the Always Include Shaders list in Project Settings.\nCannot Load an Avatar in Unity 2018\n[](#cannot-load-an-avatar-in-unity-2018)\nWe no longer actively test or develop features for Unity 2018.\nIf your package import is interrupted, try reimporting the package. \nIf you have issues with avatars not loading in built applications, make sure to add the GLTF Utility shaders to the \"Always Include Shaders\" list in Unity's Graphics Settings.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/troubleshooting/avatar-loading-issues",
            "title": "Avatar loading issues [Deprecated]"
        }
    },
    {
        "page_content": "Firewall issues [Deprecated]\nErrors and known issues.\nFirewall prevents access to Ready Player Me server\n[](#firewall-prevents-access-to-ready-player-me-server)\nIf your app is behind a (corporate) firewall or on a private network, the following domains need to be resolvable from your client in order to access the Ready Player Me avatar creation and customization web interface, and to be able to download the resulting avatars.\nreadyplayer.me\ncname.vercel-dns.com\navatars.readyplayer.me\nd1a370nemizbjq.cloudfront.net\n\u200b",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/troubleshooting/firewall-issues",
            "title": "Firewall issues [Deprecated]"
        }
    },
    {
        "page_content": "iOS issues [Deprecated]\nErrors and known issues.\niOS WebView not loaded\n[](#ios-webview-not-loaded)\nWebView is supported by iOS 14.3 and newer. \nIf you are using any version before 14.3, then it may not work.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/troubleshooting/ios-issues",
            "title": "iOS issues [Deprecated]"
        }
    },
    {
        "page_content": "Newtonsoft JSON issues [Deprecated]\nErrors and known issues.\nNewtonsoft JSON conflict errors\n[](#newtonsoft-json-conflict-errors)\nWhen you import the SDK, you will see a DLL file duplication error. \nThis can happen if you are using a newer version of Unity that already includes one of the packages that depend on the Newtonsoft JSON package (such as the Version Control package). \nIf your Unity install already inlcudes Newtonsoft JSON or a package that depends on it, uncheck that folder in the import window for the SDK, or remove it if you already imported it.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/troubleshooting/newtonsoft-json-issues",
            "title": "Newtonsoft JSON issues [Deprecated]"
        }
    },
    {
        "page_content": "Updating from earlier versions [Deprecated]\nUpdate to the latest version of the Ready Player Me Unity SDK.\nIf you are not using version control on your project, we recommend that you back it up before updating the Unity SDK.\n1.\n\u200b\n[Download the latest version of the Unity SDK](https://bit.ly/RPM-Unity-SDK-Latest)\n.\n2.\nIn \nProject/Assets/Plugins\n, delete the folders \nGLTFUtility\n, \nReady Player Me\n, and \nWebView\n. This reduces the chance of errors caused by reorganizing or refactoring in the update.\n3.\nIf it exists in \nProject/Assets/Plugins,\n delete \nNewtonsoft Json\n.\n \nIf Newtonsoft JSON came with your Unity install, you will find it under \nPackages\n and you cannot delete it.\n4.\nSelect \nAssets > Import Package\n. If Newtonsoft JSON came with your Unity install, uncheck Newtonsoft Json from the package contents. (Or delete it from the \nPlugins \nfolder after importing the SDK.)\n\n\u200b\n5.\nBuild and run your project, and everything should work as expected.\nIf you need additional support, contact support at \n[[email\u00a0protected]](https://docs.readyplayer.me/cdn-cgi/l/email-protection#4e3d3b3e3e213c3a0e3c2b2f2a373e222f372b3c60232b)\n.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/troubleshooting/updating-from-earlier-versions",
            "title": "Updating from earlier versions [Deprecated]"
        }
    },
    {
        "page_content": "WebGL issues [Deprecated]\nErrors and known issues.\nCannot build for WebGL on Unity 2021\n[](#cannot-build-for-webgl-on-unity-2021)\nIn Unity 2021, WebGL builds that include Newtonsoft JSON may encounter build issues. \nOne suggested solution is to change the \"Regional format\" in your build device's OS to English.",
        "metadata": {
            "source": "https://docs.readyplayer.me/ready-player-me/integration-guides/unity/unity-sdk-1.13.x-deprecated/unity/troubleshooting/webgl-issues",
            "title": "WebGL issues [Deprecated]"
        }
    }
]